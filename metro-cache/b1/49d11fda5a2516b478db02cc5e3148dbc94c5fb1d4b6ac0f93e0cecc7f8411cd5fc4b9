{"dependencies":[{"name":"react","isAsync":false},{"name":"./../../../../react-transform-hmr/lib/index.js","isAsync":false},{"name":"clamp","isAsync":false},{"name":"react-native","isAsync":false},{"name":"react-navigation","isAsync":false},{"name":"./StackViewCard","isAsync":false},{"name":"../Header/Header","isAsync":false},{"name":"./screens","isAsync":false},{"name":"./StackViewTransitionConfigs","isAsync":false},{"name":"../../utils/ReactNativeFeatures","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"react\"));\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./../../../../react-transform-hmr/lib/index.js\"));\n\n  var _clamp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"clamp\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[3], \"react-native\");\n\n  var _reactNavigation = _$$_REQUIRE(_dependencyMap[4], \"react-navigation\");\n\n  var _StackViewCard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"./StackViewCard\"));\n\n  var _Header = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"../Header/Header\"));\n\n  var _screens = _$$_REQUIRE(_dependencyMap[7], \"./screens\");\n\n  var _StackViewTransitionConfigs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"./StackViewTransitionConfigs\"));\n\n  var _ReactNativeFeatures = _$$_REQUIRE(_dependencyMap[9], \"../../utils/ReactNativeFeatures\");\n\n  var _jsxFileName = \"/home/laksh/reactNativeNavigation/navigationTask/node_modules/react-navigation-stack/dist/views/StackView/StackViewLayout.js\";\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\n  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }\n\n  var _components = {\n    StackViewLayout: {\n      displayName: \"StackViewLayout\"\n    }\n  };\n\n  var _reactTransformHmrLibIndexJs2 = (0, _index.default)({\n    filename: \"/home/laksh/reactNativeNavigation/navigationTask/node_modules/react-navigation-stack/dist/views/StackView/StackViewLayout.js\",\n    components: _components,\n    locals: [module],\n    imports: [_react.default]\n  });\n\n  function _wrapComponent(id) {\n    return function (Component) {\n      return _reactTransformHmrLibIndexJs2(Component, id);\n    };\n  }\n\n  var emptyFunction = function emptyFunction() {};\n\n  var _Dimensions$get = _reactNative.Dimensions.get('window'),\n      WINDOW_WIDTH = _Dimensions$get.width,\n      WINDOW_HEIGHT = _Dimensions$get.height;\n\n  var IS_IPHONE_X = _reactNative.Platform.OS === 'ios' && !_reactNative.Platform.isPad && !_reactNative.Platform.isTVOS && (WINDOW_HEIGHT === 812 || WINDOW_WIDTH === 812);\n\n  var EaseInOut = _reactNative.Easing.inOut(_reactNative.Easing.ease);\n\n  var HEADER_LAYOUT_PRESET_VALUES = ['center', 'left'];\n  var HEADER_TRANSITION_PRESET_VALUES = ['uikit', 'fade-in-place'];\n  var ANIMATION_DURATION = 500;\n  var POSITION_THRESHOLD = 1 / 2;\n  var RESPOND_THRESHOLD = 20;\n  var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;\n  var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\n  var animatedSubscribeValue = function animatedSubscribeValue(animatedValue) {\n    if (!animatedValue.__isNative) {\n      return;\n    }\n\n    if (Object.keys(animatedValue._listeners).length === 0) {\n      animatedValue.addListener(emptyFunction);\n    }\n  };\n\n  var getDefaultHeaderHeight = function getDefaultHeaderHeight(isLandscape) {\n    if (_reactNative.Platform.OS === 'ios') {\n      if (isLandscape && !_reactNative.Platform.isPad) {\n        return 32;\n      } else if (IS_IPHONE_X) {\n        return 88;\n      } else {\n        return 64;\n      }\n    } else {\n      return 56;\n    }\n  };\n\n  var StackViewLayout = function (_React$Component) {\n    function StackViewLayout(props) {\n      var _this;\n\n      _classCallCheck(this, StackViewLayout);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(StackViewLayout).call(this, props));\n      _this._gestureStartValue = 0;\n      _this._isResponding = false;\n      _this._immediateIndex = null;\n      _this._panResponder = _reactNative.PanResponder.create({\n        onPanResponderTerminate: function onPanResponderTerminate() {\n          var navigation = _this.props.transitionProps.navigation;\n          var index = navigation.state.index;\n          _this._isResponding = false;\n\n          _this._reset(index, 0);\n\n          _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n        },\n        onPanResponderGrant: function onPanResponderGrant() {\n          var _this$props$transitio = _this.props.transitionProps,\n              navigation = _this$props$transitio.navigation,\n              position = _this$props$transitio.position,\n              scene = _this$props$transitio.scene;\n          var index = navigation.state.index;\n\n          if (index !== scene.index) {\n            return false;\n          }\n\n          position.stopAnimation(function (value) {\n            _this._isResponding = true;\n            _this._gestureStartValue = value;\n          });\n          _this.props.onGestureBegin && _this.props.onGestureBegin();\n        },\n        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {\n          var _this$props = _this.props,\n              _this$props$transitio2 = _this$props.transitionProps,\n              navigation = _this$props$transitio2.navigation,\n              layout = _this$props$transitio2.layout,\n              scene = _this$props$transitio2.scene,\n              mode = _this$props.mode;\n          var index = navigation.state.index;\n          var isVertical = mode === 'modal';\n          var options = scene.descriptor.options;\n          var gestureDirection = options.gestureDirection;\n          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;\n\n          if (index !== scene.index) {\n            return false;\n          }\n\n          var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;\n          var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n          var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];\n          var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n          var axisHasBeenMeasured = !!axisLength;\n          var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;\n          var _options$gestureRespo = options.gestureResponseDistance,\n              userGestureResponseDistance = _options$gestureRespo === void 0 ? {} : _options$gestureRespo;\n          var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n          if (screenEdgeDistance > gestureResponseDistance) {\n            return false;\n          }\n\n          var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;\n          var isOnFirstCard = immediateIndex === 0;\n          var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;\n          return shouldSetResponder;\n        },\n        onPanResponderMove: function onPanResponderMove(event, gesture) {\n          var _this$props2 = _this.props,\n              _this$props2$transiti = _this$props2.transitionProps,\n              navigation = _this$props2$transiti.navigation,\n              position = _this$props2$transiti.position,\n              layout = _this$props2$transiti.layout,\n              scene = _this$props2$transiti.scene,\n              mode = _this$props2.mode;\n          var index = navigation.state.index;\n          var isVertical = mode === 'modal';\n          var options = scene.descriptor.options;\n          var gestureDirection = options.gestureDirection;\n          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;\n          var startValue = _this._gestureStartValue;\n          var axis = isVertical ? 'dy' : 'dx';\n          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n          var currentValue = axis === 'dx' && gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;\n          var value = (0, _clamp.default)(index - 1, currentValue, index);\n          position.setValue(value);\n        },\n        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {\n          return false;\n        },\n        onPanResponderRelease: function onPanResponderRelease(event, gesture) {\n          var _this$props3 = _this.props,\n              _this$props3$transiti = _this$props3.transitionProps,\n              navigation = _this$props3$transiti.navigation,\n              position = _this$props3$transiti.position,\n              layout = _this$props3$transiti.layout,\n              scene = _this$props3$transiti.scene,\n              mode = _this$props3.mode;\n          var index = navigation.state.index;\n          var isVertical = mode === 'modal';\n          var options = scene.descriptor.options;\n          var gestureDirection = options.gestureDirection;\n          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;\n\n          if (!_this._isResponding) {\n            return;\n          }\n\n          _this._isResponding = false;\n          var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;\n          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n          var movementDirection = gestureDirectionInverted ? -1 : 1;\n          var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];\n          var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];\n          var defaultVelocity = axisDistance / ANIMATION_DURATION;\n          var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n          var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;\n          var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;\n          position.stopAnimation(function (value) {\n            if (gestureVelocity < -0.5) {\n              _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n\n              _this._reset(immediateIndex, resetDuration);\n\n              return;\n            }\n\n            if (gestureVelocity > 0.5) {\n              _this.props.onGestureFinish && _this.props.onGestureFinish();\n\n              _this._goBack(immediateIndex, goBackDuration);\n\n              return;\n            }\n\n            if (value <= index - POSITION_THRESHOLD) {\n              _this.props.onGestureFinish && _this.props.onGestureFinish();\n\n              _this._goBack(immediateIndex, goBackDuration);\n            } else {\n              _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n\n              _this._reset(immediateIndex, resetDuration);\n            }\n          });\n        }\n      });\n\n      _this._onFloatingHeaderLayout = function (e) {\n        _this.setState({\n          floatingHeaderHeight: e.nativeEvent.layout.height\n        });\n      };\n\n      _this._getTransitionConfig = function () {\n        var isModal = _this.props.mode === 'modal';\n        return _StackViewTransitionConfigs.default.getTransitionConfig(_this.props.transitionConfig, _this.props.transitionProps, _this.props.lastTransitionProps, isModal);\n      };\n\n      _this._renderCard = function (scene) {\n        var _this$_getTransitionC = _this._getTransitionConfig(),\n            screenInterpolator = _this$_getTransitionC.screenInterpolator;\n\n        var style = screenInterpolator && screenInterpolator(_objectSpread({}, _this.props.transitionProps, {\n          scene: scene\n        }));\n        var options = scene.descriptor.options;\n        var hasHeader = options.header !== null;\n\n        var headerMode = _this._getHeaderMode();\n\n        var marginTop = 0;\n\n        if (!hasHeader && headerMode === 'float') {\n          marginTop = -_this.state.floatingHeaderHeight;\n        }\n\n        return _react.default.createElement(_StackViewCard.default, _extends({}, _this.props.transitionProps, {\n          key: \"card_\" + scene.key,\n          style: [style, {\n            marginTop: marginTop\n          }, _this.props.cardStyle],\n          scene: scene,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 506\n          }\n        }), _this._renderInnerScene(scene));\n      };\n\n      _this.state = {\n        floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)\n      };\n      return _this;\n    }\n\n    _createClass(StackViewLayout, [{\n      key: \"_renderHeader\",\n      value: function _renderHeader(scene, headerMode) {\n        var options = scene.descriptor.options;\n        var header = options.header;\n\n        if (__DEV__ && typeof header === 'string') {\n          throw new Error(\"Invalid header value: \\\"\" + header + \"\\\". The header option must be a valid React component or null, not a string.\");\n        }\n\n        if (header === null && headerMode === 'screen') {\n          return null;\n        }\n\n        if (_react.default.isValidElement(header)) {\n          return header;\n        }\n\n        var renderHeader = header || function (props) {\n          return _react.default.createElement(_Header.default, _extends({}, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            }\n          }));\n        };\n\n        var _this$_getTransitionC2 = this._getTransitionConfig(),\n            headerLeftInterpolator = _this$_getTransitionC2.headerLeftInterpolator,\n            headerTitleInterpolator = _this$_getTransitionC2.headerTitleInterpolator,\n            headerRightInterpolator = _this$_getTransitionC2.headerRightInterpolator,\n            headerBackgroundInterpolator = _this$_getTransitionC2.headerBackgroundInterpolator;\n\n        var _this$props4 = this.props,\n            transitionProps = _this$props4.transitionProps,\n            passProps = _objectWithoutProperties(_this$props4, [\"transitionProps\"]);\n\n        return _react.default.createElement(_reactNavigation.NavigationProvider, {\n          value: scene.descriptor.navigation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          }\n        }, renderHeader(_objectSpread({}, passProps, transitionProps, {\n          scene: scene,\n          mode: headerMode,\n          transitionPreset: this._getHeaderTransitionPreset(),\n          layoutPreset: this._getHeaderLayoutPreset(),\n          backTitleVisible: this._getheaderBackTitleVisible(),\n          leftInterpolator: headerLeftInterpolator,\n          titleInterpolator: headerTitleInterpolator,\n          rightInterpolator: headerRightInterpolator,\n          backgroundInterpolator: headerBackgroundInterpolator\n        })));\n      }\n    }, {\n      key: \"_animatedSubscribe\",\n      value: function _animatedSubscribe(props) {\n        animatedSubscribeValue(props.transitionProps.layout.width);\n        animatedSubscribeValue(props.transitionProps.layout.height);\n        animatedSubscribeValue(props.transitionProps.position);\n      }\n    }, {\n      key: \"_reset\",\n      value: function _reset(resetToIndex, duration) {\n        if (_reactNative.Platform.OS === 'ios' && (0, _ReactNativeFeatures.supportsImprovedSpringAnimation)()) {\n          _reactNative.Animated.spring(this.props.transitionProps.position, {\n            toValue: resetToIndex,\n            stiffness: 5000,\n            damping: 600,\n            mass: 3,\n            useNativeDriver: this.props.transitionProps.position.__isNative\n          }).start();\n        } else {\n          _reactNative.Animated.timing(this.props.transitionProps.position, {\n            toValue: resetToIndex,\n            duration: duration,\n            easing: EaseInOut,\n            useNativeDriver: this.props.transitionProps.position.__isNative\n          }).start();\n        }\n      }\n    }, {\n      key: \"_goBack\",\n      value: function _goBack(backFromIndex, duration) {\n        var _this2 = this;\n\n        var _this$props$transitio3 = this.props.transitionProps,\n            navigation = _this$props$transitio3.navigation,\n            position = _this$props$transitio3.position,\n            scenes = _this$props$transitio3.scenes;\n        var toValue = Math.max(backFromIndex - 1, 0);\n        this._immediateIndex = toValue;\n\n        var onCompleteAnimation = function onCompleteAnimation() {\n          _this2._immediateIndex = null;\n          var backFromScene = scenes.find(function (s) {\n            return s.index === toValue + 1;\n          });\n\n          if (!_this2._isResponding && backFromScene) {\n            navigation.dispatch(_reactNavigation.NavigationActions.back({\n              key: backFromScene.route.key,\n              immediate: true\n            }));\n            navigation.dispatch(_reactNavigation.StackActions.completeTransition());\n          }\n        };\n\n        if (_reactNative.Platform.OS === 'ios' && (0, _ReactNativeFeatures.supportsImprovedSpringAnimation)()) {\n          _reactNative.Animated.spring(position, {\n            toValue: toValue,\n            stiffness: 5000,\n            damping: 600,\n            mass: 3,\n            useNativeDriver: position.__isNative\n          }).start(onCompleteAnimation);\n        } else {\n          _reactNative.Animated.timing(position, {\n            toValue: toValue,\n            duration: duration,\n            easing: EaseInOut,\n            useNativeDriver: position.__isNative\n          }).start(onCompleteAnimation);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n\n        var floatingHeader = null;\n\n        var headerMode = this._getHeaderMode();\n\n        if (headerMode === 'float') {\n          var _scene = this.props.transitionProps.scene;\n          floatingHeader = _react.default.createElement(_reactNative.View, {\n            pointerEvents: \"box-none\",\n            onLayout: this._onFloatingHeaderLayout,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 382\n            }\n          }, this._renderHeader(_scene, headerMode));\n        }\n\n        var _this$props$transitio4 = this.props.transitionProps,\n            scene = _this$props$transitio4.scene,\n            scenes = _this$props$transitio4.scenes;\n        var options = scene.descriptor.options;\n        var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : _reactNative.Platform.OS === 'ios';\n        var responder = !gesturesEnabled ? null : this._panResponder;\n        var handlers = gesturesEnabled ? responder.panHandlers : {};\n        var containerStyle = [styles.container, this._getTransitionConfig().containerStyle];\n        return _react.default.createElement(_reactNative.View, _extends({}, handlers, {\n          style: containerStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 398\n          }\n        }), _react.default.createElement(_screens.ScreenContainer, {\n          style: styles.scenes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 399\n          }\n        }, scenes.map(function (s) {\n          return _this3._renderCard(s);\n        })), floatingHeader);\n      }\n    }, {\n      key: \"_getHeaderMode\",\n      value: function _getHeaderMode() {\n        if (this.props.headerMode) {\n          return this.props.headerMode;\n        }\n\n        if (_reactNative.Platform.OS === 'android' || this.props.mode === 'modal') {\n          return 'screen';\n        }\n\n        return 'float';\n      }\n    }, {\n      key: \"_getHeaderLayoutPreset\",\n      value: function _getHeaderLayoutPreset() {\n        var headerLayoutPreset = this.props.headerLayoutPreset;\n\n        if (headerLayoutPreset) {\n          if (__DEV__) {\n            if (this._getHeaderTransitionPreset() === 'uikit' && headerLayoutPreset === 'left' && _reactNative.Platform.OS === 'ios') {\n              console.warn(\"headerTransitionPreset with the value 'ui-kit' is incompatible with headerLayoutPreset 'left'\");\n            }\n          }\n\n          if (HEADER_LAYOUT_PRESET_VALUES.includes(headerLayoutPreset)) {\n            return headerLayoutPreset;\n          }\n\n          if (__DEV__) {\n            console.error(\"Invalid configuration applied for headerLayoutPreset - expected one of \" + HEADER_LAYOUT_PRESET_VALUES.join(', ') + \" but received \" + JSON.stringify(headerLayoutPreset));\n          }\n        }\n\n        if (_reactNative.Platform.OS === 'android') {\n          return 'left';\n        } else {\n          return 'center';\n        }\n      }\n    }, {\n      key: \"_getHeaderTransitionPreset\",\n      value: function _getHeaderTransitionPreset() {\n        if (_reactNative.Platform.OS === 'android' || this._getHeaderMode() === 'screen') {\n          return 'fade-in-place';\n        }\n\n        var headerTransitionPreset = this.props.headerTransitionPreset;\n\n        if (headerTransitionPreset) {\n          if (HEADER_TRANSITION_PRESET_VALUES.includes(headerTransitionPreset)) {\n            return headerTransitionPreset;\n          }\n\n          if (__DEV__) {\n            console.error(\"Invalid configuration applied for headerTransitionPreset - expected one of \" + HEADER_TRANSITION_PRESET_VALUES.join(', ') + \" but received \" + JSON.stringify(headerTransitionPreset));\n          }\n        }\n\n        return 'fade-in-place';\n      }\n    }, {\n      key: \"_getheaderBackTitleVisible\",\n      value: function _getheaderBackTitleVisible() {\n        var headerBackTitleVisible = this.props.headerBackTitleVisible;\n        return headerBackTitleVisible;\n      }\n    }, {\n      key: \"_renderInnerScene\",\n      value: function _renderInnerScene(scene) {\n        var _scene$descriptor = scene.descriptor,\n            navigation = _scene$descriptor.navigation,\n            getComponent = _scene$descriptor.getComponent;\n        var SceneComponent = getComponent();\n        var screenProps = this.props.screenProps;\n\n        var headerMode = this._getHeaderMode();\n\n        if (headerMode === 'screen') {\n          return _react.default.createElement(_reactNative.View, {\n            style: styles.container,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 474\n            }\n          }, _react.default.createElement(_reactNative.View, {\n            style: styles.scenes,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 475\n            }\n          }, _react.default.createElement(_reactNavigation.SceneView, {\n            screenProps: screenProps,\n            navigation: navigation,\n            component: SceneComponent,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 476\n            }\n          })), this._renderHeader(scene, headerMode));\n        }\n\n        return _react.default.createElement(_reactNavigation.SceneView, {\n          screenProps: screenProps,\n          navigation: navigation,\n          component: SceneComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 481\n          }\n        });\n      }\n    }]);\n\n    _inherits(StackViewLayout, _React$Component);\n\n    return StackViewLayout;\n  }(_react.default.Component);\n\n  StackViewLayout = _wrapComponent(\"StackViewLayout\")(StackViewLayout);\n\n  var styles = _reactNative.StyleSheet.create({\n    container: {\n      flex: 1,\n      flexDirection: 'column-reverse'\n    },\n    scenes: {\n      flex: 1\n    }\n  });\n\n  var _default2 = (0, _reactNavigation.withOrientation)(StackViewLayout);\n\n  exports.default = _default2;\n});","map":[[7,0,1,0],[11,0,3,0],[13,0,4,0],[15,0,5,0],[17,0,7,0],[19,0,8,0],[21,0,9,0],[23,0,11,0],[25,0,12,0],[74,0,14,0],[74,6,14,6,"emptyFunction"],[74,22,14,22],[74,31,14,6,"emptyFunction"],[74,44,14,22],[74,47,14,28],[74,48,14,30],[74,49,14,0],[76,24,16,55,"Dimensions"],[76,48,16,66,"get"],[76,51,16,55],[76,52,16,70],[76,60,16,55],[76,61],[77,6,16,15,"WINDOW_WIDTH"],[77,18],[77,37,16,8,"width"],[77,42],[78,6,16,37,"WINDOW_HEIGHT"],[78,19],[78,38,16,29,"height"],[78,44],[80,0,17,0],[80,6,17,6,"IS_IPHONE_X"],[80,20,17,20,"Platform"],[80,42,17,29,"OS"],[80,44,17,20],[80,49,17,36],[80,54,17,20],[80,58,17,45],[80,59,17,46,"Platform"],[80,81,17,55,"isPad"],[80,86,17,20],[80,90,17,64],[80,91,17,65,"Platform"],[80,113,17,74,"isTVOS"],[80,119,17,20],[80,124,17,85,"WINDOW_HEIGHT"],[80,142,17,103],[80,145,17,85],[80,149,17,110,"WINDOW_WIDTH"],[80,166,17,127],[80,169,17,20],[80,170,17,0],[82,0,19,0],[82,6,19,6,"EaseInOut"],[82,18,19,18,"Easing"],[82,38,19,25,"inOut"],[82,43,19,18],[82,44,19,31,"Easing"],[82,64,19,38,"ease"],[82,68,19,18],[82,69,19,0],[84,0,24,0],[84,6,24,6,"HEADER_LAYOUT_PRESET_VALUES"],[84,36,24,36],[84,37,24,37],[84,45,24,36],[84,47,24,47],[84,53,24,36],[84,54,24,0],[85,0,25,0],[85,6,25,6,"HEADER_TRANSITION_PRESET_VALUES"],[85,40,25,40],[85,41,25,41],[85,48,25,40],[85,50,25,50],[85,65,25,40],[85,66,25,0],[86,0,32,0],[86,6,32,6,"ANIMATION_DURATION"],[86,27,32,27],[86,30,32,0],[87,0,39,0],[87,6,39,6,"POSITION_THRESHOLD"],[87,27,39,27],[87,31,39,31],[87,32,39,0],[88,0,44,0],[88,6,44,6,"RESPOND_THRESHOLD"],[88,26,44,26],[88,28,44,0],[89,0,49,0],[89,6,49,6,"GESTURE_RESPONSE_DISTANCE_HORIZONTAL"],[89,45,49,45],[89,47,49,0],[90,0,50,0],[90,6,50,6,"GESTURE_RESPONSE_DISTANCE_VERTICAL"],[90,43,50,43],[90,46,50,0],[92,0,52,0],[92,6,52,6,"animatedSubscribeValue"],[92,31,52,31],[92,40,52,6,"animatedSubscribeValue"],[92,62,52,31],[92,78,52,48],[93,0,53,2],[93,8,53,6],[93,9,53,7,"animatedValue"],[93,23,53,21,"__isNative"],[93,33,53,2],[93,35,53,33],[94,0,54,4],[95,0,55,3],[97,0,56,2],[97,8,56,6,"Object"],[97,15,56,13,"keys"],[97,19,56,6],[97,20,56,18,"animatedValue"],[97,34,56,32,"_listeners"],[97,44,56,6],[97,46,56,44,"length"],[97,52,56,6],[97,57,56,55],[97,58,56,2],[97,60,56,58],[98,0,57,4,"animatedValue"],[98,20,57,18,"addListener"],[98,31,57,4],[98,32,57,30,"emptyFunction"],[98,45,57,4],[99,0,58,3],[100,0,59,1],[100,3,52,0],[102,0,61,0],[102,6,61,6,"getDefaultHeaderHeight"],[102,31,61,31],[102,40,61,6,"getDefaultHeaderHeight"],[102,62,61,31],[102,76,61,46],[103,0,62,2],[103,8,62,6,"Platform"],[103,30,62,15,"OS"],[103,32,62,6],[103,37,62,22],[103,42,62,2],[103,44,62,29],[104,0,63,4],[104,10,63,8,"isLandscape"],[104,25,63,23],[104,26,63,24,"Platform"],[104,48,63,33,"isPad"],[104,53,63,4],[104,55,63,40],[105,0,64,6],[105,15,64,13],[105,17,64,6],[106,0,65,5],[106,7,63,4],[106,13,65,11],[106,17,65,15,"IS_IPHONE_X"],[106,28,65,11],[106,30,65,28],[107,0,66,6],[107,15,66,13],[107,17,66,6],[108,0,67,5],[108,7,65,11],[108,13,67,11],[109,0,68,6],[109,15,68,13],[109,17,68,6],[110,0,69,5],[111,0,70,3],[111,5,62,2],[111,11,70,9],[112,0,71,4],[112,13,71,11],[112,15,71,4],[113,0,72,3],[114,0,73,1],[114,3,61,0],[116,6,75,6,"StackViewLayout"],[116,21],[117,0,96,2],[117,29,96,14,"props"],[117,34,96,2],[117,36,96,21],[118,0,96,21],[120,0,96,21],[122,0,97,4],[122,91,97,10,"props"],[122,96,97,4],[123,0,96,21],[123,12,82,2,"_gestureStartValue"],[123,30,96,21],[123,33,82,23],[123,34,96,21],[124,0,96,21],[124,12,85,2,"_isResponding"],[124,25,96,21],[124,28,85,18],[124,33,96,21],[125,0,96,21],[125,12,94,2,"_immediateIndex"],[125,27,96,21],[125,30,94,20],[125,34,96,21],[126,0,96,21],[126,12,225,2,"_panResponder"],[126,25,96,21],[126,28,225,18,"PanResponder"],[126,54,225,31,"create"],[126,60,225,18],[126,61,225,38],[127,0,226,4,"onPanResponderTerminate"],[127,33,226,29],[127,68,226,35],[128,0,226,35],[128,14,227,14,"navigation"],[128,24,226,35],[128,27,227,29],[128,33,227,34,"props"],[128,38,227,29],[128,39,227,40,"transitionProps"],[128,54,226,35],[128,55,227,14,"navigation"],[128,65,226,35],[129,0,226,35],[129,14,228,14,"index"],[129,19,226,35],[129,22,228,24,"navigation"],[129,33,228,35,"state"],[129,38,226,35],[129,39,228,14,"index"],[129,44,226,35],[130,0,229,6],[130,16,229,11,"_isResponding"],[130,29,229,6],[130,32,229,27],[130,37,229,6],[132,0,230,6],[132,16,230,11,"_reset"],[132,22,230,6],[132,23,230,18,"index"],[132,28,230,6],[132,30,230,25],[132,31,230,6],[134,0,231,6],[134,16,231,11,"props"],[134,21,231,6],[134,22,231,17,"onGestureCanceled"],[134,39,231,6],[134,43,231,38],[134,49,231,43,"props"],[134,54,231,38],[134,55,231,49,"onGestureCanceled"],[134,72,231,38],[134,74,231,6],[135,0,232,5],[135,9,225,38],[136,0,233,4,"onPanResponderGrant"],[136,29,233,25],[136,60,233,31],[137,0,233,31],[137,38,236,10],[137,44,236,15,"props"],[137,49,233,31],[137,50,235,8,"transitionProps"],[137,65,233,31],[138,0,233,31],[138,14,235,27,"navigation"],[138,24,233,31],[138,49,235,27,"navigation"],[138,59,233,31],[139,0,233,31],[139,14,235,39,"position"],[139,22,233,31],[139,47,235,39,"position"],[139,55,233,31],[140,0,233,31],[140,14,235,49,"scene"],[140,19,233,31],[140,44,235,49,"scene"],[140,49,233,31],[141,0,233,31],[141,14,237,14,"index"],[141,19,233,31],[141,22,237,24,"navigation"],[141,33,237,35,"state"],[141,38,233,31],[141,39,237,14,"index"],[141,44,233,31],[143,0,239,6],[143,14,239,10,"index"],[143,24,239,20,"scene"],[143,30,239,26,"index"],[143,35,239,6],[143,37,239,33],[144,0,240,8],[144,19,240,15],[144,24,240,8],[145,0,241,7],[147,0,243,6,"position"],[147,19,243,15,"stopAnimation"],[147,32,243,6],[147,33,243,29],[147,50,243,38],[148,0,244,8],[148,18,244,13,"_isResponding"],[148,31,244,8],[148,34,244,29],[148,38,244,8],[149,0,245,8],[149,18,245,13,"_gestureStartValue"],[149,36,245,8],[149,39,245,34,"value"],[149,44,245,8],[150,0,246,7],[150,11,243,6],[151,0,247,6],[151,16,247,11,"props"],[151,21,247,6],[151,22,247,17,"onGestureBegin"],[151,36,247,6],[151,40,247,35],[151,46,247,40,"props"],[151,51,247,35],[151,52,247,46,"onGestureBegin"],[151,66,247,35],[151,68,247,6],[152,0,248,5],[152,9,225,38],[153,0,249,4,"onMoveShouldSetPanResponder"],[153,37,249,33],[153,74,249,34,"event"],[153,79,249,33],[153,81,249,41,"gesture"],[153,88,249,33],[153,90,249,53],[154,0,249,53],[154,28,253,10],[154,34,253,15,"props"],[154,39,249,53],[155,0,249,53],[155,51,251,8,"transitionProps"],[155,66,249,53],[156,0,249,53],[156,14,251,27,"navigation"],[156,24,249,53],[156,50,251,27,"navigation"],[156,60,249,53],[157,0,249,53],[157,14,251,39,"layout"],[157,20,249,53],[157,46,251,39,"layout"],[157,52,249,53],[158,0,249,53],[158,14,251,47,"scene"],[158,19,249,53],[158,45,251,47,"scene"],[158,50,249,53],[159,0,249,53],[159,14,252,8,"mode"],[159,18,249,53],[159,33,252,8,"mode"],[159,37,249,53],[160,0,249,53],[160,14,254,14,"index"],[160,19,249,53],[160,22,254,24,"navigation"],[160,33,254,35,"state"],[160,38,249,53],[160,39,254,14,"index"],[160,44,249,53],[161,0,255,6],[161,14,255,12,"isVertical"],[161,27,255,25,"mode"],[161,36,255,34],[161,43,255,6],[162,0,249,53],[162,14,256,14,"options"],[162,21,249,53],[162,24,256,26,"scene"],[162,30,256,32,"descriptor"],[162,40,249,53],[162,41,256,14,"options"],[162,48,249,53],[163,0,257,6],[163,14,257,12,"gestureDirection"],[163,33,257,31,"options"],[163,41,257,39,"gestureDirection"],[163,57,257,6],[164,0,259,6],[164,14,259,12,"gestureDirectionInverted"],[164,41,259,39],[164,48,259,46,"gestureDirection"],[164,64,259,39],[164,69,259,67],[164,77,259,39],[164,80,259,78,"gestureDirection"],[164,101,259,99],[164,111,259,39],[164,114,259,112,"I18nManager"],[164,139,259,124,"isRTL"],[164,144,259,6],[166,0,261,6],[166,14,261,10,"index"],[166,24,261,20,"scene"],[166,30,261,26,"index"],[166,35,261,6],[166,37,261,33],[167,0,262,8],[167,19,262,15],[167,24,262,8],[168,0,263,7],[170,0,265,6],[170,14,265,12,"immediateIndex"],[170,31,265,29],[170,37,265,34,"_immediateIndex"],[170,52,265,29],[170,56,265,53],[170,60,265,29],[170,63,265,60,"index"],[170,68,265,29],[170,71,265,68],[170,77,265,73,"_immediateIndex"],[170,92,265,6],[171,0,266,6],[171,14,266,12,"currentDragDistance"],[171,36,266,34,"gesture"],[171,44,266,42,"isVertical"],[171,57,266,55],[171,61,266,42],[171,64,266,62],[171,68,266,34],[171,69,266,6],[172,0,267,6],[172,14,267,12,"currentDragPosition"],[172,36,267,34,"event"],[172,42,267,40,"nativeEvent"],[172,53,267,34],[172,54,267,52,"isVertical"],[172,67,267,65],[172,74,267,52],[172,77,267,75],[172,84,267,34],[172,85,267,6],[173,0,268,6],[173,14,268,12,"axisLength"],[173,27,268,25,"isVertical"],[173,40,268,38,"layout"],[173,47,268,45,"height"],[173,53,268,38],[173,54,268,52,"__getValue"],[173,64,268,38],[173,66,268,25],[173,69,268,67,"layout"],[173,76,268,74,"width"],[173,81,268,67],[173,82,268,80,"__getValue"],[173,92,268,67],[173,94,268,6],[174,0,269,6],[174,14,269,12,"axisHasBeenMeasured"],[174,36,269,34],[174,37,269,35],[174,38,269,36,"axisLength"],[174,48,269,6],[175,0,272,6],[175,14,272,12,"screenEdgeDistance"],[175,35,272,33,"gestureDirectionInverted"],[175,62,272,60,"axisLength"],[175,76,272,74,"currentDragPosition"],[175,98,272,96,"currentDragDistance"],[175,117,272,60],[175,118,272,33],[175,121,272,119,"currentDragPosition"],[175,143,272,141,"currentDragDistance"],[175,162,272,6],[176,0,249,53],[176,38,277,10,"options"],[176,45,249,53],[176,46,276,8,"gestureResponseDistance"],[176,69,249,53],[177,0,249,53],[177,14,276,33,"userGestureResponseDistance"],[177,41,249,53],[177,79,276,63],[177,81,249,53],[178,0,278,6],[178,14,278,12,"gestureResponseDistance"],[178,40,278,38,"isVertical"],[178,53,278,51,"userGestureResponseDistance"],[178,81,278,79,"vertical"],[178,89,278,51],[178,93,278,91,"GESTURE_RESPONSE_DISTANCE_VERTICAL"],[178,127,278,38],[178,130,278,128,"userGestureResponseDistance"],[178,158,278,156,"horizontal"],[178,168,278,128],[178,172,278,170,"GESTURE_RESPONSE_DISTANCE_HORIZONTAL"],[178,208,278,6],[180,0,280,6],[180,14,280,10,"screenEdgeDistance"],[180,35,280,31,"gestureResponseDistance"],[180,58,280,6],[180,60,280,56],[181,0,282,8],[181,19,282,15],[181,24,282,8],[182,0,283,7],[184,0,285,6],[184,14,285,12,"hasDraggedEnough"],[184,33,285,31,"Math"],[184,38,285,36,"abs"],[184,41,285,31],[184,42,285,40,"currentDragDistance"],[184,61,285,31],[184,65,285,63,"RESPOND_THRESHOLD"],[184,82,285,6],[185,0,287,6],[185,14,287,12,"isOnFirstCard"],[185,30,287,28,"immediateIndex"],[185,49,287,47],[185,50,287,6],[186,0,288,6],[186,14,288,12,"shouldSetResponder"],[186,35,288,33,"hasDraggedEnough"],[186,55,288,53,"axisHasBeenMeasured"],[186,74,288,33],[186,78,288,76],[186,79,288,77,"isOnFirstCard"],[186,92,288,6],[187,0,289,6],[187,17,289,13,"shouldSetResponder"],[187,35,289,6],[188,0,290,5],[188,9,225,38],[189,0,291,4,"onPanResponderMove"],[189,28,291,24],[189,56,291,25,"event"],[189,61,291,24],[189,63,291,32,"gesture"],[189,70,291,24],[189,72,291,44],[190,0,291,44],[190,29,295,10],[190,35,295,15,"props"],[190,40,291,44],[191,0,291,44],[191,51,293,8,"transitionProps"],[191,66,291,44],[192,0,291,44],[192,14,293,27,"navigation"],[192,24,291,44],[192,49,293,27,"navigation"],[192,59,291,44],[193,0,291,44],[193,14,293,39,"position"],[193,22,291,44],[193,47,293,39,"position"],[193,55,291,44],[194,0,291,44],[194,14,293,49,"layout"],[194,20,291,44],[194,45,293,49,"layout"],[194,51,291,44],[195,0,291,44],[195,14,293,57,"scene"],[195,19,291,44],[195,44,293,57,"scene"],[195,49,291,44],[196,0,291,44],[196,14,294,8,"mode"],[196,18,291,44],[196,34,294,8,"mode"],[196,38,291,44],[197,0,291,44],[197,14,296,14,"index"],[197,19,291,44],[197,22,296,24,"navigation"],[197,33,296,35,"state"],[197,38,291,44],[197,39,296,14,"index"],[197,44,291,44],[198,0,297,6],[198,14,297,12,"isVertical"],[198,27,297,25,"mode"],[198,36,297,34],[198,43,297,6],[199,0,291,44],[199,14,298,14,"options"],[199,21,291,44],[199,24,298,26,"scene"],[199,30,298,32,"descriptor"],[199,40,291,44],[199,41,298,14,"options"],[199,48,291,44],[200,0,299,6],[200,14,299,12,"gestureDirection"],[200,33,299,31,"options"],[200,41,299,39,"gestureDirection"],[200,57,299,6],[201,0,301,6],[201,14,301,12,"gestureDirectionInverted"],[201,41,301,39],[201,48,301,46,"gestureDirection"],[201,64,301,39],[201,69,301,67],[201,77,301,39],[201,80,301,78,"gestureDirection"],[201,101,301,99],[201,111,301,39],[201,114,301,112,"I18nManager"],[201,139,301,124,"isRTL"],[201,144,301,6],[202,0,304,6],[202,14,304,12,"startValue"],[202,27,304,25],[202,33,304,30,"_gestureStartValue"],[202,51,304,6],[203,0,305,6],[203,14,305,12,"axis"],[203,21,305,19,"isVertical"],[203,34,305,32],[203,38,305,19],[203,41,305,39],[203,45,305,6],[204,0,306,6],[204,14,306,12,"axisDistance"],[204,29,306,27,"isVertical"],[204,42,306,40,"layout"],[204,49,306,47,"height"],[204,55,306,40],[204,56,306,54,"__getValue"],[204,66,306,40],[204,68,306,27],[204,71,306,69,"layout"],[204,78,306,76,"width"],[204,83,306,69],[204,84,306,82,"__getValue"],[204,94,306,69],[204,96,306,6],[205,0,307,6],[205,14,307,12,"currentValue"],[205,29,307,27,"axis"],[205,38,307,36],[205,42,307,27],[205,46,307,44,"gestureDirectionInverted"],[205,70,307,27],[205,73,307,71,"startValue"],[205,86,307,84,"gesture"],[205,94,307,92,"axis"],[205,98,307,84],[205,102,307,100,"axisDistance"],[205,114,307,27],[205,117,307,115,"startValue"],[205,130,307,128,"gesture"],[205,138,307,136,"axis"],[205,142,307,128],[205,146,307,144,"axisDistance"],[205,158,307,6],[206,0,308,6],[206,14,308,12,"value"],[206,22,308,20],[206,42,308,26,"index"],[206,50,308,34],[206,51,308,20],[206,53,308,37,"currentValue"],[206,65,308,20],[206,67,308,51,"index"],[206,72,308,20],[206,73,308,6],[207,0,309,6,"position"],[207,19,309,15,"setValue"],[207,27,309,6],[207,28,309,24,"value"],[207,33,309,6],[208,0,310,5],[208,9,225,38],[209,0,311,4,"onPanResponderTerminationRequest"],[209,42,311,38],[210,0,311,38],[210,17,314,4],[210,22,311,38],[211,0,311,38],[211,9,225,38],[212,0,315,4,"onPanResponderRelease"],[212,31,315,27],[212,62,315,28,"event"],[212,67,315,27],[212,69,315,35,"gesture"],[212,76,315,27],[212,78,315,47],[213,0,315,47],[213,29,319,10],[213,35,319,15,"props"],[213,40,315,47],[214,0,315,47],[214,51,317,8,"transitionProps"],[214,66,315,47],[215,0,315,47],[215,14,317,27,"navigation"],[215,24,315,47],[215,49,317,27,"navigation"],[215,59,315,47],[216,0,315,47],[216,14,317,39,"position"],[216,22,315,47],[216,47,317,39,"position"],[216,55,315,47],[217,0,315,47],[217,14,317,49,"layout"],[217,20,315,47],[217,45,317,49,"layout"],[217,51,315,47],[218,0,315,47],[218,14,317,57,"scene"],[218,19,315,47],[218,44,317,57,"scene"],[218,49,315,47],[219,0,315,47],[219,14,318,8,"mode"],[219,18,315,47],[219,34,318,8,"mode"],[219,38,315,47],[220,0,315,47],[220,14,320,14,"index"],[220,19,315,47],[220,22,320,24,"navigation"],[220,33,320,35,"state"],[220,38,315,47],[220,39,320,14,"index"],[220,44,315,47],[221,0,321,6],[221,14,321,12,"isVertical"],[221,27,321,25,"mode"],[221,36,321,34],[221,43,321,6],[222,0,315,47],[222,14,322,14,"options"],[222,21,315,47],[222,24,322,26,"scene"],[222,30,322,32,"descriptor"],[222,40,315,47],[222,41,322,14,"options"],[222,48,315,47],[223,0,323,6],[223,14,323,12,"gestureDirection"],[223,33,323,31,"options"],[223,41,323,39,"gestureDirection"],[223,57,323,6],[224,0,325,6],[224,14,325,12,"gestureDirectionInverted"],[224,41,325,39],[224,48,325,46,"gestureDirection"],[224,64,325,39],[224,69,325,67],[224,77,325,39],[224,80,325,78,"gestureDirection"],[224,101,325,99],[224,111,325,39],[224,114,325,112,"I18nManager"],[224,139,325,124,"isRTL"],[224,144,325,6],[226,0,327,6],[226,14,327,10],[226,15,327,11],[226,21,327,16,"_isResponding"],[226,34,327,6],[226,36,327,31],[227,0,328,8],[228,0,329,7],[230,0,330,6],[230,16,330,11,"_isResponding"],[230,29,330,6],[230,32,330,27],[230,37,330,6],[231,0,332,6],[231,14,332,12,"immediateIndex"],[231,31,332,29],[231,37,332,34,"_immediateIndex"],[231,52,332,29],[231,56,332,53],[231,60,332,29],[231,63,332,60,"index"],[231,68,332,29],[231,71,332,68],[231,77,332,73,"_immediateIndex"],[231,92,332,6],[232,0,335,6],[232,14,335,12,"axisDistance"],[232,29,335,27,"isVertical"],[232,42,335,40,"layout"],[232,49,335,47,"height"],[232,55,335,40],[232,56,335,54,"__getValue"],[232,66,335,40],[232,68,335,27],[232,71,335,69,"layout"],[232,78,335,76,"width"],[232,83,335,69],[232,84,335,82,"__getValue"],[232,94,335,69],[232,96,335,6],[233,0,336,6],[233,14,336,12,"movementDirection"],[233,34,336,32,"gestureDirectionInverted"],[233,61,336,59],[233,62,336,60],[233,63,336,32],[233,66,336,64],[233,67,336,6],[234,0,337,6],[234,14,337,12,"movedDistance"],[234,30,337,28,"movementDirection"],[234,50,337,48,"gesture"],[234,58,337,56,"isVertical"],[234,71,337,69],[234,75,337,56],[234,78,337,76],[234,82,337,48],[234,83,337,6],[235,0,338,6],[235,14,338,12,"gestureVelocity"],[235,32,338,30,"movementDirection"],[235,52,338,50,"gesture"],[235,60,338,58,"isVertical"],[235,73,338,71],[235,77,338,58],[235,80,338,78],[235,84,338,50],[235,85,338,6],[236,0,339,6],[236,14,339,12,"defaultVelocity"],[236,32,339,30,"axisDistance"],[236,47,339,45,"ANIMATION_DURATION"],[236,65,339,6],[237,0,340,6],[237,14,340,12,"velocity"],[237,25,340,23,"Math"],[237,30,340,28,"max"],[237,33,340,23],[237,34,340,32,"Math"],[237,39,340,37,"abs"],[237,42,340,32],[237,43,340,41,"gestureVelocity"],[237,58,340,32],[237,59,340,23],[237,61,340,59,"defaultVelocity"],[237,76,340,23],[237,77,340,6],[238,0,341,6],[238,14,341,12,"resetDuration"],[238,30,341,28,"gestureDirectionInverted"],[238,57,341,55],[238,58,341,56,"axisDistance"],[238,73,341,71,"movedDistance"],[238,86,341,55],[238,90,341,88,"velocity"],[238,98,341,28],[238,101,341,99,"movedDistance"],[238,117,341,115,"velocity"],[238,125,341,6],[239,0,342,6],[239,14,342,12,"goBackDuration"],[239,31,342,29,"gestureDirectionInverted"],[239,58,342,56,"movedDistance"],[239,74,342,72,"velocity"],[239,82,342,29],[239,85,342,83],[239,86,342,84,"axisDistance"],[239,101,342,99,"movedDistance"],[239,114,342,83],[239,118,342,116,"velocity"],[239,126,342,6],[240,0,345,6,"position"],[240,19,345,15,"stopAnimation"],[240,32,345,6],[240,33,345,29],[240,50,345,38],[241,0,348,8],[241,16,348,12,"gestureVelocity"],[241,34,348,30],[241,35,348,31],[241,38,348,8],[241,40,348,36],[242,0,349,10],[242,20,349,15,"props"],[242,25,349,10],[242,26,349,21,"onGestureCanceled"],[242,43,349,10],[242,47,349,42],[242,53,349,47,"props"],[242,58,349,42],[242,59,349,53,"onGestureCanceled"],[242,76,349,42],[242,78,349,10],[244,0,350,10],[244,20,350,15,"_reset"],[244,26,350,10],[244,27,350,22,"immediateIndex"],[244,41,350,10],[244,43,350,38,"resetDuration"],[244,56,350,10],[246,0,351,10],[247,0,352,9],[249,0,353,8],[249,16,353,12,"gestureVelocity"],[249,34,353,30],[249,37,353,8],[249,39,353,35],[250,0,354,10],[250,20,354,15,"props"],[250,25,354,10],[250,26,354,21,"onGestureFinish"],[250,41,354,10],[250,45,354,40],[250,51,354,45,"props"],[250,56,354,40],[250,57,354,51,"onGestureFinish"],[250,72,354,40],[250,74,354,10],[252,0,355,10],[252,20,355,15,"_goBack"],[252,27,355,10],[252,28,355,23,"immediateIndex"],[252,42,355,10],[252,44,355,39,"goBackDuration"],[252,58,355,10],[254,0,356,10],[255,0,357,9],[257,0,361,8],[257,16,361,12,"value"],[257,25,361,21,"index"],[257,33,361,29,"POSITION_THRESHOLD"],[257,51,361,8],[257,53,361,49],[258,0,362,10],[258,20,362,15,"props"],[258,25,362,10],[258,26,362,21,"onGestureFinish"],[258,41,362,10],[258,45,362,40],[258,51,362,45,"props"],[258,56,362,40],[258,57,362,51,"onGestureFinish"],[258,72,362,40],[258,74,362,10],[260,0,363,10],[260,20,363,15,"_goBack"],[260,27,363,10],[260,28,363,23,"immediateIndex"],[260,42,363,10],[260,44,363,39,"goBackDuration"],[260,58,363,10],[261,0,364,9],[261,13,361,8],[261,19,364,15],[262,0,365,10],[262,20,365,15,"props"],[262,25,365,10],[262,26,365,21,"onGestureCanceled"],[262,43,365,10],[262,47,365,42],[262,53,365,47,"props"],[262,58,365,42],[262,59,365,53,"onGestureCanceled"],[262,76,365,42],[262,78,365,10],[264,0,366,10],[264,20,366,15,"_reset"],[264,26,366,10],[264,27,366,22,"immediateIndex"],[264,41,366,10],[264,43,366,38,"resetDuration"],[264,56,366,10],[265,0,367,9],[266,0,368,7],[266,11,345,6],[267,0,369,5],[268,0,225,38],[268,7,225,18],[268,8,96,21],[270,0,96,21],[270,12,372,2,"_onFloatingHeaderLayout"],[270,35,96,21],[270,38,372,28],[270,51,372,33],[271,0,373,4],[271,14,373,9,"setState"],[271,22,373,4],[271,23,373,18],[272,0,373,20,"floatingHeaderHeight"],[272,32,373,42,"e"],[272,34,373,44,"nativeEvent"],[272,45,373,42],[272,46,373,56,"layout"],[272,52,373,42],[272,53,373,63,"height"],[273,0,373,18],[273,9,373,4],[274,0,374,3],[274,7,96,21],[276,0,96,21],[276,12,484,2,"_getTransitionConfig"],[276,32,96,21],[276,35,484,25],[276,47,484,31],[277,0,485,4],[277,12,485,10,"isModal"],[277,22,485,20],[277,28,485,25,"props"],[277,33,485,20],[277,34,485,31,"mode"],[277,38,485,20],[277,43,485,40],[277,50,485,4],[278,0,487,4],[278,15,487,11,"TransitionConfigs"],[278,51,487,29,"getTransitionConfig"],[278,70,487,11],[278,71,487,49],[278,77,487,54,"props"],[278,82,487,49],[278,83,487,60,"transitionConfig"],[278,99,487,11],[278,101,487,78],[278,107,487,83,"props"],[278,112,487,78],[278,113,487,89,"transitionProps"],[278,128,487,11],[278,130,487,106],[278,136,487,111,"props"],[278,141,487,106],[278,142,487,117,"lastTransitionProps"],[278,161,487,11],[278,163,487,138,"isModal"],[278,170,487,11],[278,171,487,4],[279,0,488,3],[279,7,96,21],[281,0,96,21],[281,12,490,2,"_renderCard"],[281,23,96,21],[281,26,490,16],[281,43,490,25],[282,0,490,25],[282,36,491,35],[282,42,491,40,"_getTransitionConfig"],[282,62,491,35],[282,64,490,25],[283,0,490,25],[283,12,491,12,"screenInterpolator"],[283,30,490,25],[283,55,491,12,"screenInterpolator"],[283,73,490,25],[285,0,493,4],[285,12,493,10,"style"],[285,20,493,18,"screenInterpolator"],[285,42,493,40,"screenInterpolator"],[285,79,493,64],[285,85,493,69,"props"],[285,90,493,64],[285,91,493,75,"transitionProps"],[285,106,493,40],[286,0,493,92,"scene"],[287,0,493,40],[287,11,493,4],[288,0,490,25],[288,12,498,12,"options"],[288,19,490,25],[288,22,498,24,"scene"],[288,28,498,30,"descriptor"],[288,38,490,25],[288,39,498,12,"options"],[288,46,490,25],[289,0,499,4],[289,12,499,10,"hasHeader"],[289,24,499,22,"options"],[289,32,499,30,"header"],[289,38,499,22],[289,43,499,41],[289,47,499,4],[291,0,500,4],[291,12,500,10,"headerMode"],[291,25,500,23],[291,31,500,28,"_getHeaderMode"],[291,45,500,23],[291,47,500,4],[293,0,501,4],[293,12,501,8,"marginTop"],[293,24,501,20],[293,25,501,4],[295,0,502,4],[295,12,502,8],[295,13,502,9,"hasHeader"],[295,22,502,8],[295,26,502,22,"headerMode"],[295,41,502,37],[295,48,502,4],[295,50,502,46],[296,0,503,6,"marginTop"],[296,22,503,18],[296,23,503,19],[296,29,503,24,"state"],[296,34,503,19],[296,35,503,30,"floatingHeaderHeight"],[296,55,503,6],[297,0,504,5],[299,0,506,4],[299,15,506,11],[299,44,506,12],[299,66,506,11],[299,81,506,21],[299,87,506,26,"props"],[299,92,506,21],[299,93,506,32,"transitionProps"],[299,108,506,11],[300,0,506,49],[300,25,506,62,"scene"],[300,31,506,68,"key"],[300,34,506,11],[301,0,506,75],[301,17,506,82],[301,18,506,83,"style"],[301,23,506,82],[301,25,506,90],[302,0,506,92,"marginTop"],[303,0,506,90],[303,11,506,82],[303,13,506,105],[303,19,506,110,"props"],[303,24,506,105],[303,25,506,116,"cardStyle"],[303,34,506,82],[303,35,506,11],[304,0,506,128],[304,17,506,135,"scene"],[304,22,506,11],[305,0,506,11],[306,0,506,11],[307,0,506,11],[308,0,506,11],[309,0,506,11],[309,12,507,9],[309,18,507,14,"_renderInnerScene"],[309,35,507,9],[309,36,507,32,"scene"],[309,41,507,9],[309,42,506,11],[309,43,506,4],[310,0,509,3],[310,7,96,21],[312,0,99,4],[312,12,99,9,"state"],[312,17,99,4],[312,20,99,17],[313,0,105,6,"floatingHeaderHeight"],[313,30,105,28,"getDefaultHeaderHeight"],[313,53,105,51,"props"],[313,59,105,57,"isLandscape"],[313,70,105,28],[314,0,99,17],[314,7,99,4],[315,0,96,21],[316,0,107,3],[320,36,109,16,"scene"],[320,41],[320,43,109,23,"headerMode"],[320,53],[320,55,109,35],[321,0,109,35],[321,12,110,12,"options"],[321,19,109,35],[321,22,110,24,"scene"],[321,28,110,30,"descriptor"],[321,38,109,35],[321,39,110,12,"options"],[321,46,109,35],[322,0,109,35],[322,12,111,12,"header"],[322,18,109,35],[322,21,111,23,"options"],[322,28,109,35],[322,29,111,12,"header"],[322,35,109,35],[324,0,113,4],[324,12,113,8,"__DEV__"],[324,23,113,19],[324,30,113,26,"header"],[324,36,113,19],[324,41,113,37],[324,49,113,4],[324,51,113,47],[325,0,114,6],[325,16,114,12],[325,20,114,16,"Error"],[325,25,114,12],[325,55,114,48,"header"],[325,61,114,12],[325,143,114,6],[326,0,115,5],[328,0,117,4],[328,12,117,8,"header"],[328,23,117,19],[328,27,117,8],[328,31,117,27,"headerMode"],[328,46,117,42],[328,54,117,4],[328,56,117,52],[329,0,118,6],[329,17,118,13],[329,21,118,6],[330,0,119,5],[332,0,122,4],[332,12,122,8,"React"],[332,27,122,14,"isValidElement"],[332,41,122,8],[332,42,122,29,"header"],[332,48,122,8],[332,49,122,4],[332,51,122,38],[333,0,123,6],[333,17,123,13,"header"],[333,23,123,6],[334,0,124,5],[336,0,127,4],[336,12,127,10,"renderHeader"],[336,27,127,25,"header"],[336,37,127,36],[337,0,127,36],[337,17,127,45],[337,46,127,46],[337,61,127,45],[337,76,127,57,"props"],[337,81,127,45],[338,0,127,45],[339,0,127,45],[340,0,127,45],[341,0,127,45],[342,0,127,45],[342,13,127,36],[343,0,127,36],[343,9,127,4],[345,0,109,35],[345,37,134,8],[345,42,134,13,"_getTransitionConfig"],[345,62,134,8],[345,64,109,35],[346,0,109,35],[346,12,130,6,"headerLeftInterpolator"],[346,34,109,35],[346,60,130,6,"headerLeftInterpolator"],[346,82,109,35],[347,0,109,35],[347,12,131,6,"headerTitleInterpolator"],[347,35,109,35],[347,61,131,6,"headerTitleInterpolator"],[347,84,109,35],[348,0,109,35],[348,12,132,6,"headerRightInterpolator"],[348,35,109,35],[348,61,132,6,"headerRightInterpolator"],[348,84,109,35],[349,0,109,35],[349,12,133,6,"headerBackgroundInterpolator"],[349,40,109,35],[349,66,133,6,"headerBackgroundInterpolator"],[349,94,109,35],[351,0,109,35],[351,27,136,46],[351,32,136,51,"props"],[351,37,109,35],[352,0,109,35],[352,12,136,12,"transitionProps"],[352,27,109,35],[352,43,136,12,"transitionProps"],[352,58,109,35],[353,0,109,35],[353,12,136,32,"passProps"],[353,21,109,35],[355,0,138,4],[355,15,138,11],[355,44,138,12],[355,79,138,11],[356,0,138,31],[356,17,138,38,"scene"],[356,23,138,44,"descriptor"],[356,33,138,38],[356,34,138,55,"navigation"],[356,44,138,11],[357,0,138,11],[358,0,138,11],[359,0,138,11],[360,0,138,11],[361,0,138,11],[361,11,139,9,"renderHeader"],[361,42,140,11,"passProps"],[361,51,139,9],[361,53,141,11,"transitionProps"],[361,68,139,9],[362,0,142,8,"scene"],[362,22,139,9],[363,0,143,8,"mode"],[363,16,143,14,"headerMode"],[363,26,139,9],[364,0,144,8,"transitionPreset"],[364,28,144,26],[364,33,144,31,"_getHeaderTransitionPreset"],[364,59,144,26],[364,61,139,9],[365,0,145,8,"layoutPreset"],[365,24,145,22],[365,29,145,27,"_getHeaderLayoutPreset"],[365,51,145,22],[365,53,139,9],[366,0,146,8,"backTitleVisible"],[366,28,146,26],[366,33,146,31,"_getheaderBackTitleVisible"],[366,59,146,26],[366,61,139,9],[367,0,147,8,"leftInterpolator"],[367,28,147,26,"headerLeftInterpolator"],[367,50,139,9],[368,0,148,8,"titleInterpolator"],[368,29,148,27,"headerTitleInterpolator"],[368,52,139,9],[369,0,149,8,"rightInterpolator"],[369,29,149,27,"headerRightInterpolator"],[369,52,139,9],[370,0,150,8,"backgroundInterpolator"],[370,34,150,32,"headerBackgroundInterpolator"],[371,0,139,9],[371,11,138,11],[371,12,138,4],[372,0,153,3],[375,41,155,21,"props"],[375,46],[375,48,155,28],[376,0,163,4,"animatedSubscribeValue"],[376,31,163,27,"props"],[376,37,163,33,"transitionProps"],[376,52,163,27],[376,53,163,49,"layout"],[376,59,163,27],[376,60,163,56,"width"],[376,65,163,4],[377,0,164,4,"animatedSubscribeValue"],[377,31,164,27,"props"],[377,37,164,33,"transitionProps"],[377,52,164,27],[377,53,164,49,"layout"],[377,59,164,27],[377,60,164,56,"height"],[377,66,164,4],[378,0,165,4,"animatedSubscribeValue"],[378,31,165,27,"props"],[378,37,165,33,"transitionProps"],[378,52,165,27],[378,53,165,49,"position"],[378,61,165,4],[379,0,166,3],[382,29,168,9,"resetToIndex"],[382,41],[382,43,168,23,"duration"],[382,51],[382,53,168,33],[383,0,169,4],[383,12,169,8,"Platform"],[383,34,169,17,"OS"],[383,36,169,8],[383,41,169,24],[383,46,169,8],[383,50,169,33],[383,109,169,4],[383,111,169,68],[384,0,170,6,"Animated"],[384,32,170,15,"spring"],[384,38,170,6],[384,39,170,22],[384,44,170,27,"props"],[384,49,170,22],[384,50,170,33,"transitionProps"],[384,65,170,22],[384,66,170,49,"position"],[384,74,170,6],[384,76,170,59],[385,0,171,8,"toValue"],[385,21,171,17,"resetToIndex"],[385,33,170,59],[386,0,172,8,"stiffness"],[386,23,172,19],[386,27,170,59],[387,0,173,8,"damping"],[387,21,173,17],[387,24,170,59],[388,0,174,8,"mass"],[388,18,174,14],[388,19,170,59],[389,0,175,8,"useNativeDriver"],[389,29,175,25],[389,34,175,30,"props"],[389,39,175,25],[389,40,175,36,"transitionProps"],[389,55,175,25],[389,56,175,52,"position"],[389,64,175,25],[389,65,175,61,"__isNative"],[390,0,170,59],[390,11,170,6],[390,13,176,9,"start"],[390,18,170,6],[391,0,177,5],[391,9,169,4],[391,15,177,11],[392,0,178,6,"Animated"],[392,32,178,15,"timing"],[392,38,178,6],[392,39,178,22],[392,44,178,27,"props"],[392,49,178,22],[392,50,178,33,"transitionProps"],[392,65,178,22],[392,66,178,49,"position"],[392,74,178,6],[392,76,178,59],[393,0,179,8,"toValue"],[393,21,179,17,"resetToIndex"],[393,33,178,59],[394,0,180,8,"duration"],[394,30,178,59],[395,0,181,8,"easing"],[395,20,181,16,"EaseInOut"],[395,29,178,59],[396,0,182,8,"useNativeDriver"],[396,29,182,25],[396,34,182,30,"props"],[396,39,182,25],[396,40,182,36,"transitionProps"],[396,55,182,25],[396,56,182,52,"position"],[396,64,182,25],[396,65,182,61,"__isNative"],[397,0,178,59],[397,11,178,6],[397,13,183,9,"start"],[397,18,178,6],[398,0,184,5],[399,0,185,3],[402,30,187,10,"backFromIndex"],[402,43],[402,45,187,25,"duration"],[402,53],[402,55,187,35],[403,0,187,35],[405,0,187,35],[405,37,188,45],[405,42,188,50,"props"],[405,47,188,45],[405,48,188,56,"transitionProps"],[405,63,187,35],[406,0,187,35],[406,12,188,12,"navigation"],[406,22,187,35],[406,48,188,12,"navigation"],[406,58,187,35],[407,0,187,35],[407,12,188,24,"position"],[407,20,187,35],[407,46,188,24,"position"],[407,54,187,35],[408,0,187,35],[408,12,188,34,"scenes"],[408,18,187,35],[408,44,188,34,"scenes"],[408,50,187,35],[409,0,189,4],[409,12,189,10,"toValue"],[409,22,189,20,"Math"],[409,27,189,25,"max"],[409,30,189,20],[409,31,189,29,"backFromIndex"],[409,47,189,45],[409,48,189,20],[409,50,189,48],[409,51,189,20],[409,52,189,4],[410,0,193,4],[410,13,193,9,"_immediateIndex"],[410,28,193,4],[410,31,193,27,"toValue"],[410,38,193,4],[412,0,195,4],[412,12,195,10,"onCompleteAnimation"],[412,34,195,32],[412,43,195,10,"onCompleteAnimation"],[412,62,195,32],[412,65,195,38],[413,0,196,6],[413,17,196,11,"_immediateIndex"],[413,32,196,6],[413,35,196,29],[413,39,196,6],[414,0,197,6],[414,14,197,12,"backFromScene"],[414,30,197,28,"scenes"],[414,37,197,35,"find"],[414,41,197,28],[414,42,197,40],[415,0,197,40],[415,19,197,45,"s"],[415,21,197,47,"index"],[415,26,197,45],[415,31,197,57,"toValue"],[415,41,197,67],[415,42,197,40],[416,0,197,40],[416,11,197,28],[416,12,197,6],[418,0,198,6],[418,14,198,10],[418,15,198,11],[418,22,198,16,"_isResponding"],[418,35,198,10],[418,39,198,33,"backFromScene"],[418,52,198,6],[418,54,198,48],[419,0,199,8,"navigation"],[419,23,199,19,"dispatch"],[419,31,199,8],[419,32,199,28,"NavigationActions"],[419,67,199,46,"back"],[419,71,199,28],[419,72,199,51],[420,0,200,10,"key"],[420,19,200,15,"backFromScene"],[420,33,200,29,"route"],[420,38,200,15],[420,39,200,35,"key"],[420,42,199,51],[421,0,201,10,"immediate"],[421,25,201,21],[422,0,199,51],[422,13,199,28],[422,14,199,8],[423,0,203,8,"navigation"],[423,23,203,19,"dispatch"],[423,31,203,8],[423,32,203,28,"StackActions"],[423,62,203,41,"completeTransition"],[423,80,203,28],[423,82,203,8],[424,0,204,7],[425,0,205,5],[425,9,195,4],[427,0,207,4],[427,12,207,8,"Platform"],[427,34,207,17,"OS"],[427,36,207,8],[427,41,207,24],[427,46,207,8],[427,50,207,33],[427,109,207,4],[427,111,207,68],[428,0,208,6,"Animated"],[428,32,208,15,"spring"],[428,38,208,6],[428,39,208,22,"position"],[428,47,208,6],[428,49,208,32],[429,0,209,8,"toValue"],[429,28,208,32],[430,0,210,8,"stiffness"],[430,23,210,19],[430,27,208,32],[431,0,211,8,"damping"],[431,21,211,17],[431,24,208,32],[432,0,212,8,"mass"],[432,18,212,14],[432,19,208,32],[433,0,213,8,"useNativeDriver"],[433,29,213,25,"position"],[433,38,213,34,"__isNative"],[434,0,208,32],[434,11,208,6],[434,13,214,9,"start"],[434,18,208,6],[434,19,214,15,"onCompleteAnimation"],[434,38,208,6],[435,0,215,5],[435,9,207,4],[435,15,215,11],[436,0,216,6,"Animated"],[436,32,216,15,"timing"],[436,38,216,6],[436,39,216,22,"position"],[436,47,216,6],[436,49,216,32],[437,0,217,8,"toValue"],[437,28,216,32],[438,0,218,8,"duration"],[438,30,216,32],[439,0,219,8,"easing"],[439,20,219,16,"EaseInOut"],[439,29,216,32],[440,0,220,8,"useNativeDriver"],[440,29,220,25,"position"],[440,38,220,34,"__isNative"],[441,0,216,32],[441,11,216,6],[441,13,221,9,"start"],[441,18,216,6],[441,19,221,15,"onCompleteAnimation"],[441,38,216,6],[442,0,222,5],[443,0,223,3],[446,31,376,11],[447,0,376,11],[449,0,377,4],[449,12,377,8,"floatingHeader"],[449,29,377,25],[449,33,377,4],[451,0,378,4],[451,12,378,10,"headerMode"],[451,25,378,23],[451,30,378,28,"_getHeaderMode"],[451,44,378,23],[451,46,378,4],[453,0,380,4],[453,12,380,8,"headerMode"],[453,27,380,23],[453,34,380,4],[453,36,380,32],[454,0,380,32],[454,14,381,14,"scene"],[454,20,380,32],[454,23,381,24],[454,28,381,29,"props"],[454,33,381,24],[454,34,381,35,"transitionProps"],[454,49,380,32],[454,50,381,14,"scene"],[454,55,380,32],[455,0,382,6,"floatingHeader"],[455,27,382,23],[455,56,382,24],[455,73,382,23],[456,0,382,29],[456,27,382,43],[456,37,382,23],[457,0,382,54],[457,22,382,64],[457,27,382,69,"_onFloatingHeaderLayout"],[457,50,382,23],[458,0,382,23],[459,0,382,23],[460,0,382,23],[461,0,382,23],[462,0,382,23],[462,13,383,11],[462,18,383,16,"_renderHeader"],[462,31,383,11],[462,32,383,30,"scene"],[462,38,383,11],[462,40,383,37,"headerMode"],[462,50,383,11],[462,51,382,23],[462,52,382,6],[463,0,385,5],[465,0,376,11],[465,37,388,8],[465,42,388,13,"props"],[465,47,376,11],[465,48,387,6,"transitionProps"],[465,63,376,11],[466,0,376,11],[466,12,387,25,"scene"],[466,17,376,11],[466,43,387,25,"scene"],[466,48,376,11],[467,0,376,11],[467,12,387,32,"scenes"],[467,18,376,11],[467,44,387,32,"scenes"],[467,50,376,11],[468,0,376,11],[468,12,389,12,"options"],[468,19,376,11],[468,22,389,24,"scene"],[468,28,389,30,"descriptor"],[468,38,376,11],[468,39,389,12,"options"],[468,46,376,11],[469,0,391,4],[469,12,391,10,"gesturesEnabled"],[469,30,391,28],[469,37,391,35,"options"],[469,45,391,43,"gesturesEnabled"],[469,60,391,28],[469,65,391,63],[469,74,391,28],[469,77,391,75,"options"],[469,85,391,83,"gesturesEnabled"],[469,100,391,28],[469,103,391,101,"Platform"],[469,125,391,110,"OS"],[469,127,391,101],[469,132,391,117],[469,137,391,4],[470,0,393,4],[470,12,393,10,"responder"],[470,24,393,22],[470,25,393,23,"gesturesEnabled"],[470,40,393,22],[470,43,393,41],[470,47,393,22],[470,50,393,48],[470,55,393,53,"_panResponder"],[470,68,393,4],[471,0,395,4],[471,12,395,10,"handlers"],[471,23,395,21,"gesturesEnabled"],[471,41,395,39,"responder"],[471,51,395,49,"panHandlers"],[471,62,395,21],[471,65,395,63],[471,67,395,4],[472,0,396,4],[472,12,396,10,"containerStyle"],[472,29,396,27],[472,30,396,28,"styles"],[472,37,396,35,"container"],[472,46,396,27],[472,48,396,46],[472,53,396,51,"_getTransitionConfig"],[472,73,396,46],[472,76,396,74,"containerStyle"],[472,90,396,27],[472,91,396,4],[473,0,398,4],[473,15,398,11],[473,44,398,12],[473,61,398,11],[473,76,398,21,"handlers"],[473,84,398,11],[474,0,398,31],[474,17,398,38,"containerStyle"],[474,31,398,11],[475,0,398,11],[476,0,398,11],[477,0,398,11],[478,0,398,11],[479,0,398,11],[479,12,399,8],[479,41,399,9],[479,65,399,8],[480,0,399,25],[480,17,399,32,"styles"],[480,24,399,39,"scenes"],[480,30,399,8],[481,0,399,8],[482,0,399,8],[483,0,399,8],[484,0,399,8],[485,0,399,8],[485,11,400,11,"scenes"],[485,18,400,18,"map"],[485,21,400,11],[485,22,400,22],[486,0,400,22],[486,17,400,27],[486,24,400,32,"_renderCard"],[486,35,400,27],[486,36,400,44,"s"],[486,37,400,27],[486,38,400,22],[487,0,400,22],[487,9,400,11],[487,10,399,8],[487,11,398,11],[487,13,402,9,"floatingHeader"],[487,27,398,11],[487,28,398,4],[488,0,404,3],[491,39,406,19],[492,0,407,4],[492,12,407,8],[492,17,407,13,"props"],[492,22,407,8],[492,23,407,19,"headerMode"],[492,33,407,4],[492,35,407,31],[493,0,408,6],[493,17,408,13],[493,22,408,18,"props"],[493,27,408,13],[493,28,408,24,"headerMode"],[493,38,408,6],[494,0,409,5],[496,0,410,4],[496,12,410,8,"Platform"],[496,34,410,17,"OS"],[496,36,410,8],[496,41,410,24],[496,50,410,8],[496,54,410,37],[496,59,410,42,"props"],[496,64,410,37],[496,65,410,48,"mode"],[496,69,410,37],[496,74,410,57],[496,81,410,4],[496,83,410,66],[497,0,411,6],[497,17,411,13],[497,25,411,6],[498,0,412,5],[500,0,413,4],[500,15,413,11],[500,22,413,4],[501,0,414,3],[504,47,416,27],[505,0,416,27],[505,12,417,12,"headerLayoutPreset"],[505,30,416,27],[505,33,417,35],[505,38,417,40,"props"],[505,43,416,27],[505,44,417,12,"headerLayoutPreset"],[505,62,416,27],[507,0,418,4],[507,12,418,8,"headerLayoutPreset"],[507,30,418,4],[507,32,418,28],[508,0,419,6],[508,14,419,10,"__DEV__"],[508,21,419,6],[508,23,419,19],[509,0,420,8],[509,16,420,12],[509,21,420,17,"_getHeaderTransitionPreset"],[509,47,420,12],[509,54,420,50],[509,61,420,12],[509,65,420,61,"headerLayoutPreset"],[509,88,420,84],[509,94,420,12],[509,98,420,94,"Platform"],[509,120,420,103,"OS"],[509,122,420,94],[509,127,420,110],[509,132,420,8],[509,134,420,117],[510,0,421,10,"console"],[510,22,421,18,"warn"],[510,26,421,10],[511,0,422,9],[512,0,423,7],[514,0,424,6],[514,14,424,10,"HEADER_LAYOUT_PRESET_VALUES"],[514,42,424,38,"includes"],[514,50,424,10],[514,51,424,47,"headerLayoutPreset"],[514,69,424,10],[514,70,424,6],[514,72,424,68],[515,0,425,8],[515,19,425,15,"headerLayoutPreset"],[515,37,425,8],[516,0,426,7],[518,0,428,6],[518,14,428,10,"__DEV__"],[518,21,428,6],[518,23,428,19],[519,0,429,8,"console"],[519,20,429,16,"error"],[519,25,429,8],[519,102,429,96,"HEADER_LAYOUT_PRESET_VALUES"],[519,130,429,124,"join"],[519,134,429,96],[519,135,429,129],[519,139,429,96],[519,140,429,8],[519,162,429,151,"JSON"],[519,167,429,156,"stringify"],[519,176,429,151],[519,177,429,166,"headerLayoutPreset"],[519,195,429,151],[519,196,429,8],[520,0,430,7],[521,0,431,5],[523,0,433,4],[523,12,433,8,"Platform"],[523,34,433,17,"OS"],[523,36,433,8],[523,41,433,24],[523,50,433,4],[523,52,433,35],[524,0,434,6],[524,17,434,13],[524,23,434,6],[525,0,435,5],[525,9,433,4],[525,15,435,11],[526,0,436,6],[526,17,436,13],[526,25,436,6],[527,0,437,5],[528,0,438,3],[531,51,440,31],[532,0,443,4],[532,12,443,8,"Platform"],[532,34,443,17,"OS"],[532,36,443,8],[532,41,443,24],[532,50,443,8],[532,54,443,37],[532,59,443,42,"_getHeaderMode"],[532,73,443,37],[532,80,443,63],[532,88,443,4],[532,90,443,73],[533,0,444,6],[533,17,444,13],[533,32,444,6],[534,0,445,5],[536,0,440,31],[536,12,447,12,"headerTransitionPreset"],[536,34,440,31],[536,37,447,39],[536,42,447,44,"props"],[536,47,440,31],[536,48,447,12,"headerTransitionPreset"],[536,70,440,31],[538,0,448,4],[538,12,448,8,"headerTransitionPreset"],[538,34,448,4],[538,36,448,32],[539,0,449,6],[539,14,449,10,"HEADER_TRANSITION_PRESET_VALUES"],[539,46,449,42,"includes"],[539,54,449,10],[539,55,449,51,"headerTransitionPreset"],[539,77,449,10],[539,78,449,6],[539,80,449,76],[540,0,450,8],[540,19,450,15,"headerTransitionPreset"],[540,41,450,8],[541,0,451,7],[543,0,453,6],[543,14,453,10,"__DEV__"],[543,21,453,6],[543,23,453,19],[544,0,454,8,"console"],[544,20,454,16,"error"],[544,25,454,8],[544,106,454,100,"HEADER_TRANSITION_PRESET_VALUES"],[544,138,454,132,"join"],[544,142,454,100],[544,143,454,137],[544,147,454,100],[544,148,454,8],[544,170,454,159,"JSON"],[544,175,454,164,"stringify"],[544,184,454,159],[544,185,454,174,"headerTransitionPreset"],[544,207,454,159],[544,208,454,8],[545,0,455,7],[546,0,456,5],[548,0,458,4],[548,15,458,11],[548,30,458,4],[549,0,459,3],[552,51,461,31],[553,0,461,31],[553,12,462,12,"headerBackTitleVisible"],[553,34,461,31],[553,37,462,39],[553,42,462,44,"props"],[553,47,461,31],[553,48,462,12,"headerBackTitleVisible"],[553,70,461,31],[554,0,464,4],[554,15,464,11,"headerBackTitleVisible"],[554,37,464,4],[555,0,465,3],[558,40,467,20,"scene"],[558,45],[558,47,467,27],[559,0,467,27],[559,32,468,41,"scene"],[559,38,468,47,"descriptor"],[559,48,467,27],[560,0,467,27],[560,12,468,12,"navigation"],[560,22,467,27],[560,43,468,12,"navigation"],[560,53,467,27],[561,0,467,27],[561,12,468,24,"getComponent"],[561,24,467,27],[561,45,468,24,"getComponent"],[561,57,467,27],[562,0,469,4],[562,12,469,10,"SceneComponent"],[562,29,469,27,"getComponent"],[562,43,469,4],[563,0,467,27],[563,12,471,12,"screenProps"],[563,23,467,27],[563,26,471,28],[563,31,471,33,"props"],[563,36,467,27],[563,37,471,12,"screenProps"],[563,48,467,27],[565,0,472,4],[565,12,472,10,"headerMode"],[565,25,472,23],[565,30,472,28,"_getHeaderMode"],[565,44,472,23],[565,46,472,4],[567,0,473,4],[567,12,473,8,"headerMode"],[567,27,473,23],[567,35,473,4],[567,37,473,33],[568,0,474,6],[568,17,474,13],[568,46,474,14],[568,63,474,13],[569,0,474,19],[569,19,474,26,"styles"],[569,26,474,33,"container"],[569,35,474,13],[570,0,474,13],[571,0,474,13],[572,0,474,13],[573,0,474,13],[574,0,474,13],[574,13,475,10],[574,42,475,11],[574,59,475,10],[575,0,475,16],[575,19,475,23,"styles"],[575,26,475,30,"scenes"],[575,32,475,10],[576,0,475,10],[577,0,475,10],[578,0,475,10],[579,0,475,10],[580,0,475,10],[580,13,476,12],[580,42,476,13],[580,68,476,12],[581,0,476,23],[581,25,476,36,"screenProps"],[581,36,476,12],[582,0,476,49],[582,24,476,61,"navigation"],[582,34,476,12],[583,0,476,73],[583,23,476,84,"SceneComponent"],[583,37,476,12],[584,0,476,12],[585,0,476,12],[586,0,476,12],[587,0,476,12],[588,0,476,12],[588,12,475,10],[588,13,474,13],[588,15,478,11],[588,20,478,16,"_renderHeader"],[588,33,478,11],[588,34,478,30,"scene"],[588,39,478,11],[588,41,478,37,"headerMode"],[588,51,478,11],[588,52,474,13],[588,53,474,6],[589,0,480,5],[591,0,481,4],[591,15,481,11],[591,44,481,12],[591,70,481,11],[592,0,481,22],[592,23,481,35,"screenProps"],[592,34,481,11],[593,0,481,48],[593,22,481,60,"navigation"],[593,32,481,11],[594,0,481,72],[594,21,481,83,"SceneComponent"],[594,35,481,11],[595,0,481,11],[596,0,481,11],[597,0,481,11],[598,0,481,11],[599,0,481,11],[599,10,481,4],[600,0,482,3],[606,4,75,30,"React"],[606,19,75,36,"Component"],[606,28],[610,0,512,0],[610,6,512,6,"styles"],[610,15,512,15,"StyleSheet"],[610,39,512,26,"create"],[610,45,512,15],[610,46,512,33],[611,0,513,2,"container"],[611,15,513,13],[612,0,514,4,"flex"],[612,12,514,10],[612,13,513,13],[613,0,519,4,"flexDirection"],[613,21,519,19],[614,0,513,13],[614,5,512,33],[615,0,521,2,"scenes"],[615,12,521,10],[616,0,522,4,"flex"],[616,12,522,10],[617,0,521,10],[618,0,512,33],[618,3,512,15],[618,4,512,0],[620,18,526,15],[620,56,526,31,"StackViewLayout"],[620,71,526,15],[620,72]]},"type":"js/module"}]}