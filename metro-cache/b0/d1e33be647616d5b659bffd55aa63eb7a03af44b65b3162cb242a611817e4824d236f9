{"dependencies":[{"name":"fbjs/lib/invariant","isAsync":false},{"name":"isEmpty","isAsync":false},{"name":"fbjs/lib/warning","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  'use strict';\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if ((typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  var invariant = _$$_REQUIRE(_dependencyMap[0], 'fbjs/lib/invariant');\n\n  var isEmpty = _$$_REQUIRE(_dependencyMap[1], 'isEmpty');\n\n  var warning = _$$_REQUIRE(_dependencyMap[2], 'fbjs/lib/warning');\n\n  function defaultGetRowData(dataBlob, sectionID, rowID) {\n    return dataBlob[sectionID][rowID];\n  }\n\n  function defaultGetSectionHeaderData(dataBlob, sectionID) {\n    return dataBlob[sectionID];\n  }\n\n  var ListViewDataSource = function () {\n    function ListViewDataSource(params) {\n      _classCallCheck(this, ListViewDataSource);\n\n      invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n      this._rowHasChanged = params.rowHasChanged;\n      this._getRowData = params.getRowData || defaultGetRowData;\n      this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n      this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n      this._dataBlob = null;\n      this._dirtyRows = [];\n      this._dirtySections = [];\n      this._cachedRowCount = 0;\n      this.rowIdentities = [];\n      this.sectionIdentities = [];\n    }\n\n    _createClass(ListViewDataSource, [{\n      key: \"cloneWithRows\",\n      value: function cloneWithRows(dataBlob, rowIdentities) {\n        var rowIds = rowIdentities ? [_toConsumableArray(rowIdentities)] : null;\n\n        if (!this._sectionHeaderHasChanged) {\n          this._sectionHeaderHasChanged = function () {\n            return false;\n          };\n        }\n\n        return this.cloneWithRowsAndSections({\n          s1: dataBlob\n        }, ['s1'], rowIds);\n      }\n    }, {\n      key: \"cloneWithRowsAndSections\",\n      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n        invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n        invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n        var newSource = new ListViewDataSource({\n          getRowData: this._getRowData,\n          getSectionHeaderData: this._getSectionHeaderData,\n          rowHasChanged: this._rowHasChanged,\n          sectionHeaderHasChanged: this._sectionHeaderHasChanged\n        });\n        newSource._dataBlob = dataBlob;\n\n        if (sectionIdentities) {\n          newSource.sectionIdentities = sectionIdentities;\n        } else {\n          newSource.sectionIdentities = Object.keys(dataBlob);\n        }\n\n        if (rowIdentities) {\n          newSource.rowIdentities = rowIdentities;\n        } else {\n          newSource.rowIdentities = [];\n          newSource.sectionIdentities.forEach(function (sectionID) {\n            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n          });\n        }\n\n        newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n        newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n        return newSource;\n      }\n    }, {\n      key: \"getRowCount\",\n      value: function getRowCount() {\n        return this._cachedRowCount;\n      }\n    }, {\n      key: \"getRowAndSectionCount\",\n      value: function getRowAndSectionCount() {\n        return this._cachedRowCount + this.sectionIdentities.length;\n      }\n    }, {\n      key: \"rowShouldUpdate\",\n      value: function rowShouldUpdate(sectionIndex, rowIndex) {\n        var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n        warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n        return needsUpdate;\n      }\n    }, {\n      key: \"getRowData\",\n      value: function getRowData(sectionIndex, rowIndex) {\n        var sectionID = this.sectionIdentities[sectionIndex];\n        var rowID = this.rowIdentities[sectionIndex][rowIndex];\n        warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n        return this._getRowData(this._dataBlob, sectionID, rowID);\n      }\n    }, {\n      key: \"getRowIDForFlatIndex\",\n      value: function getRowIDForFlatIndex(index) {\n        var accessIndex = index;\n\n        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n          if (accessIndex >= this.rowIdentities[ii].length) {\n            accessIndex -= this.rowIdentities[ii].length;\n          } else {\n            return this.rowIdentities[ii][accessIndex];\n          }\n        }\n\n        return null;\n      }\n    }, {\n      key: \"getSectionIDForFlatIndex\",\n      value: function getSectionIDForFlatIndex(index) {\n        var accessIndex = index;\n\n        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n          if (accessIndex >= this.rowIdentities[ii].length) {\n            accessIndex -= this.rowIdentities[ii].length;\n          } else {\n            return this.sectionIdentities[ii];\n          }\n        }\n\n        return null;\n      }\n    }, {\n      key: \"getSectionLengths\",\n      value: function getSectionLengths() {\n        var results = [];\n\n        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n          results.push(this.rowIdentities[ii].length);\n        }\n\n        return results;\n      }\n    }, {\n      key: \"sectionHeaderShouldUpdate\",\n      value: function sectionHeaderShouldUpdate(sectionIndex) {\n        var needsUpdate = this._dirtySections[sectionIndex];\n        warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n        return needsUpdate;\n      }\n    }, {\n      key: \"getSectionHeaderData\",\n      value: function getSectionHeaderData(sectionIndex) {\n        if (!this._getSectionHeaderData) {\n          return null;\n        }\n\n        var sectionID = this.sectionIdentities[sectionIndex];\n        warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n        return this._getSectionHeaderData(this._dataBlob, sectionID);\n      }\n    }, {\n      key: \"_calculateDirtyArrays\",\n      value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n        var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n        var prevRowsHash = {};\n\n        for (var ii = 0; ii < prevRowIDs.length; ii++) {\n          var sectionID = prevSectionIDs[ii];\n          warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n          prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n        }\n\n        this._dirtySections = [];\n        this._dirtyRows = [];\n        var dirty;\n\n        for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n          var sectionID = this.sectionIdentities[sIndex];\n          dirty = !prevSectionsHash[sectionID];\n          var _sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n\n          if (!dirty && _sectionHeaderHasChanged) {\n            dirty = _sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n          }\n\n          this._dirtySections.push(!!dirty);\n\n          this._dirtyRows[sIndex] = [];\n\n          for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n            var rowID = this.rowIdentities[sIndex][rIndex];\n            dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n\n            this._dirtyRows[sIndex].push(!!dirty);\n          }\n        }\n      }\n    }]);\n\n    return ListViewDataSource;\n  }();\n\n  function countRows(allRowIDs) {\n    var totalRows = 0;\n\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var rowIDs = allRowIDs[sectionIdx];\n      totalRows += rowIDs.length;\n    }\n\n    return totalRows;\n  }\n\n  function keyedDictionaryFromArray(arr) {\n    if (isEmpty(arr)) {\n      return {};\n    }\n\n    var result = {};\n\n    for (var ii = 0; ii < arr.length; ii++) {\n      var _key = arr[ii];\n      warning(!result[_key], 'Value appears more than once in array: ' + _key);\n      result[_key] = true;\n    }\n\n    return result;\n  }\n\n  module.exports = ListViewDataSource;\n});","map":[[2,0,10,0],[18,0,12,0],[18,6,12,6,"invariant"],[18,18,12,18,"require"],[18,49,12,26],[18,69,12,18],[18,70,12,0],[20,0,13,0],[20,6,13,6,"isEmpty"],[20,16,13,16,"require"],[20,47,13,24],[20,56,13,16],[20,57,13,0],[22,0,17,0],[22,6,17,6,"warning"],[22,16,17,16,"require"],[22,47,17,24],[22,65,17,16],[22,66,17,0],[24,0,19,0],[24,11,19,9,"defaultGetRowData"],[24,28,19,0],[24,29,20,2,"dataBlob"],[24,37,19,0],[24,39,21,2,"sectionID"],[24,48,19,0],[24,50,22,2,"rowID"],[24,55,19,0],[24,57,23,7],[25,0,24,2],[25,11,24,9,"dataBlob"],[25,20,24,18,"sectionID"],[25,29,24,9],[25,31,24,29,"rowID"],[25,36,24,9],[25,37,24,2],[26,0,25,1],[28,0,27,0],[28,11,27,9,"defaultGetSectionHeaderData"],[28,38,27,0],[28,39,28,2,"dataBlob"],[28,47,27,0],[28,49,29,2,"sectionID"],[28,58,27,0],[28,60,30,7],[29,0,31,2],[29,11,31,9,"dataBlob"],[29,20,31,18,"sectionID"],[29,29,31,9],[29,30,31,2],[30,0,32,1],[32,6,77,6,"ListViewDataSource"],[32,24],[33,0,103,2],[33,32,103,14,"params"],[33,38,103,2],[33,40,103,33],[34,0,103,33],[36,0,104,4,"invariant"],[36,16,105,6,"params"],[36,26,105,16],[36,33,105,23,"params"],[36,40,105,30,"rowHasChanged"],[36,53,105,16],[36,58,105,48],[36,68,104,4],[36,70,106,6],[36,110,104,4],[37,0,108,4],[37,11,108,9,"_rowHasChanged"],[37,25,108,4],[37,28,108,26,"params"],[37,35,108,33,"rowHasChanged"],[37,48,108,4],[38,0,109,4],[38,11,109,9,"_getRowData"],[38,22,109,4],[38,25,109,23,"params"],[38,32,109,30,"getRowData"],[38,42,109,23],[38,46,109,44,"defaultGetRowData"],[38,63,109,4],[39,0,110,4],[39,11,110,9,"_sectionHeaderHasChanged"],[39,35,110,4],[39,38,110,36,"params"],[39,45,110,43,"sectionHeaderHasChanged"],[39,68,110,4],[40,0,111,4],[40,11,111,9,"_getSectionHeaderData"],[40,32,111,4],[40,35,112,6,"params"],[40,42,112,13,"getSectionHeaderData"],[40,62,112,6],[40,66,112,37,"defaultGetSectionHeaderData"],[40,93,111,4],[41,0,114,4],[41,11,114,9,"_dataBlob"],[41,20,114,4],[41,23,114,21],[41,27,114,4],[42,0,115,4],[42,11,115,9,"_dirtyRows"],[42,21,115,4],[42,24,115,22],[42,26,115,4],[43,0,116,4],[43,11,116,9,"_dirtySections"],[43,25,116,4],[43,28,116,26],[43,30,116,4],[44,0,117,4],[44,11,117,9,"_cachedRowCount"],[44,26,117,4],[44,29,117,27],[44,30,117,4],[45,0,121,4],[45,11,121,9,"rowIdentities"],[45,24,121,4],[45,27,121,25],[45,29,121,4],[46,0,122,4],[46,11,122,9,"sectionIdentities"],[46,28,122,4],[46,31,122,29],[46,33,122,4],[47,0,123,3],[51,36,142,4,"dataBlob"],[51,44],[51,46,143,4,"rowIdentities"],[51,59],[51,61,144,24],[52,0,145,4],[52,12,145,10,"rowIds"],[52,21,145,19,"rowIdentities"],[52,37,145,35],[52,57,145,40,"rowIdentities"],[52,70,145,35],[52,72,145,19],[52,75,145,58],[52,79,145,4],[54,0,146,4],[54,12,146,8],[54,13,146,9],[54,18,146,14,"_sectionHeaderHasChanged"],[54,42,146,4],[54,44,146,40],[55,0,147,6],[55,15,147,11,"_sectionHeaderHasChanged"],[55,39,147,6],[55,42,147,38],[56,0,147,38],[56,19,147,44],[56,24,147,38],[57,0,147,38],[57,11,147,6],[58,0,148,5],[60,0,149,4],[60,15,149,11],[60,20,149,16,"cloneWithRowsAndSections"],[60,44,149,11],[60,45,149,41],[61,0,149,42,"s1"],[61,14,149,46,"dataBlob"],[62,0,149,41],[62,9,149,11],[62,11,149,57],[62,12,149,58],[62,16,149,57],[62,17,149,11],[62,19,149,65,"rowIds"],[62,25,149,11],[62,26,149,4],[63,0,150,3],[66,47,172,4,"dataBlob"],[66,55],[66,57,173,4,"sectionIdentities"],[66,74],[66,76,174,4,"rowIdentities"],[66,89],[66,91,175,24],[67,0,176,4,"invariant"],[67,18,177,6],[67,25,177,13],[67,30,177,18,"_sectionHeaderHasChanged"],[67,54,177,6],[67,59,177,47],[67,69,176,4],[67,71,178,6],[67,139,176,4],[68,0,180,4,"invariant"],[68,18,181,6],[68,19,181,7,"sectionIdentities"],[68,36,181,6],[68,40,182,8],[68,41,182,9,"rowIdentities"],[68,54,181,6],[68,58,183,8,"sectionIdentities"],[68,76,183,26,"length"],[68,82,183,8],[68,87,183,37,"rowIdentities"],[68,101,183,51,"length"],[68,107,180,4],[68,109,184,6],[68,155,180,4],[69,0,187,4],[69,12,187,10,"newSource"],[69,24,187,22],[69,28,187,26,"ListViewDataSource"],[69,46,187,22],[69,47,187,45],[70,0,188,6,"getRowData"],[70,22,188,18],[70,27,188,23,"_getRowData"],[70,38,187,45],[71,0,189,6,"getSectionHeaderData"],[71,32,189,28],[71,37,189,33,"_getSectionHeaderData"],[71,58,187,45],[72,0,190,6,"rowHasChanged"],[72,25,190,21],[72,30,190,26,"_rowHasChanged"],[72,44,187,45],[73,0,191,6,"sectionHeaderHasChanged"],[73,35,191,31],[73,40,191,36,"_sectionHeaderHasChanged"],[74,0,187,45],[74,9,187,22],[74,10,187,4],[75,0,193,4,"newSource"],[75,18,193,14,"_dataBlob"],[75,27,193,4],[75,30,193,26,"dataBlob"],[75,38,193,4],[77,0,194,4],[77,12,194,8,"sectionIdentities"],[77,29,194,4],[77,31,194,27],[78,0,195,6,"newSource"],[78,20,195,16,"sectionIdentities"],[78,37,195,6],[78,40,195,36,"sectionIdentities"],[78,57,195,6],[79,0,196,5],[79,9,194,4],[79,15,196,11],[80,0,197,6,"newSource"],[80,20,197,16,"sectionIdentities"],[80,37,197,6],[80,40,197,36,"Object"],[80,47,197,43,"keys"],[80,51,197,36],[80,52,197,48,"dataBlob"],[80,60,197,36],[80,61,197,6],[81,0,198,5],[83,0,199,4],[83,12,199,8,"rowIdentities"],[83,25,199,4],[83,27,199,23],[84,0,200,6,"newSource"],[84,20,200,16,"rowIdentities"],[84,33,200,6],[84,36,200,32,"rowIdentities"],[84,49,200,6],[85,0,201,5],[85,9,199,4],[85,15,201,11],[86,0,202,6,"newSource"],[86,20,202,16,"rowIdentities"],[86,33,202,6],[86,36,202,32],[86,38,202,6],[87,0,203,6,"newSource"],[87,20,203,16,"sectionIdentities"],[87,37,203,6],[87,38,203,34,"forEach"],[87,45,203,6],[87,46,203,42],[87,67,203,55],[88,0,204,8,"newSource"],[88,22,204,18,"rowIdentities"],[88,35,204,8],[88,36,204,32,"push"],[88,40,204,8],[88,41,204,37,"Object"],[88,48,204,44,"keys"],[88,52,204,37],[88,53,204,49,"dataBlob"],[88,62,204,58,"sectionID"],[88,71,204,49],[88,72,204,37],[88,73,204,8],[89,0,205,7],[89,11,203,6],[90,0,206,5],[92,0,207,4,"newSource"],[92,18,207,14,"_cachedRowCount"],[92,33,207,4],[92,36,207,32,"countRows"],[92,46,207,42,"newSource"],[92,56,207,52,"rowIdentities"],[92,69,207,32],[92,70,207,4],[94,0,209,4,"newSource"],[94,18,209,14,"_calculateDirtyArrays"],[94,39,209,4],[94,40,210,6],[94,45,210,11,"_dataBlob"],[94,54,209,4],[94,56,211,6],[94,61,211,11,"sectionIdentities"],[94,78,209,4],[94,80,212,6],[94,85,212,11,"rowIdentities"],[94,98,209,4],[96,0,215,4],[96,15,215,11,"newSource"],[96,24,215,4],[97,0,216,3],[100,36,223,24],[101,0,224,4],[101,15,224,11],[101,20,224,16,"_cachedRowCount"],[101,35,224,4],[102,0,225,3],[105,46,232,34],[106,0,233,4],[106,15,233,11],[106,20,233,16,"_cachedRowCount"],[106,35,233,11],[106,38,233,34],[106,43,233,39,"sectionIdentities"],[106,60,233,34],[106,61,233,57,"length"],[106,67,233,4],[107,0,234,3],[110,38,239,18,"sectionIndex"],[110,50],[110,52,239,40,"rowIndex"],[110,60],[110,62,239,67],[111,0,240,4],[111,12,240,10,"needsUpdate"],[111,26,240,24],[111,31,240,29,"_dirtyRows"],[111,41,240,24],[111,42,240,40,"sectionIndex"],[111,54,240,24],[111,56,240,54,"rowIndex"],[111,64,240,24],[111,65,240,4],[112,0,241,4,"warning"],[112,16,242,6,"needsUpdate"],[112,32,242,22,"undefined"],[112,41,241,4],[112,43,243,6],[112,83,243,46,"sectionIndex"],[112,95,243,6],[112,98,243,61],[112,102,243,6],[112,105,243,68,"rowIndex"],[112,113,241,4],[113,0,245,4],[113,15,245,11,"needsUpdate"],[113,26,245,4],[114,0,246,3],[117,33,251,13,"sectionIndex"],[117,45],[117,47,251,35,"rowIndex"],[117,55],[117,57,251,58],[118,0,252,4],[118,12,252,10,"sectionID"],[118,24,252,22],[118,29,252,27,"sectionIdentities"],[118,46,252,22],[118,47,252,45,"sectionIndex"],[118,59,252,22],[118,60,252,4],[119,0,253,4],[119,12,253,10,"rowID"],[119,20,253,18],[119,25,253,23,"rowIdentities"],[119,38,253,18],[119,39,253,37,"sectionIndex"],[119,51,253,18],[119,53,253,51,"rowIndex"],[119,61,253,18],[119,62,253,4],[120,0,254,4,"warning"],[120,16,255,6,"sectionID"],[120,30,255,20,"undefined"],[120,39,255,6],[120,43,255,33,"rowID"],[120,53,255,43,"undefined"],[120,62,254,4],[120,64,256,6],[120,101,256,43,"sectionIndex"],[120,113,256,6],[120,116,256,58],[120,120,256,6],[120,123,256,65,"rowIndex"],[120,131,254,4],[121,0,258,4],[121,15,258,11],[121,20,258,16,"_getRowData"],[121,31,258,11],[121,32,258,28],[121,37,258,33,"_dataBlob"],[121,46,258,11],[121,48,258,44,"sectionID"],[121,57,258,11],[121,59,258,55,"rowID"],[121,64,258,11],[121,65,258,4],[122,0,259,3],[125,43,265,23,"index"],[125,48],[125,50,265,47],[126,0,266,4],[126,12,266,8,"accessIndex"],[126,26,266,22,"index"],[126,31,266,4],[128,0,267,4],[128,13,267,9],[128,17,267,13,"ii"],[128,22,267,18],[128,23,267,4],[128,25,267,21,"ii"],[128,30,267,26],[128,35,267,31,"sectionIdentities"],[128,52,267,26],[128,53,267,49,"length"],[128,59,267,4],[128,61,267,57,"ii"],[128,65,267,4],[128,67,267,63],[129,0,268,6],[129,14,268,10,"accessIndex"],[129,29,268,25],[129,34,268,30,"rowIdentities"],[129,47,268,25],[129,48,268,44,"ii"],[129,50,268,25],[129,52,268,48,"length"],[129,58,268,6],[129,60,268,56],[130,0,269,8,"accessIndex"],[130,27,269,23],[130,32,269,28,"rowIdentities"],[130,45,269,23],[130,46,269,42,"ii"],[130,48,269,23],[130,50,269,46,"length"],[130,56,269,8],[131,0,270,7],[131,11,268,6],[131,17,270,13],[132,0,271,8],[132,19,271,15],[132,24,271,20,"rowIdentities"],[132,37,271,15],[132,38,271,34,"ii"],[132,40,271,15],[132,42,271,38,"accessIndex"],[132,53,271,15],[132,54,271,8],[133,0,272,7],[134,0,273,5],[136,0,274,4],[136,15,274,11],[136,19,274,4],[137,0,275,3],[140,47,281,27,"index"],[140,52],[140,54,281,51],[141,0,282,4],[141,12,282,8,"accessIndex"],[141,26,282,22,"index"],[141,31,282,4],[143,0,283,4],[143,13,283,9],[143,17,283,13,"ii"],[143,22,283,18],[143,23,283,4],[143,25,283,21,"ii"],[143,30,283,26],[143,35,283,31,"sectionIdentities"],[143,52,283,26],[143,53,283,49,"length"],[143,59,283,4],[143,61,283,57,"ii"],[143,65,283,4],[143,67,283,63],[144,0,284,6],[144,14,284,10,"accessIndex"],[144,29,284,25],[144,34,284,30,"rowIdentities"],[144,47,284,25],[144,48,284,44,"ii"],[144,50,284,25],[144,52,284,48,"length"],[144,58,284,6],[144,60,284,56],[145,0,285,8,"accessIndex"],[145,27,285,23],[145,32,285,28,"rowIdentities"],[145,45,285,23],[145,46,285,42,"ii"],[145,48,285,23],[145,50,285,46,"length"],[145,56,285,8],[146,0,286,7],[146,11,284,6],[146,17,286,13],[147,0,287,8],[147,19,287,15],[147,24,287,20,"sectionIdentities"],[147,41,287,15],[147,42,287,38,"ii"],[147,44,287,15],[147,45,287,8],[148,0,288,7],[149,0,289,5],[151,0,290,4],[151,15,290,11],[151,19,290,4],[152,0,291,3],[155,42,296,37],[156,0,297,4],[156,12,297,10,"results"],[156,22,297,20],[156,24,297,4],[158,0,298,4],[158,13,298,9],[158,17,298,13,"ii"],[158,22,298,18],[158,23,298,4],[158,25,298,21,"ii"],[158,30,298,26],[158,35,298,31,"sectionIdentities"],[158,52,298,26],[158,53,298,49,"length"],[158,59,298,4],[158,61,298,57,"ii"],[158,65,298,4],[158,67,298,63],[159,0,299,6,"results"],[159,18,299,14,"push"],[159,22,299,6],[159,23,299,19],[159,28,299,24,"rowIdentities"],[159,41,299,19],[159,42,299,38,"ii"],[159,44,299,19],[159,46,299,42,"length"],[159,52,299,6],[160,0,300,5],[162,0,301,4],[162,15,301,11,"results"],[162,22,301,4],[163,0,302,3],[166,48,307,28,"sectionIndex"],[166,60],[166,62,307,59],[167,0,308,4],[167,12,308,10,"needsUpdate"],[167,26,308,24],[167,31,308,29,"_dirtySections"],[167,45,308,24],[167,46,308,44,"sectionIndex"],[167,58,308,24],[167,59,308,4],[168,0,309,4,"warning"],[168,16,310,6,"needsUpdate"],[168,32,310,22,"undefined"],[168,41,309,4],[168,43,311,6],[168,78,311,41,"sectionIndex"],[168,90,309,4],[169,0,313,4],[169,15,313,11,"needsUpdate"],[169,26,313,4],[170,0,314,3],[173,43,319,23,"sectionIndex"],[173,55],[173,57,319,50],[174,0,320,4],[174,12,320,8],[174,13,320,9],[174,18,320,14,"_getSectionHeaderData"],[174,39,320,4],[174,41,320,37],[175,0,321,6],[175,17,321,13],[175,21,321,6],[176,0,322,5],[178,0,323,4],[178,12,323,10,"sectionID"],[178,24,323,22],[178,29,323,27,"sectionIdentities"],[178,46,323,22],[178,47,323,45,"sectionIndex"],[178,59,323,22],[178,60,323,4],[179,0,324,4,"warning"],[179,16,325,6,"sectionID"],[179,30,325,20,"undefined"],[179,39,324,4],[179,41,326,6],[179,87,326,52,"sectionIndex"],[179,99,324,4],[180,0,328,4],[180,15,328,11],[180,20,328,16,"_getSectionHeaderData"],[180,41,328,11],[180,42,328,38],[180,47,328,43,"_dataBlob"],[180,56,328,11],[180,58,328,54,"sectionID"],[180,67,328,11],[180,68,328,4],[181,0,329,3],[184,44,351,4,"prevDataBlob"],[184,56],[184,58,352,4,"prevSectionIDs"],[184,72],[184,74,353,4,"prevRowIDs"],[184,84],[184,86,354,10],[185,0,356,4],[185,12,356,10,"prevSectionsHash"],[185,31,356,29,"keyedDictionaryFromArray"],[185,56,356,54,"prevSectionIDs"],[185,70,356,29],[185,71,356,4],[186,0,357,4],[186,12,357,10,"prevRowsHash"],[186,27,357,25],[186,29,357,4],[188,0,358,4],[188,13,358,9],[188,17,358,13,"ii"],[188,22,358,18],[188,23,358,4],[188,25,358,21,"ii"],[188,30,358,26,"prevRowIDs"],[188,41,358,37,"length"],[188,47,358,4],[188,49,358,45,"ii"],[188,53,358,4],[188,55,358,51],[189,0,359,6],[189,14,359,10,"sectionID"],[189,26,359,22,"prevSectionIDs"],[189,41,359,37,"ii"],[189,43,359,22],[189,44,359,6],[190,0,360,6,"warning"],[190,18,361,8],[190,19,361,9,"prevRowsHash"],[190,32,361,22,"sectionID"],[190,41,361,9],[190,42,360,6],[190,44,362,8],[190,83,362,47,"sectionID"],[190,92,360,6],[191,0,364,6,"prevRowsHash"],[191,23,364,19,"sectionID"],[191,32,364,6],[191,36,364,32,"keyedDictionaryFromArray"],[191,61,364,57,"prevRowIDs"],[191,72,364,68,"ii"],[191,74,364,57],[191,75,364,32],[191,76,364,6],[192,0,365,5],[194,0,368,4],[194,13,368,9,"_dirtySections"],[194,27,368,4],[194,30,368,26],[194,32,368,4],[195,0,369,4],[195,13,369,9,"_dirtyRows"],[195,23,369,4],[195,26,369,22],[195,28,369,4],[196,0,371,4],[196,12,371,8,"dirty"],[196,17,371,4],[198,0,372,4],[198,13,372,9],[198,17,372,13,"sIndex"],[198,26,372,22],[198,27,372,4],[198,29,372,25,"sIndex"],[198,38,372,34],[198,43,372,39,"sectionIdentities"],[198,60,372,34],[198,61,372,57,"length"],[198,67,372,4],[198,69,372,65,"sIndex"],[198,77,372,4],[198,79,372,75],[199,0,373,6],[199,14,373,10,"sectionID"],[199,26,373,22],[199,31,373,27,"sectionIdentities"],[199,48,373,22],[199,49,373,45,"sIndex"],[199,55,373,22],[199,56,373,6],[200,0,375,6,"dirty"],[200,18,375,14],[200,19,375,15,"prevSectionsHash"],[200,36,375,32,"sectionID"],[200,45,375,15],[200,46,375,6],[201,0,376,6],[201,14,376,12,"sectionHeaderHasChanged"],[201,41,376,38],[201,46,376,43,"_sectionHeaderHasChanged"],[201,70,376,6],[203,0,377,6],[203,14,377,10],[203,15,377,11,"dirty"],[203,20,377,10],[203,24,377,20,"sectionHeaderHasChanged"],[203,48,377,6],[203,50,377,45],[204,0,378,8,"dirty"],[204,20,378,16,"sectionHeaderHasChanged"],[204,45,379,10],[204,50,379,15,"_getSectionHeaderData"],[204,71,379,10],[204,72,379,37,"prevDataBlob"],[204,84,379,10],[204,86,379,51,"sectionID"],[204,95,379,10],[204,96,378,16],[204,98,380,10],[204,103,380,15,"_getSectionHeaderData"],[204,124,380,10],[204,125,380,37],[204,130,380,42,"_dataBlob"],[204,139,380,10],[204,141,380,53,"sectionID"],[204,150,380,10],[204,151,378,16],[204,152,378,8],[205,0,382,7],[207,0,383,6],[207,15,383,11,"_dirtySections"],[207,29,383,6],[207,30,383,26,"push"],[207,34,383,6],[207,35,383,31],[207,36,383,32],[207,37,383,33,"dirty"],[207,42,383,6],[209,0,385,6],[209,15,385,11,"_dirtyRows"],[209,25,385,6],[209,26,385,22,"sIndex"],[209,32,385,6],[209,36,385,32],[209,38,385,6],[211,0,386,6],[211,15,387,8],[211,19,387,12,"rIndex"],[211,28,387,21],[211,29,386,6],[211,31,388,8,"rIndex"],[211,40,388,17],[211,45,388,22,"rowIdentities"],[211,58,388,17],[211,59,388,36,"sIndex"],[211,65,388,17],[211,67,388,44,"length"],[211,73,386,6],[211,75,389,8,"rIndex"],[211,83,386,6],[211,85,390,8],[212,0,391,8],[212,16,391,14,"rowID"],[212,24,391,22],[212,29,391,27,"rowIdentities"],[212,42,391,22],[212,43,391,41,"sIndex"],[212,49,391,22],[212,51,391,49,"rIndex"],[212,57,391,22],[212,58,391,8],[213,0,393,8,"dirty"],[213,20,394,10],[213,21,394,11,"prevSectionsHash"],[213,38,394,28,"sectionID"],[213,47,394,11],[213,48,394,10],[213,52,395,10],[213,53,395,11,"prevRowsHash"],[213,66,395,24,"sectionID"],[213,75,395,11],[213,77,395,35,"rowID"],[213,82,395,11],[213,83,394,10],[213,87,396,10],[213,92,396,15,"_rowHasChanged"],[213,106,396,10],[213,107,397,12],[213,112,397,17,"_getRowData"],[213,123,397,12],[213,124,397,29,"prevDataBlob"],[213,136,397,12],[213,138,397,43,"sectionID"],[213,147,397,12],[213,149,397,54,"rowID"],[213,154,397,12],[213,155,396,10],[213,157,398,12],[213,162,398,17,"_getRowData"],[213,173,398,12],[213,174,398,29],[213,179,398,34,"_dataBlob"],[213,188,398,12],[213,190,398,45,"sectionID"],[213,199,398,12],[213,201,398,56,"rowID"],[213,206,398,12],[213,207,396,10],[213,208,393,8],[215,0,400,8],[215,17,400,13,"_dirtyRows"],[215,27,400,8],[215,28,400,24,"sIndex"],[215,34,400,8],[215,36,400,32,"push"],[215,40,400,8],[215,41,400,37],[215,42,400,38],[215,43,400,39,"dirty"],[215,48,400,8],[216,0,401,7],[217,0,402,5],[218,0,403,3],[224,0,406,0],[224,11,406,9,"countRows"],[224,20,406,0],[224,21,406,19,"allRowIDs"],[224,30,406,0],[224,32,406,30],[225,0,407,2],[225,8,407,6,"totalRows"],[225,20,407,18],[225,21,407,2],[227,0,408,2],[227,9,408,7],[227,13,408,11,"sectionIdx"],[227,26,408,24],[227,27,408,2],[227,29,408,27,"sectionIdx"],[227,42,408,40,"allRowIDs"],[227,52,408,50,"length"],[227,58,408,2],[227,60,408,58,"sectionIdx"],[227,72,408,2],[227,74,408,72],[228,0,409,4],[228,10,409,10,"rowIDs"],[228,19,409,19,"allRowIDs"],[228,29,409,29,"sectionIdx"],[228,39,409,19],[228,40,409,4],[229,0,410,4,"totalRows"],[229,19,410,17,"rowIDs"],[229,26,410,24,"length"],[229,32,410,4],[230,0,411,3],[232,0,412,2],[232,11,412,9,"totalRows"],[232,20,412,2],[233,0,413,1],[235,0,415,0],[235,11,415,9,"keyedDictionaryFromArray"],[235,35,415,0],[235,36,415,34,"arr"],[235,39,415,0],[235,41,415,39],[236,0,416,2],[236,8,416,6,"isEmpty"],[236,16,416,14,"arr"],[236,19,416,6],[236,20,416,2],[236,22,416,20],[237,0,417,4],[237,13,417,11],[237,15,417,4],[238,0,418,3],[240,0,419,2],[240,8,419,8,"result"],[240,17,419,17],[240,19,419,2],[242,0,420,2],[242,9,420,7],[242,13,420,11,"ii"],[242,18,420,16],[242,19,420,2],[242,21,420,19,"ii"],[242,26,420,24,"arr"],[242,30,420,28,"length"],[242,36,420,2],[242,38,420,36,"ii"],[242,42,420,2],[242,44,420,42],[243,0,421,4],[243,10,421,10,"key"],[243,17,421,16,"arr"],[243,21,421,20,"ii"],[243,23,421,16],[243,24,421,4],[244,0,422,4,"warning"],[244,14,422,12],[244,15,422,13,"result"],[244,22,422,20,"key"],[244,26,422,13],[244,27,422,4],[244,29,422,26],[244,73,422,70,"key"],[244,77,422,4],[245,0,423,4,"result"],[245,13,423,11,"key"],[245,17,423,4],[245,21,423,18],[245,25,423,4],[246,0,424,3],[248,0,425,2],[248,11,425,9,"result"],[248,17,425,2],[249,0,426,1],[251,0,428,0,"module"],[251,9,428,7,"exports"],[251,16,428,0],[251,19,428,17,"ListViewDataSource"],[251,37,428,0]]},"type":"js/module"}]}