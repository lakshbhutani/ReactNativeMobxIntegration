{"dependencies":[{"name":"fbjs/lib/invariant","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  'use strict';\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var invariant = _$$_REQUIRE(_dependencyMap[0], 'fbjs/lib/invariant');\n\n  function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {\n    var out = [];\n    var outLength = 0;\n\n    for (var ii = 0; ii < itemCount; ii++) {\n      var frame = getFrameMetrics(ii);\n      var trailingOffset = frame.offset + frame.length;\n\n      for (var kk = 0; kk < offsets.length; kk++) {\n        if (out[kk] == null && trailingOffset >= offsets[kk]) {\n          out[kk] = ii;\n          outLength++;\n\n          if (kk === offsets.length - 1) {\n            invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));\n            return out;\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  function newRangeCount(prev, next) {\n    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));\n  }\n\n  function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {\n    var data = props.data,\n        getItemCount = props.getItemCount,\n        maxToRenderPerBatch = props.maxToRenderPerBatch,\n        windowSize = props.windowSize;\n    var itemCount = getItemCount(data);\n\n    if (itemCount === 0) {\n      return prev;\n    }\n\n    var offset = scrollMetrics.offset,\n        velocity = scrollMetrics.velocity,\n        visibleLength = scrollMetrics.visibleLength;\n    var visibleBegin = Math.max(0, offset);\n    var visibleEnd = visibleBegin + visibleLength;\n    var overscanLength = (windowSize - 1) * visibleLength;\n    var leadFactor = 0.5;\n    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);\n    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n    var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;\n\n    if (lastItemOffset < overscanBegin) {\n      return {\n        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n        last: itemCount - 1\n      };\n    }\n\n    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),\n        _elementsThatOverlapO2 = _slicedToArray(_elementsThatOverlapO, 4),\n        overscanFirst = _elementsThatOverlapO2[0],\n        first = _elementsThatOverlapO2[1],\n        last = _elementsThatOverlapO2[2],\n        overscanLast = _elementsThatOverlapO2[3];\n\n    overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n    first = first == null ? Math.max(0, overscanFirst) : first;\n    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;\n    var visible = {\n      first: first,\n      last: last\n    };\n    var newCellCount = newRangeCount(prev, visible);\n\n    while (true) {\n      if (first <= overscanFirst && last >= overscanLast) {\n        break;\n      }\n\n      var maxNewCells = newCellCount >= maxToRenderPerBatch;\n      var firstWillAddMore = first <= prev.first || first > prev.last;\n      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n      var lastWillAddMore = last >= prev.last || last < prev.first;\n      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);\n\n      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n        break;\n      }\n\n      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {\n        if (firstWillAddMore) {\n          newCellCount++;\n        }\n\n        first--;\n      }\n\n      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {\n        if (lastWillAddMore) {\n          newCellCount++;\n        }\n\n        last++;\n      }\n    }\n\n    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {\n      throw new Error('Bad window calculation ' + JSON.stringify({\n        first: first,\n        last: last,\n        itemCount: itemCount,\n        overscanFirst: overscanFirst,\n        overscanLast: overscanLast,\n        visible: visible\n      }));\n    }\n\n    return {\n      first: first,\n      last: last\n    };\n  }\n\n  var VirtualizeUtils = {\n    computeWindowedRenderLimits: computeWindowedRenderLimits,\n    elementsThatOverlapOffsets: elementsThatOverlapOffsets,\n    newRangeCount: newRangeCount\n  };\n  module.exports = VirtualizeUtils;\n});","map":[[2,0,10,0],[12,0,12,0],[12,6,12,6,"invariant"],[12,18,12,18,"require"],[12,49,12,26],[12,69,12,18],[12,70,12,0],[14,0,19,0],[14,11,19,9,"elementsThatOverlapOffsets"],[14,37,19,0],[14,38,20,2,"offsets"],[14,45,19,0],[14,47,21,2,"itemCount"],[14,56,19,0],[14,58,22,2,"getFrameMetrics"],[14,73,19,0],[14,75,23,17],[15,0,24,2],[15,8,24,8,"out"],[15,14,24,14],[15,16,24,2],[16,0,25,2],[16,8,25,6,"outLength"],[16,20,25,18],[16,21,25,2],[18,0,26,2],[18,9,26,7],[18,13,26,11,"ii"],[18,18,26,16],[18,19,26,2],[18,21,26,19,"ii"],[18,26,26,24,"itemCount"],[18,35,26,2],[18,37,26,35,"ii"],[18,41,26,2],[18,43,26,41],[19,0,27,4],[19,10,27,10,"frame"],[19,18,27,18,"getFrameMetrics"],[19,34,27,34,"ii"],[19,36,27,18],[19,37,27,4],[20,0,28,4],[20,10,28,10,"trailingOffset"],[20,27,28,27,"frame"],[20,33,28,33,"offset"],[20,39,28,27],[20,42,28,42,"frame"],[20,48,28,48,"length"],[20,54,28,4],[22,0,29,4],[22,11,29,9],[22,15,29,13,"kk"],[22,20,29,18],[22,21,29,4],[22,23,29,21,"kk"],[22,28,29,26,"offsets"],[22,36,29,34,"length"],[22,42,29,4],[22,44,29,42,"kk"],[22,48,29,4],[22,50,29,48],[23,0,30,6],[23,12,30,10,"out"],[23,16,30,14,"kk"],[23,18,30,10],[23,23,30,21],[23,27,30,10],[23,31,30,29,"trailingOffset"],[23,49,30,47,"offsets"],[23,57,30,55,"kk"],[23,59,30,47],[23,60,30,6],[23,62,30,60],[24,0,31,8,"out"],[24,14,31,12,"kk"],[24,16,31,8],[24,20,31,18,"ii"],[24,22,31,8],[25,0,32,8,"outLength"],[27,0,33,8],[27,14,33,12,"kk"],[27,21,33,19,"offsets"],[27,29,33,27,"length"],[27,35,33,19],[27,38,33,36],[27,39,33,8],[27,41,33,39],[28,0,34,10,"invariant"],[28,22,35,12,"outLength"],[28,36,35,26,"offsets"],[28,44,35,34,"length"],[28,50,34,10],[28,52,36,12],[28,106,34,10],[28,108,37,12,"JSON"],[28,113,37,17,"stringify"],[28,122,37,12],[28,123,37,27,"offsets"],[28,130,37,12],[28,131,34,10],[29,0,39,10],[29,19,39,17,"out"],[29,22,39,10],[30,0,40,9],[31,0,41,7],[32,0,42,5],[33,0,43,3],[35,0,44,2],[35,11,44,9,"out"],[35,14,44,2],[36,0,45,1],[38,0,53,0],[38,11,53,9,"newRangeCount"],[38,24,53,0],[38,25,54,2,"prev"],[38,29,53,0],[38,31,55,2,"next"],[38,35,53,0],[38,37,56,10],[39,0,57,2],[39,11,58,4,"next"],[39,16,58,9,"last"],[39,20,58,4],[39,23,59,4,"next"],[39,28,59,9,"first"],[39,33,58,4],[39,36,60,4],[39,37,58,4],[39,40,61,4,"Math"],[39,45,61,9,"max"],[39,48,61,4],[39,49,62,6],[39,50,61,4],[39,52,63,6],[39,56,63,10,"Math"],[39,61,63,15,"min"],[39,64,63,10],[39,65,63,19,"next"],[39,70,63,24,"last"],[39,74,63,10],[39,76,63,30,"prev"],[39,81,63,35,"last"],[39,85,63,10],[39,86,63,6],[39,89,63,43,"Math"],[39,94,63,48,"max"],[39,97,63,43],[39,98,63,52,"next"],[39,103,63,57,"first"],[39,108,63,43],[39,110,63,64,"prev"],[39,115,63,69,"first"],[39,120,63,43],[39,121,61,4],[39,122,57,2],[40,0,66,1],[42,0,74,0],[42,11,74,9,"computeWindowedRenderLimits"],[42,38,74,0],[42,39,75,2,"props"],[42,44,74,0],[42,46,81,2,"prev"],[42,50,74,0],[42,52,82,2,"getFrameMetricsApprox"],[42,73,74,0],[42,75,83,2,"scrollMetrics"],[42,88,74,0],[42,90,89,33],[43,0,89,33],[43,8,90,9,"data"],[43,12,89,33],[43,15,90,64,"props"],[43,20,89,33],[43,21,90,9,"data"],[43,25,89,33],[44,0,89,33],[44,8,90,15,"getItemCount"],[44,20,89,33],[44,23,90,64,"props"],[44,28,89,33],[44,29,90,15,"getItemCount"],[44,41,89,33],[45,0,89,33],[45,8,90,29,"maxToRenderPerBatch"],[45,27,89,33],[45,30,90,64,"props"],[45,35,89,33],[45,36,90,29,"maxToRenderPerBatch"],[45,55,89,33],[46,0,89,33],[46,8,90,50,"windowSize"],[46,18,89,33],[46,21,90,64,"props"],[46,26,89,33],[46,27,90,50,"windowSize"],[46,37,89,33],[47,0,91,2],[47,8,91,8,"itemCount"],[47,20,91,20,"getItemCount"],[47,33,91,33,"data"],[47,37,91,20],[47,38,91,2],[49,0,92,2],[49,8,92,6,"itemCount"],[49,22,92,20],[49,23,92,2],[49,25,92,23],[50,0,93,4],[50,13,93,11,"prev"],[50,17,93,4],[51,0,94,3],[53,0,89,33],[53,8,95,9,"offset"],[53,14,89,33],[53,17,95,44,"scrollMetrics"],[53,30,89,33],[53,31,95,9,"offset"],[53,37,89,33],[54,0,89,33],[54,8,95,17,"velocity"],[54,16,89,33],[54,19,95,44,"scrollMetrics"],[54,32,89,33],[54,33,95,17,"velocity"],[54,41,89,33],[55,0,89,33],[55,8,95,27,"visibleLength"],[55,21,89,33],[55,24,95,44,"scrollMetrics"],[55,37,89,33],[55,38,95,27,"visibleLength"],[55,51,89,33],[56,0,100,2],[56,8,100,8,"visibleBegin"],[56,23,100,23,"Math"],[56,28,100,28,"max"],[56,31,100,23],[56,32,100,32],[56,33,100,23],[56,35,100,35,"offset"],[56,41,100,23],[56,42,100,2],[57,0,101,2],[57,8,101,8,"visibleEnd"],[57,21,101,21,"visibleBegin"],[57,36,101,36,"visibleLength"],[57,49,101,2],[58,0,102,2],[58,8,102,8,"overscanLength"],[58,25,102,25],[58,26,102,26,"windowSize"],[58,39,102,39],[58,40,102,25],[58,44,102,44,"visibleLength"],[58,57,102,2],[59,0,105,2],[59,8,105,8,"leadFactor"],[59,21,105,21],[59,24,105,2],[60,0,107,2],[60,8,107,8,"fillPreference"],[60,25,108,4,"velocity"],[60,36,108,15],[60,37,108,4],[60,40,108,19],[60,47,108,4],[60,50,108,29,"velocity"],[60,61,108,40],[60,62,108,41],[60,63,108,29],[60,66,108,45],[60,74,108,29],[60,77,108,56],[60,83,107,2],[61,0,110,2],[61,8,110,8,"overscanBegin"],[61,24,110,24,"Math"],[61,29,110,29,"max"],[61,32,110,24],[61,33,111,4],[61,34,110,24],[61,36,112,4,"visibleBegin"],[61,51,112,19],[61,52,112,20],[61,56,112,24,"leadFactor"],[61,66,112,19],[61,70,112,38,"overscanLength"],[61,84,110,24],[61,85,110,2],[62,0,114,2],[62,8,114,8,"overscanEnd"],[62,22,114,22,"Math"],[62,27,114,27,"max"],[62,30,114,22],[62,31,114,31],[62,32,114,22],[62,34,114,34,"visibleEnd"],[62,47,114,47,"leadFactor"],[62,60,114,60,"overscanLength"],[62,74,114,22],[62,75,114,2],[63,0,116,2],[63,8,116,8,"lastItemOffset"],[63,25,116,25,"getFrameMetricsApprox"],[63,47,116,47,"itemCount"],[63,59,116,59],[63,60,116,25],[63,62,116,62,"offset"],[63,68,116,2],[65,0,117,2],[65,8,117,6,"lastItemOffset"],[65,25,117,23,"overscanBegin"],[65,38,117,2],[65,40,117,38],[66,0,119,4],[66,13,119,11],[67,0,120,6,"first"],[67,15,120,13,"Math"],[67,20,120,18,"max"],[67,23,120,13],[67,24,120,22],[67,25,120,13],[67,27,120,25,"itemCount"],[67,39,120,37],[67,40,120,25],[67,43,120,41,"maxToRenderPerBatch"],[67,62,120,13],[67,63,119,11],[68,0,121,6,"last"],[68,14,121,12,"itemCount"],[68,26,121,24],[69,0,119,11],[69,7,119,4],[70,0,123,3],[72,0,89,33],[72,32,126,51,"elementsThatOverlapOffsets"],[72,59,127,4],[72,60,127,5,"overscanBegin"],[72,73,127,4],[72,75,127,20,"visibleBegin"],[72,87,127,4],[72,89,127,34,"visibleEnd"],[72,99,127,4],[72,101,127,46,"overscanEnd"],[72,112,127,4],[72,113,126,51],[72,115,128,4,"props"],[72,121,128,10,"getItemCount"],[72,133,128,4],[72,134,128,23,"props"],[72,140,128,29,"data"],[72,144,128,4],[72,145,126,51],[72,147,129,4,"getFrameMetricsApprox"],[72,168,126,51],[72,169,89,33],[73,0,89,33],[74,0,89,33],[74,8,126,7,"overscanFirst"],[74,21,89,33],[75,0,89,33],[75,8,126,22,"first"],[75,13,89,33],[76,0,89,33],[76,8,126,29,"last"],[76,12,89,33],[77,0,89,33],[77,8,126,35,"overscanLast"],[77,20,89,33],[79,0,131,2,"overscanFirst"],[79,20,131,18,"overscanFirst"],[79,37,131,35],[79,41,131,18],[79,44,131,42],[79,45,131,18],[79,48,131,46,"overscanFirst"],[79,61,131,2],[80,0,132,2,"first"],[80,12,132,10,"first"],[80,21,132,19],[80,25,132,10],[80,28,132,26,"Math"],[80,33,132,31,"max"],[80,36,132,26],[80,37,132,35],[80,38,132,26],[80,40,132,38,"overscanFirst"],[80,53,132,26],[80,54,132,10],[80,57,132,55,"first"],[80,62,132,2],[81,0,133,2,"overscanLast"],[81,19,133,17,"overscanLast"],[81,35,133,33],[81,39,133,17],[81,42,133,40,"itemCount"],[81,54,133,52],[81,55,133,17],[81,58,133,56,"overscanLast"],[81,70,133,2],[82,0,134,2,"last"],[82,11,135,4,"last"],[82,19,135,12],[82,23,135,4],[82,26,136,8,"Math"],[82,31,136,13,"min"],[82,34,136,8],[82,35,136,17,"overscanLast"],[82,47,136,8],[82,49,136,31,"first"],[82,57,136,39,"maxToRenderPerBatch"],[82,76,136,31],[82,79,136,61],[82,80,136,8],[82,81,135,4],[82,84,137,8,"last"],[82,88,134,2],[83,0,138,2],[83,8,138,8,"visible"],[83,18,138,18],[84,0,138,19,"first"],[84,18,138,18],[85,0,138,26,"last"],[86,0,138,18],[86,5,138,2],[87,0,144,2],[87,8,144,6,"newCellCount"],[87,23,144,21,"newRangeCount"],[87,37,144,35,"prev"],[87,41,144,21],[87,43,144,41,"visible"],[87,50,144,21],[87,51,144,2],[89,0,146,2],[89,11,146,9],[89,15,146,2],[89,17,146,15],[90,0,147,4],[90,10,147,8,"first"],[90,19,147,17,"overscanFirst"],[90,32,147,8],[90,36,147,34,"last"],[90,44,147,42,"overscanLast"],[90,56,147,4],[90,58,147,56],[91,0,149,6],[92,0,150,5],[94,0,151,4],[94,10,151,10,"maxNewCells"],[94,24,151,24,"newCellCount"],[94,40,151,40,"maxToRenderPerBatch"],[94,59,151,4],[95,0,152,4],[95,10,152,10,"firstWillAddMore"],[95,29,152,29,"first"],[95,38,152,38,"prev"],[95,43,152,43,"first"],[95,48,152,29],[95,52,152,52,"first"],[95,60,152,60,"prev"],[95,65,152,65,"last"],[95,69,152,4],[96,0,153,4],[96,10,153,10,"firstShouldIncrement"],[96,33,154,6,"first"],[96,41,154,14,"overscanFirst"],[96,54,154,6],[96,59,154,32],[96,60,154,33,"maxNewCells"],[96,71,154,32],[96,75,154,48],[96,76,154,49,"firstWillAddMore"],[96,92,154,6],[96,93,153,4],[97,0,155,4],[97,10,155,10,"lastWillAddMore"],[97,28,155,28,"last"],[97,36,155,36,"prev"],[97,41,155,41,"last"],[97,45,155,28],[97,49,155,49,"last"],[97,56,155,56,"prev"],[97,61,155,61,"first"],[97,66,155,4],[98,0,156,4],[98,10,156,10,"lastShouldIncrement"],[98,32,157,6,"last"],[98,39,157,13,"overscanLast"],[98,51,157,6],[98,56,157,30],[98,57,157,31,"maxNewCells"],[98,68,157,30],[98,72,157,46],[98,73,157,47,"lastWillAddMore"],[98,88,157,6],[98,89,156,4],[100,0,158,4],[100,10,158,8,"maxNewCells"],[100,25,158,23],[100,26,158,24,"firstShouldIncrement"],[100,46,158,8],[100,50,158,48],[100,51,158,49,"lastShouldIncrement"],[100,70,158,4],[100,72,158,70],[101,0,163,6],[102,0,164,5],[104,0,165,4],[104,10,166,6,"firstShouldIncrement"],[104,34,167,6],[104,36,167,8,"fillPreference"],[104,55,167,27],[104,62,167,8],[104,66,167,38,"lastShouldIncrement"],[104,85,167,8],[104,89,167,61,"lastWillAddMore"],[104,104,167,6],[104,105,165,4],[104,107,168,6],[105,0,169,6],[105,12,169,10,"firstWillAddMore"],[105,28,169,6],[105,30,169,28],[106,0,170,8,"newCellCount"],[107,0,171,7],[109,0,172,6,"first"],[110,0,173,5],[112,0,174,4],[112,10,175,6,"lastShouldIncrement"],[112,33,176,6],[112,35,176,8,"fillPreference"],[112,54,176,27],[112,62,176,8],[112,66,176,39,"firstShouldIncrement"],[112,86,176,8],[112,90,176,63,"firstWillAddMore"],[112,106,176,6],[112,107,174,4],[112,109,177,6],[113,0,178,6],[113,12,178,10,"lastWillAddMore"],[113,27,178,6],[113,29,178,27],[114,0,179,8,"newCellCount"],[115,0,180,7],[117,0,181,6,"last"],[118,0,182,5],[119,0,183,3],[121,0,184,2],[121,8,185,4],[121,10,186,6,"last"],[121,18,186,14,"first"],[121,23,186,6],[121,27,187,6,"first"],[121,36,187,15],[121,37,186,6],[121,41,188,6,"last"],[121,48,188,13,"itemCount"],[121,57,186,6],[121,61,189,6,"first"],[121,70,189,15,"overscanFirst"],[121,83,186,6],[121,87,190,6,"last"],[121,95,190,14,"overscanLast"],[121,107,186,6],[121,111,191,6,"first"],[121,120,191,15,"visible"],[121,128,191,23,"first"],[121,133,186,6],[121,137,192,6,"last"],[121,145,192,14,"visible"],[121,153,192,22,"last"],[121,157,185,4],[121,158,184,2],[121,160,194,4],[122,0,195,4],[122,12,195,10],[122,16,195,14,"Error"],[122,21,195,10],[122,22,196,6],[122,50,197,8,"JSON"],[122,55,197,13,"stringify"],[122,64,197,8],[122,65,197,23],[123,0,198,10,"first"],[123,20,197,23],[124,0,199,10,"last"],[124,18,197,23],[125,0,200,10,"itemCount"],[125,28,197,23],[126,0,201,10,"overscanFirst"],[126,36,197,23],[127,0,202,10,"overscanLast"],[127,34,197,23],[128,0,203,10,"visible"],[129,0,197,23],[129,7,197,8],[129,8,195,10],[129,9,195,4],[130,0,206,3],[132,0,207,2],[132,11,207,9],[133,0,207,10,"first"],[133,18,207,9],[134,0,207,17,"last"],[135,0,207,9],[135,5,207,2],[136,0,208,1],[138,0,210,0],[138,6,210,6,"VirtualizeUtils"],[138,24,210,24],[139,0,211,2,"computeWindowedRenderLimits"],[139,60,210,24],[140,0,212,2,"elementsThatOverlapOffsets"],[140,58,210,24],[141,0,213,2,"newRangeCount"],[142,0,210,24],[142,3,210,0],[143,0,216,0,"module"],[143,9,216,7,"exports"],[143,16,216,0],[143,19,216,17,"VirtualizeUtils"],[143,34,216,0]]},"type":"js/module"}]}