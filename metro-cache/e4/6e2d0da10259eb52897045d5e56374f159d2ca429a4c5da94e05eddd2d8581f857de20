{"dependencies":[{"name":"./AnimatedNode","isAsync":false},{"name":"./AnimatedWithChildren","isAsync":false},{"name":"../NativeAnimatedHelper","isAsync":false},{"name":"fbjs/lib/invariant","isAsync":false},{"name":"normalizeColor","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  'use strict';\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\n  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  var AnimatedNode = _$$_REQUIRE(_dependencyMap[0], './AnimatedNode');\n\n  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[1], './AnimatedWithChildren');\n\n  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[2], '../NativeAnimatedHelper');\n\n  var invariant = _$$_REQUIRE(_dependencyMap[3], 'fbjs/lib/invariant');\n\n  var normalizeColor = _$$_REQUIRE(_dependencyMap[4], 'normalizeColor');\n\n  var linear = function linear(t) {\n    return t;\n  };\n\n  function createInterpolation(config) {\n    if (config.outputRange && typeof config.outputRange[0] === 'string') {\n      return createInterpolationFromStringOutputRange(config);\n    }\n\n    var outputRange = config.outputRange;\n    checkInfiniteRange('outputRange', outputRange);\n    var inputRange = config.inputRange;\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n    var easing = config.easing || linear;\n    var extrapolateLeft = 'extend';\n\n    if (config.extrapolateLeft !== undefined) {\n      extrapolateLeft = config.extrapolateLeft;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateLeft = config.extrapolate;\n    }\n\n    var extrapolateRight = 'extend';\n\n    if (config.extrapolateRight !== undefined) {\n      extrapolateRight = config.extrapolateRight;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateRight = config.extrapolate;\n    }\n\n    return function (input) {\n      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n      var range = findRange(input, inputRange);\n      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n    };\n  }\n\n  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n    var result = input;\n\n    if (result < inputMin) {\n      if (extrapolateLeft === 'identity') {\n        return result;\n      } else if (extrapolateLeft === 'clamp') {\n        result = inputMin;\n      } else if (extrapolateLeft === 'extend') {}\n    }\n\n    if (result > inputMax) {\n      if (extrapolateRight === 'identity') {\n        return result;\n      } else if (extrapolateRight === 'clamp') {\n        result = inputMax;\n      } else if (extrapolateRight === 'extend') {}\n    }\n\n    if (outputMin === outputMax) {\n      return outputMin;\n    }\n\n    if (inputMin === inputMax) {\n      if (input <= inputMin) {\n        return outputMin;\n      }\n\n      return outputMax;\n    }\n\n    if (inputMin === -Infinity) {\n      result = -result;\n    } else if (inputMax === Infinity) {\n      result = result - inputMin;\n    } else {\n      result = (result - inputMin) / (inputMax - inputMin);\n    }\n\n    result = easing(result);\n\n    if (outputMin === -Infinity) {\n      result = -result;\n    } else if (outputMax === Infinity) {\n      result = result + outputMin;\n    } else {\n      result = result * (outputMax - outputMin) + outputMin;\n    }\n\n    return result;\n  }\n\n  function colorToRgba(input) {\n    var int32Color = normalizeColor(input);\n\n    if (int32Color === null) {\n      return input;\n    }\n\n    int32Color = int32Color || 0;\n    var r = (int32Color & 0xff000000) >>> 24;\n    var g = (int32Color & 0x00ff0000) >>> 16;\n    var b = (int32Color & 0x0000ff00) >>> 8;\n    var a = (int32Color & 0x000000ff) / 255;\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n  }\n\n  var stringShapeRegex = /[0-9\\.-]+/g;\n\n  function createInterpolationFromStringOutputRange(config) {\n    var outputRange = config.outputRange;\n    invariant(outputRange.length >= 2, 'Bad output range');\n    outputRange = outputRange.map(colorToRgba);\n    checkPattern(outputRange);\n    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n      return [];\n    });\n    outputRange.forEach(function (value) {\n      value.match(stringShapeRegex).forEach(function (number, i) {\n        outputRanges[i].push(+number);\n      });\n    });\n    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n      return createInterpolation(_objectSpread({}, config, {\n        outputRange: outputRanges[i]\n      }));\n    });\n    var shouldRound = isRgbOrRgba(outputRange[0]);\n    return function (input) {\n      var i = 0;\n      return outputRange[0].replace(stringShapeRegex, function () {\n        var val = +interpolations[i++](input);\n        var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n        return String(rounded);\n      });\n    };\n  }\n\n  function isRgbOrRgba(range) {\n    return typeof range === 'string' && range.startsWith('rgb');\n  }\n\n  function checkPattern(arr) {\n    var pattern = arr[0].replace(stringShapeRegex, '');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n    }\n  }\n\n  function findRange(input, inputRange) {\n    var i;\n\n    for (i = 1; i < inputRange.length - 1; ++i) {\n      if (inputRange[i] >= input) {\n        break;\n      }\n    }\n\n    return i - 1;\n  }\n\n  function checkValidInputRange(arr) {\n    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);\n    }\n  }\n\n  function checkInfiniteRange(name, arr) {\n    invariant(arr.length >= 2, name + ' must have at least 2 elements');\n    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n  }\n\n  var AnimatedInterpolation = function (_AnimatedWithChildren) {\n    function AnimatedInterpolation(parent, config) {\n      var _this;\n\n      _classCallCheck(this, AnimatedInterpolation);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedInterpolation).call(this));\n      _this._parent = parent;\n      _this._config = config;\n      _this._interpolation = createInterpolation(config);\n      return _this;\n    }\n\n    _createClass(AnimatedInterpolation, [{\n      key: \"__makeNative\",\n      value: function __makeNative() {\n        this._parent.__makeNative();\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this);\n      }\n    }, {\n      key: \"__getValue\",\n      value: function __getValue() {\n        var parentValue = this._parent.__getValue();\n\n        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n        return this._interpolation(parentValue);\n      }\n    }, {\n      key: \"interpolate\",\n      value: function interpolate(config) {\n        return new AnimatedInterpolation(this, config);\n      }\n    }, {\n      key: \"__attach\",\n      value: function __attach() {\n        this._parent.__addChild(this);\n      }\n    }, {\n      key: \"__detach\",\n      value: function __detach() {\n        this._parent.__removeChild(this);\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n      }\n    }, {\n      key: \"__transformDataType\",\n      value: function __transformDataType(range) {\n        return range.map(function (value) {\n          if (typeof value !== 'string') {\n            return value;\n          }\n\n          if (/deg$/.test(value)) {\n            var degrees = parseFloat(value) || 0;\n            var radians = degrees * Math.PI / 180.0;\n            return radians;\n          } else {\n            return parseFloat(value) || 0;\n          }\n        });\n      }\n    }, {\n      key: \"__getNativeConfig\",\n      value: function __getNativeConfig() {\n        if (__DEV__) {\n          NativeAnimatedHelper.validateInterpolation(this._config);\n        }\n\n        return {\n          inputRange: this._config.inputRange,\n          outputRange: this.__transformDataType(this._config.outputRange),\n          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n          type: 'interpolation'\n        };\n      }\n    }]);\n\n    _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n\n    return AnimatedInterpolation;\n  }(AnimatedWithChildren);\n\n  AnimatedInterpolation.__createInterpolation = createInterpolation;\n  module.exports = AnimatedInterpolation;\n});","map":[[2,0,11,0],[28,0,13,0],[28,6,13,6,"AnimatedNode"],[28,21,13,21,"require"],[28,52,13,29],[28,68,13,21],[28,69,13,0],[30,0,14,0],[30,6,14,6,"AnimatedWithChildren"],[30,29,14,29,"require"],[30,60,14,37],[30,84,14,29],[30,85,14,0],[32,0,15,0],[32,6,15,6,"NativeAnimatedHelper"],[32,29,15,29,"require"],[32,60,15,37],[32,85,15,29],[32,86,15,0],[34,0,17,0],[34,6,17,6,"invariant"],[34,18,17,18,"require"],[34,49,17,26],[34,69,17,18],[34,70,17,0],[36,0,18,0],[36,6,18,6,"normalizeColor"],[36,23,18,23,"require"],[36,54,18,31],[36,70,18,23],[36,71,18,0],[38,0,35,0],[38,6,35,6,"linear"],[38,15,35,15],[38,24,35,6,"linear"],[38,30,35,15],[39,0,35,15],[39,11,35,20,"t"],[39,12,35,15],[40,0,35,15],[40,3,35,0],[42,0,41,0],[42,11,41,9,"createInterpolation"],[42,30,41,0],[42,31,42,2,"config"],[42,37,41,0],[42,39,43,38],[43,0,44,2],[43,8,44,6,"config"],[43,15,44,13,"outputRange"],[43,26,44,6],[43,30,44,28],[43,37,44,35,"config"],[43,44,44,42,"outputRange"],[43,55,44,35],[43,56,44,54],[43,57,44,35],[43,58,44,28],[43,63,44,61],[43,71,44,2],[43,73,44,71],[44,0,45,4],[44,13,45,11,"createInterpolationFromStringOutputRange"],[44,54,45,52,"config"],[44,60,45,11],[44,61,45,4],[45,0,46,3],[47,0,48,2],[47,8,48,8,"outputRange"],[47,22,48,38,"config"],[47,29,48,45,"outputRange"],[47,40,48,2],[48,0,49,2,"checkInfiniteRange"],[48,23,49,21],[48,36,49,2],[48,38,49,36,"outputRange"],[48,49,49,2],[49,0,51,2],[49,8,51,8,"inputRange"],[49,21,51,21,"config"],[49,28,51,28,"inputRange"],[49,38,51,2],[50,0,52,2,"checkInfiniteRange"],[50,23,52,21],[50,35,52,2],[50,37,52,35,"inputRange"],[50,47,52,2],[51,0,53,2,"checkValidInputRange"],[51,25,53,23,"inputRange"],[51,35,53,2],[52,0,55,2,"invariant"],[52,14,56,4,"inputRange"],[52,25,56,15,"length"],[52,31,56,4],[52,36,56,26,"outputRange"],[52,48,56,38,"length"],[52,54,55,2],[52,56,57,4],[52,73,58,6,"inputRange"],[52,84,58,17,"length"],[52,90,57,4],[52,93,59,6],[52,114,57,4],[52,117,60,6,"outputRange"],[52,129,60,18,"length"],[52,135,57,4],[52,138,61,6],[52,167,55,2],[53,0,64,2],[53,8,64,8,"easing"],[53,17,64,17,"config"],[53,24,64,24,"easing"],[53,30,64,17],[53,34,64,34,"linear"],[53,40,64,2],[54,0,66,2],[54,8,66,6,"extrapolateLeft"],[54,26,66,41],[54,34,66,2],[56,0,67,2],[56,8,67,6,"config"],[56,15,67,13,"extrapolateLeft"],[56,30,67,6],[56,35,67,33,"undefined"],[56,44,67,2],[56,46,67,44],[57,0,68,4,"extrapolateLeft"],[57,24,68,22,"config"],[57,31,68,29,"extrapolateLeft"],[57,46,68,4],[58,0,69,3],[58,5,67,2],[58,11,69,9],[58,15,69,13,"config"],[58,22,69,20,"extrapolate"],[58,33,69,13],[58,38,69,36,"undefined"],[58,47,69,9],[58,49,69,47],[59,0,70,4,"extrapolateLeft"],[59,24,70,22,"config"],[59,31,70,29,"extrapolate"],[59,42,70,4],[60,0,71,3],[62,0,73,2],[62,8,73,6,"extrapolateRight"],[62,27,73,42],[62,35,73,2],[64,0,74,2],[64,8,74,6,"config"],[64,15,74,13,"extrapolateRight"],[64,31,74,6],[64,36,74,34,"undefined"],[64,45,74,2],[64,47,74,45],[65,0,75,4,"extrapolateRight"],[65,25,75,23,"config"],[65,32,75,30,"extrapolateRight"],[65,48,75,4],[66,0,76,3],[66,5,74,2],[66,11,76,9],[66,15,76,13,"config"],[66,22,76,20,"extrapolate"],[66,33,76,13],[66,38,76,36,"undefined"],[66,47,76,9],[66,49,76,47],[67,0,77,4,"extrapolateRight"],[67,25,77,23,"config"],[67,32,77,30,"extrapolate"],[67,43,77,4],[68,0,78,3],[70,0,80,2],[70,11,80,9],[70,28,80,18],[71,0,81,4,"invariant"],[71,16,82,6],[71,23,82,13,"input"],[71,28,82,6],[71,33,82,23],[71,41,81,4],[71,43,83,6],[71,96,81,4],[72,0,86,4],[72,10,86,10,"range"],[72,18,86,18,"findRange"],[72,28,86,28,"input"],[72,33,86,18],[72,35,86,35,"inputRange"],[72,45,86,18],[72,46,86,4],[73,0,87,4],[73,13,87,11,"interpolate"],[73,25,88,6,"input"],[73,30,87,11],[73,32,89,6,"inputRange"],[73,43,89,17,"range"],[73,48,89,6],[73,49,87,11],[73,51,90,6,"inputRange"],[73,62,90,17,"range"],[73,70,90,25],[73,71,90,6],[73,72,87,11],[73,74,91,6,"outputRange"],[73,86,91,18,"range"],[73,91,91,6],[73,92,87,11],[73,94,92,6,"outputRange"],[73,106,92,18,"range"],[73,114,92,26],[73,115,92,6],[73,116,87,11],[73,118,93,6,"easing"],[73,124,87,11],[73,126,94,6,"extrapolateLeft"],[73,141,87,11],[73,143,95,6,"extrapolateRight"],[73,159,87,11],[73,160,87,4],[74,0,97,3],[74,5,80,2],[75,0,98,1],[77,0,100,0],[77,11,100,9,"interpolate"],[77,22,100,0],[77,23,101,2,"input"],[77,28,100,0],[77,30,102,2,"inputMin"],[77,38,100,0],[77,40,103,2,"inputMax"],[77,48,100,0],[77,50,104,2,"outputMin"],[77,59,100,0],[77,61,105,2,"outputMax"],[77,70,100,0],[77,72,106,2,"easing"],[77,78,100,0],[77,80,107,2,"extrapolateLeft"],[77,95,100,0],[77,97,108,2,"extrapolateRight"],[77,113,100,0],[77,115,109,2],[78,0,110,2],[78,8,110,6,"result"],[78,17,110,15,"input"],[78,22,110,2],[80,0,113,2],[80,8,113,6,"result"],[80,17,113,15,"inputMin"],[80,25,113,2],[80,27,113,25],[81,0,114,4],[81,10,114,8,"extrapolateLeft"],[81,30,114,28],[81,40,114,4],[81,42,114,40],[82,0,115,6],[82,15,115,13,"result"],[82,21,115,6],[83,0,116,5],[83,7,114,4],[83,13,116,11],[83,17,116,15,"extrapolateLeft"],[83,37,116,35],[83,44,116,11],[83,46,116,44],[84,0,117,6,"result"],[84,17,117,15,"inputMin"],[84,25,117,6],[85,0,118,5],[85,7,116,11],[85,13,118,11],[85,17,118,15,"extrapolateLeft"],[85,37,118,35],[85,45,118,11],[85,47,118,45],[85,48,120,5],[86,0,121,3],[88,0,123,2],[88,8,123,6,"result"],[88,17,123,15,"inputMax"],[88,25,123,2],[88,27,123,25],[89,0,124,4],[89,10,124,8,"extrapolateRight"],[89,31,124,29],[89,41,124,4],[89,43,124,41],[90,0,125,6],[90,15,125,13,"result"],[90,21,125,6],[91,0,126,5],[91,7,124,4],[91,13,126,11],[91,17,126,15,"extrapolateRight"],[91,38,126,36],[91,45,126,11],[91,47,126,45],[92,0,127,6,"result"],[92,17,127,15,"inputMax"],[92,25,127,6],[93,0,128,5],[93,7,126,11],[93,13,128,11],[93,17,128,15,"extrapolateRight"],[93,38,128,36],[93,46,128,11],[93,48,128,46],[93,49,130,5],[94,0,131,3],[96,0,133,2],[96,8,133,6,"outputMin"],[96,22,133,20,"outputMax"],[96,31,133,2],[96,33,133,31],[97,0,134,4],[97,13,134,11,"outputMin"],[97,22,134,4],[98,0,135,3],[100,0,137,2],[100,8,137,6,"inputMin"],[100,21,137,19,"inputMax"],[100,29,137,2],[100,31,137,29],[101,0,138,4],[101,10,138,8,"input"],[101,19,138,17,"inputMin"],[101,27,138,4],[101,29,138,27],[102,0,139,6],[102,15,139,13,"outputMin"],[102,24,139,6],[103,0,140,5],[105,0,141,4],[105,13,141,11,"outputMax"],[105,22,141,4],[106,0,142,3],[108,0,145,2],[108,8,145,6,"inputMin"],[108,21,145,19],[108,22,145,20,"Infinity"],[108,30,145,2],[108,32,145,30],[109,0,146,4,"result"],[109,15,146,13],[109,16,146,14,"result"],[109,22,146,4],[110,0,147,3],[110,5,145,2],[110,11,147,9],[110,15,147,13,"inputMax"],[110,28,147,26,"Infinity"],[110,36,147,9],[110,38,147,36],[111,0,148,4,"result"],[111,15,148,13,"result"],[111,24,148,22,"inputMin"],[111,32,148,4],[112,0,149,3],[112,5,147,9],[112,11,149,9],[113,0,150,4,"result"],[113,15,150,13],[113,16,150,14,"result"],[113,25,150,23,"inputMin"],[113,33,150,13],[113,38,150,36,"inputMax"],[113,49,150,47,"inputMin"],[113,57,150,13],[113,58,150,4],[114,0,151,3],[116,0,154,2,"result"],[116,13,154,11,"easing"],[116,20,154,18,"result"],[116,26,154,11],[116,27,154,2],[118,0,157,2],[118,8,157,6,"outputMin"],[118,22,157,20],[118,23,157,21,"Infinity"],[118,31,157,2],[118,33,157,31],[119,0,158,4,"result"],[119,15,158,13],[119,16,158,14,"result"],[119,22,158,4],[120,0,159,3],[120,5,157,2],[120,11,159,9],[120,15,159,13,"outputMax"],[120,29,159,27,"Infinity"],[120,37,159,9],[120,39,159,37],[121,0,160,4,"result"],[121,15,160,13,"result"],[121,24,160,22,"outputMin"],[121,33,160,4],[122,0,161,3],[122,5,159,9],[122,11,161,9],[123,0,162,4,"result"],[123,15,162,13,"result"],[123,25,162,23,"outputMax"],[123,37,162,35,"outputMin"],[123,46,162,13],[123,50,162,48,"outputMin"],[123,59,162,4],[124,0,163,3],[126,0,165,2],[126,11,165,9,"result"],[126,17,165,2],[127,0,166,1],[129,0,168,0],[129,11,168,9,"colorToRgba"],[129,22,168,0],[129,23,168,21,"input"],[129,28,168,0],[129,30,168,44],[130,0,169,2],[130,8,169,6,"int32Color"],[130,21,169,19,"normalizeColor"],[130,36,169,34,"input"],[130,41,169,19],[130,42,169,2],[132,0,170,2],[132,8,170,6,"int32Color"],[132,23,170,21],[132,27,170,2],[132,29,170,27],[133,0,171,4],[133,13,171,11,"input"],[133,18,171,4],[134,0,172,3],[136,0,174,2,"int32Color"],[136,17,174,15,"int32Color"],[136,31,174,29],[136,32,174,2],[137,0,176,2],[137,8,176,8,"r"],[137,12,176,12],[137,13,176,13,"int32Color"],[137,26,176,26],[137,36,176,12],[137,42,176,42],[137,44,176,2],[138,0,177,2],[138,8,177,8,"g"],[138,12,177,12],[138,13,177,13,"int32Color"],[138,26,177,26],[138,36,177,12],[138,42,177,42],[138,44,177,2],[139,0,178,2],[139,8,178,8,"b"],[139,12,178,12],[139,13,178,13,"int32Color"],[139,26,178,26],[139,36,178,12],[139,42,178,42],[139,43,178,2],[140,0,179,2],[140,8,179,8,"a"],[140,12,179,12],[140,13,179,13,"int32Color"],[140,26,179,26],[140,36,179,12],[140,40,179,40],[140,43,179,2],[141,0,181,2],[141,21,181,17,"r"],[141,22,181,2],[141,32,181,23,"g"],[141,33,181,2],[141,43,181,29,"b"],[141,44,181,2],[141,54,181,35,"a"],[141,55,181,2],[142,0,182,1],[144,0,184,0],[144,6,184,6,"stringShapeRegex"],[144,25,184,25],[144,37,184,0],[146,0,194,0],[146,11,194,9,"createInterpolationFromStringOutputRange"],[146,51,194,0],[146,52,195,2,"config"],[146,58,194,0],[146,60,196,29],[147,0,197,2],[147,8,197,6,"outputRange"],[147,22,197,36,"config"],[147,29,197,43,"outputRange"],[147,40,197,2],[148,0,198,2,"invariant"],[148,14,198,12,"outputRange"],[148,26,198,24,"length"],[148,32,198,12],[148,36,198,34],[148,37,198,2],[148,39,198,37],[148,57,198,2],[149,0,199,2,"outputRange"],[149,18,199,16,"outputRange"],[149,30,199,28,"map"],[149,33,199,16],[149,34,199,32,"colorToRgba"],[149,45,199,16],[149,46,199,2],[150,0,200,2,"checkPattern"],[150,17,200,15,"outputRange"],[150,28,200,2],[151,0,213,2],[151,8,213,8,"outputRanges"],[151,23,213,23,"outputRange"],[151,35,213,35],[151,36,213,23],[151,38,213,38,"match"],[151,43,213,23],[151,44,213,44,"stringShapeRegex"],[151,60,213,23],[151,62,213,62,"map"],[151,65,213,23],[151,66,213,66],[152,0,213,66],[152,13,213,72],[152,15,213,66],[153,0,213,66],[153,5,213,23],[153,6,213,2],[154,0,214,2,"outputRange"],[154,16,214,14,"forEach"],[154,23,214,2],[154,24,214,22],[154,41,214,31],[155,0,218,4,"value"],[155,12,218,10,"match"],[155,17,218,4],[155,18,218,16,"stringShapeRegex"],[155,34,218,4],[155,36,218,34,"forEach"],[155,43,218,4],[155,44,218,42],[155,54,218,43,"number"],[155,60,218,42],[155,62,218,51,"i"],[155,63,218,42],[155,65,218,57],[156,0,219,6,"outputRanges"],[156,21,219,19,"i"],[156,22,219,6],[156,24,219,22,"push"],[156,28,219,6],[156,29,219,27],[156,30,219,28,"number"],[156,36,219,6],[157,0,220,5],[157,7,218,4],[158,0,221,3],[158,5,214,2],[159,0,226,2],[159,8,226,8,"interpolations"],[159,25,226,25,"outputRange"],[159,37,226,37],[159,38,226,25],[159,40,227,5,"match"],[159,45,226,25],[159,46,227,11,"stringShapeRegex"],[159,62,226,25],[159,64,228,5,"map"],[159,67,226,25],[159,68,228,9],[159,78,228,10,"value"],[159,83,228,9],[159,85,228,17,"i"],[159,86,228,9],[159,88,228,23],[160,0,229,6],[160,13,229,13,"createInterpolation"],[160,51,230,11,"config"],[160,57,229,13],[161,0,231,8,"outputRange"],[161,21,231,21,"outputRanges"],[161,34,231,34,"i"],[161,35,231,21],[162,0,229,13],[162,9,229,6],[163,0,233,5],[163,5,226,25],[163,6,226,2],[164,0,237,2],[164,8,237,8,"shouldRound"],[164,22,237,22,"isRgbOrRgba"],[164,34,237,34,"outputRange"],[164,46,237,46],[164,47,237,34],[164,48,237,22],[164,49,237,2],[165,0,239,2],[165,11,239,9],[165,28,239,18],[166,0,240,4],[166,10,240,8,"i"],[166,14,240,12],[166,15,240,4],[167,0,244,4],[167,13,244,11,"outputRange"],[167,25,244,23],[167,26,244,11],[167,28,244,26,"replace"],[167,35,244,11],[167,36,244,34,"stringShapeRegex"],[167,52,244,11],[167,54,244,52],[167,66,244,58],[168,0,245,6],[168,12,245,12,"val"],[168,18,245,18],[168,19,245,19,"interpolations"],[168,34,245,34,"i"],[168,37,245,19],[168,39,245,39,"input"],[168,44,245,19],[168,45,245,6],[169,0,246,6],[169,12,246,12,"rounded"],[169,22,247,8,"shouldRound"],[169,37,247,23,"i"],[169,41,247,27],[169,42,247,8],[169,45,247,31,"Math"],[169,50,247,36,"round"],[169,55,247,31],[169,56,247,42,"val"],[169,59,247,31],[169,60,247,8],[169,63,247,49,"Math"],[169,68,247,54,"round"],[169,73,247,49],[169,74,247,60,"val"],[169,80,247,66],[169,84,247,49],[169,88,247,74],[169,92,246,6],[170,0,248,6],[170,15,248,13,"String"],[170,22,248,20,"rounded"],[170,29,248,13],[170,30,248,6],[171,0,249,5],[171,7,244,11],[171,8,244,4],[172,0,250,3],[172,5,239,2],[173,0,251,1],[175,0,253,0],[175,11,253,9,"isRgbOrRgba"],[175,22,253,0],[175,23,253,21,"range"],[175,28,253,0],[175,30,253,28],[176,0,254,2],[176,11,254,9],[176,18,254,16,"range"],[176,23,254,9],[176,28,254,26],[176,36,254,9],[176,40,254,38,"range"],[176,46,254,44,"startsWith"],[176,56,254,38],[176,57,254,55],[176,62,254,38],[176,63,254,2],[177,0,255,1],[179,0,257,0],[179,11,257,9,"checkPattern"],[179,23,257,0],[179,24,257,22,"arr"],[179,27,257,0],[179,29,257,42],[180,0,258,2],[180,8,258,8,"pattern"],[180,18,258,18,"arr"],[180,22,258,22],[180,23,258,18],[180,25,258,25,"replace"],[180,32,258,18],[180,33,258,33,"stringShapeRegex"],[180,49,258,18],[180,51,258,51],[180,53,258,18],[180,54,258,2],[182,0,259,2],[182,9,259,7],[182,13,259,11,"i"],[182,17,259,15],[182,18,259,2],[182,20,259,18,"i"],[182,24,259,22,"arr"],[182,28,259,26,"length"],[182,34,259,2],[182,36,259,34],[182,38,259,36,"i"],[182,39,259,2],[182,41,259,39],[183,0,260,4,"invariant"],[183,16,261,6,"pattern"],[183,28,261,18,"arr"],[183,32,261,22,"i"],[183,33,261,18],[183,35,261,25,"replace"],[183,42,261,18],[183,43,261,33,"stringShapeRegex"],[183,59,261,18],[183,61,261,51],[183,63,261,18],[183,64,260,4],[183,66,262,6],[183,87,262,27,"arr"],[183,91,262,31],[183,92,262,27],[183,93,262,6],[183,96,262,36],[183,103,262,6],[183,106,262,46,"arr"],[183,110,262,50,"i"],[183,111,262,46],[183,112,260,4],[184,0,264,3],[185,0,265,1],[187,0,267,0],[187,11,267,9,"findRange"],[187,20,267,0],[187,21,267,19,"input"],[187,26,267,0],[187,28,267,34,"inputRange"],[187,38,267,0],[187,40,267,61],[188,0,268,2],[188,8,268,6,"i"],[188,9,268,2],[190,0,269,2],[190,9,269,7,"i"],[190,13,269,11],[190,14,269,2],[190,16,269,14,"i"],[190,20,269,18,"inputRange"],[190,31,269,29,"length"],[190,37,269,18],[190,40,269,38],[190,41,269,2],[190,43,269,41],[190,45,269,43,"i"],[190,46,269,2],[190,48,269,46],[191,0,270,4],[191,10,270,8,"inputRange"],[191,21,270,19,"i"],[191,22,270,8],[191,27,270,25,"input"],[191,32,270,4],[191,34,270,32],[192,0,271,6],[193,0,272,5],[194,0,273,3],[196,0,274,2],[196,11,274,9,"i"],[196,15,274,13],[196,16,274,2],[197,0,275,1],[199,0,277,0],[199,11,277,9,"checkValidInputRange"],[199,31,277,0],[199,32,277,30,"arr"],[199,35,277,0],[199,37,277,50],[200,0,278,2,"invariant"],[200,14,278,12,"arr"],[200,18,278,16,"length"],[200,24,278,12],[200,28,278,26],[200,29,278,2],[200,31,278,29],[200,73,278,2],[202,0,279,2],[202,9,279,7],[202,13,279,11,"i"],[202,17,279,15],[202,18,279,2],[202,20,279,18,"i"],[202,24,279,22,"arr"],[202,28,279,26,"length"],[202,34,279,2],[202,36,279,34],[202,38,279,36,"i"],[202,39,279,2],[202,41,279,39],[203,0,280,4,"invariant"],[203,16,281,6,"arr"],[203,20,281,10,"i"],[203,21,281,6],[203,26,281,16,"arr"],[203,30,281,20,"i"],[203,34,281,24],[203,35,281,16],[203,36,280,4],[203,38,288,6],[203,91,288,59,"arr"],[203,94,280,4],[204,0,290,3],[205,0,291,1],[207,0,293,0],[207,11,293,9,"checkInfiniteRange"],[207,29,293,0],[207,30,293,28,"name"],[207,34,293,0],[207,36,293,42,"arr"],[207,39,293,0],[207,41,293,62],[208,0,294,2,"invariant"],[208,14,294,12,"arr"],[208,18,294,16,"length"],[208,24,294,12],[208,28,294,26],[208,29,294,2],[208,31,294,29,"name"],[208,38,294,36],[208,70,294,2],[209,0,295,2,"invariant"],[209,14,296,4,"arr"],[209,18,296,8,"length"],[209,24,296,4],[209,29,296,19],[209,30,296,4],[209,34,296,24,"arr"],[209,38,296,28],[209,39,296,24],[209,45,296,35],[209,46,296,36,"Infinity"],[209,54,296,4],[209,58,296,48,"arr"],[209,62,296,52],[209,63,296,48],[209,69,296,59,"Infinity"],[209,77,295,2],[209,79,303,4,"name"],[209,86,303,11],[209,120,303,4],[209,123,303,48,"arr"],[209,126,295,2],[210,0,305,1],[212,6,307,6,"AnimatedInterpolation"],[212,27],[213,0,315,2],[213,35,315,14,"parent"],[213,41,315,2],[213,43,315,36,"config"],[213,49,315,2],[213,51,315,69],[214,0,315,69],[216,0,315,69],[218,0,316,4],[219,0,317,4],[219,12,317,9,"_parent"],[219,19,317,4],[219,22,317,19,"parent"],[219,28,317,4],[220,0,318,4],[220,12,318,9,"_config"],[220,19,318,4],[220,22,318,19,"config"],[220,28,318,4],[221,0,319,4],[221,12,319,9,"_interpolation"],[221,26,319,4],[221,29,319,26,"createInterpolation"],[221,49,319,46,"config"],[221,55,319,26],[221,56,319,4],[222,0,315,69],[223,0,320,3],[227,37,322,17],[228,0,323,4],[228,13,323,9,"_parent"],[228,20,323,4],[228,21,323,17,"__makeNative"],[228,33,323,4],[230,0,324,4],[231,0,325,3],[234,35,327,32],[235,0,328,4],[235,12,328,10,"parentValue"],[235,26,328,32],[235,31,328,37,"_parent"],[235,38,328,32],[235,39,328,45,"__getValue"],[235,49,328,32],[235,51,328,4],[237,0,329,4,"invariant"],[237,18,330,6],[237,25,330,13,"parentValue"],[237,36,330,6],[237,41,330,29],[237,49,329,4],[237,51,331,6],[237,103,329,4],[238,0,333,4],[238,15,333,11],[238,20,333,16,"_interpolation"],[238,34,333,11],[238,35,333,31,"parentValue"],[238,46,333,11],[238,47,333,4],[239,0,334,3],[242,34,336,14,"config"],[242,40],[242,42,336,70],[243,0,337,4],[243,15,337,11],[243,19,337,15,"AnimatedInterpolation"],[243,40,337,11],[243,41,337,37],[243,45,337,11],[243,47,337,43,"config"],[243,53,337,11],[243,54,337,4],[244,0,338,3],[247,33,340,19],[248,0,341,4],[248,13,341,9,"_parent"],[248,20,341,4],[248,21,341,17,"__addChild"],[248,31,341,4],[248,32,341,28],[248,36,341,4],[249,0,342,3],[252,33,344,19],[253,0,345,4],[253,13,345,9,"_parent"],[253,20,345,4],[253,21,345,17,"__removeChild"],[253,34,345,4],[253,35,345,31],[253,39,345,4],[255,0,346,4],[256,0,347,3],[259,42,349,22,"range"],[259,47],[259,49,349,41],[260,0,355,4],[260,15,355,11,"range"],[260,21,355,17,"map"],[260,24,355,11],[260,25,355,21],[260,35,355,30,"value"],[260,40,355,21],[260,42,355,37],[261,0,356,6],[261,14,356,10],[261,21,356,17,"value"],[261,26,356,10],[261,31,356,27],[261,39,356,6],[261,41,356,37],[262,0,357,8],[262,19,357,15,"value"],[262,24,357,8],[263,0,358,7],[265,0,359,6],[265,14,359,10],[265,21,359,17,"test"],[265,25,359,10],[265,26,359,22,"value"],[265,31,359,10],[265,32,359,6],[265,34,359,30],[266,0,360,8],[266,16,360,14,"degrees"],[266,26,360,24,"parseFloat"],[266,37,360,35,"value"],[266,42,360,24],[266,47,360,45],[266,48,360,8],[267,0,361,8],[267,16,361,14,"radians"],[267,26,361,25,"degrees"],[267,36,361,35,"Math"],[267,41,361,40,"PI"],[267,43,361,24],[267,46,361,46],[267,51,361,8],[268,0,362,8],[268,19,362,15,"radians"],[268,26,362,8],[269,0,363,7],[269,11,359,6],[269,17,363,13],[270,0,365,8],[270,19,365,15,"parseFloat"],[270,30,365,26,"value"],[270,35,365,15],[270,40,365,36],[270,41,365,8],[271,0,366,7],[272,0,367,5],[272,9,355,11],[272,10,355,4],[273,0,368,3],[276,42,370,27],[277,0,371,4],[277,12,371,8,"__DEV__"],[277,19,371,4],[277,21,371,17],[278,0,372,6,"NativeAnimatedHelper"],[278,31,372,27,"validateInterpolation"],[278,52,372,6],[278,53,372,49],[278,58,372,54,"_config"],[278,65,372,6],[279,0,373,5],[281,0,375,4],[281,15,375,11],[282,0,376,6,"inputRange"],[282,22,376,18],[282,27,376,23,"_config"],[282,34,376,18],[282,35,376,31,"inputRange"],[282,45,375,11],[283,0,378,6,"outputRange"],[283,23,378,19],[283,28,378,24,"__transformDataType"],[283,47,378,19],[283,48,378,44],[283,53,378,49,"_config"],[283,60,378,44],[283,61,378,57,"outputRange"],[283,72,378,19],[283,73,375,11],[284,0,379,6,"extrapolateLeft"],[284,27,380,8],[284,32,380,13,"_config"],[284,39,380,8],[284,40,380,21,"extrapolateLeft"],[284,55,380,8],[284,59,380,40],[284,64,380,45,"_config"],[284,71,380,40],[284,72,380,53,"extrapolate"],[284,83,380,8],[284,87,380,68],[284,95,375,11],[285,0,381,6,"extrapolateRight"],[285,28,382,8],[285,33,382,13,"_config"],[285,40,382,8],[285,41,382,21,"extrapolateRight"],[285,57,382,8],[285,61,382,41],[285,66,382,46,"_config"],[285,73,382,41],[285,74,382,54,"extrapolate"],[285,85,382,8],[285,89,382,69],[285,97,375,11],[286,0,383,6,"type"],[286,16,383,12],[287,0,375,11],[287,9,375,4],[288,0,385,3],[294,4,307,36,"AnimatedWithChildren"],[294,24],[296,0,307,6,"AnimatedInterpolation"],[296,23],[296,24,309,9,"__createInterpolation"],[296,45],[296,48,309,33,"createInterpolation"],[296,67],[297,0,388,0,"module"],[297,9,388,7,"exports"],[297,16,388,0],[297,19,388,17,"AnimatedInterpolation"],[297,40,388,0]]},"type":"js/module"}]}