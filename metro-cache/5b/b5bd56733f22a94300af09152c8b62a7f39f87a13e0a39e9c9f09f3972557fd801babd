{"dependencies":[{"name":"React","isAsync":false},{"name":"Text","isAsync":false},{"name":"UTFSequence","isAsync":false},{"name":"stringifySafe","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _jsxFileName = \"/home/laksh/reactNativeNavigation/navigationTask/node_modules/react-native/Libraries/YellowBox/Data/YellowBoxCategory.js\";\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if ((typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  var React = _$$_REQUIRE(_dependencyMap[0], 'React');\n\n  var Text = _$$_REQUIRE(_dependencyMap[1], 'Text');\n\n  var UTFSequence = _$$_REQUIRE(_dependencyMap[2], 'UTFSequence');\n\n  var stringifySafe = _$$_REQUIRE(_dependencyMap[3], 'stringifySafe');\n\n  var SUBSTITUTION = UTFSequence.BOM + '%s';\n  var YellowBoxCategory = {\n    parse: function parse(args) {\n      var categoryParts = [];\n      var contentParts = [];\n      var substitutionOffsets = [];\n\n      var remaining = _toConsumableArray(args);\n\n      if (typeof remaining[0] === 'string') {\n        var formatString = String(remaining.shift());\n        var formatStringParts = formatString.split('%s');\n        var substitutionCount = formatStringParts.length - 1;\n\n        var _substitutions = remaining.splice(0, substitutionCount);\n\n        var categoryString = '';\n        var contentString = '';\n        var substitutionIndex = 0;\n\n        for (var _iterator = formatStringParts, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var _formatStringPart = _ref;\n          categoryString += _formatStringPart;\n          contentString += _formatStringPart;\n\n          if (substitutionIndex < substitutionCount) {\n            if (substitutionIndex < _substitutions.length) {\n              var substitution = stringifySafe(_substitutions[substitutionIndex]);\n              substitutionOffsets.push({\n                length: substitution.length,\n                offset: contentString.length\n              });\n              categoryString += SUBSTITUTION;\n              contentString += substitution;\n            } else {\n              substitutionOffsets.push({\n                length: 2,\n                offset: contentString.length\n              });\n              categoryString += '%s';\n              contentString += '%s';\n            }\n\n            substitutionIndex++;\n          }\n        }\n\n        categoryParts.push(categoryString);\n        contentParts.push(contentString);\n      }\n\n      var remainingArgs = remaining.map(stringifySafe);\n      categoryParts.push.apply(categoryParts, _toConsumableArray(remainingArgs));\n      contentParts.push.apply(contentParts, _toConsumableArray(remainingArgs));\n      return {\n        category: categoryParts.join(' '),\n        message: {\n          content: contentParts.join(' '),\n          substitutions: substitutionOffsets\n        }\n      };\n    },\n    render: function render(_ref2, substitutionStyle) {\n      var content = _ref2.content,\n          substitutions = _ref2.substitutions;\n      var elements = [];\n      var lastOffset = substitutions.reduce(function (prevOffset, substitution, index) {\n        var key = String(index);\n\n        if (substitution.offset > prevOffset) {\n          var prevPart = content.substr(prevOffset, substitution.offset - prevOffset);\n          elements.push(React.createElement(Text, {\n            key: key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            }\n          }, prevPart));\n        }\n\n        var substititionPart = content.substr(substitution.offset, substitution.length);\n        elements.push(React.createElement(Text, {\n          key: key + '.5',\n          style: substitutionStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          }\n        }, substititionPart));\n        return substitution.offset + substitution.length;\n      }, 0);\n\n      if (lastOffset < content.length - 1) {\n        var lastPart = content.substr(lastOffset);\n        elements.push(React.createElement(Text, {\n          key: \"-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          }\n        }, lastPart));\n      }\n\n      return elements;\n    }\n  };\n  module.exports = YellowBoxCategory;\n});","map":[[2,0,11,0],[14,0,13,0],[14,6,13,6,"React"],[14,14,13,14,"require"],[14,45,13,22],[14,52,13,14],[14,53,13,0],[16,0,14,0],[16,6,14,6,"Text"],[16,13,14,13,"require"],[16,44,14,21],[16,50,14,13],[16,51,14,0],[18,0,15,0],[18,6,15,6,"UTFSequence"],[18,20,15,20,"require"],[18,51,15,28],[18,64,15,20],[18,65,15,0],[20,0,17,0],[20,6,17,6,"stringifySafe"],[20,22,17,22,"require"],[20,53,17,30],[20,68,17,22],[20,69,17,0],[22,0,32,0],[22,6,32,6,"SUBSTITUTION"],[22,21,32,21,"UTFSequence"],[22,33,32,33,"BOM"],[22,36,32,21],[22,39,32,39],[22,43,32,0],[23,0,34,0],[23,6,34,6,"YellowBoxCategory"],[23,26,34,26],[24,0,35,2,"parse"],[24,9,34,26],[24,26,36,4,"args"],[24,30,34,26],[24,32,40,6],[25,0,41,4],[25,10,41,10,"categoryParts"],[25,26,41,26],[25,28,41,4],[26,0,42,4],[26,10,42,10,"contentParts"],[26,25,42,25],[26,27,42,4],[27,0,43,4],[27,10,43,10,"substitutionOffsets"],[27,32,43,32],[27,34,43,4],[29,0,45,4],[29,10,45,10,"remaining"],[29,41,45,26,"args"],[29,45,45,10],[29,46,45,4],[31,0,47,4],[31,10,47,8],[31,17,47,15,"remaining"],[31,27,47,25],[31,28,47,15],[31,29,47,8],[31,34,47,32],[31,42,47,4],[31,44,47,42],[32,0,48,6],[32,12,48,12,"formatString"],[32,27,48,27,"String"],[32,34,48,34,"remaining"],[32,44,48,44,"shift"],[32,49,48,34],[32,51,48,27],[32,52,48,6],[33,0,49,6],[33,12,49,12,"formatStringParts"],[33,32,49,32,"formatString"],[33,45,49,45,"split"],[33,50,49,32],[33,51,49,51],[33,55,49,32],[33,56,49,6],[34,0,50,6],[34,12,50,12,"substitutionCount"],[34,32,50,32,"formatStringParts"],[34,50,50,50,"length"],[34,56,50,32],[34,59,50,59],[34,60,50,6],[36,0,51,6],[36,12,51,12,"substitutions"],[36,29,51,28,"remaining"],[36,39,51,38,"splice"],[36,45,51,28],[36,46,51,45],[36,47,51,28],[36,49,51,48,"substitutionCount"],[36,66,51,28],[36,67,51,6],[38,0,53,6],[38,12,53,10,"categoryString"],[38,29,53,27],[38,31,53,6],[39,0,54,6],[39,12,54,10,"contentString"],[39,28,54,26],[39,30,54,6],[40,0,56,6],[40,12,56,10,"substitutionIndex"],[40,32,56,30],[40,33,56,6],[42,0,57,6],[42,29,57,37,"formatStringParts"],[42,46,57,6],[42,206,57,56],[43,0,57,56],[45,0,57,56],[46,0,57,56],[47,0,57,56],[48,0,57,56],[49,0,57,56],[50,0,57,56],[51,0,57,56],[52,0,57,56],[54,0,57,56],[54,14,57,17,"formatStringPart"],[54,31,57,56],[55,0,58,8,"categoryString"],[55,28,58,26,"formatStringPart"],[55,45,58,8],[56,0,59,8,"contentString"],[56,27,59,25,"formatStringPart"],[56,44,59,8],[58,0,61,8],[58,14,61,12,"substitutionIndex"],[58,34,61,32,"substitutionCount"],[58,51,61,8],[58,53,61,51],[59,0,62,10],[59,16,62,14,"substitutionIndex"],[59,36,62,34,"substitutions"],[59,51,62,48,"length"],[59,57,62,10],[59,59,62,56],[60,0,63,12],[60,18,63,18,"substitution"],[60,33,63,33,"stringifySafe"],[60,47,64,14,"substitutions"],[60,62,64,28,"substitutionIndex"],[60,79,64,14],[60,80,63,33],[60,81,63,12],[61,0,66,12,"substitutionOffsets"],[61,34,66,32,"push"],[61,38,66,12],[61,39,66,37],[62,0,67,14,"length"],[62,24,67,22,"substitution"],[62,37,67,35,"length"],[62,43,66,37],[63,0,68,14,"offset"],[63,24,68,22,"contentString"],[63,38,68,36,"length"],[64,0,66,37],[64,15,66,12],[65,0,71,12,"categoryString"],[65,32,71,30,"SUBSTITUTION"],[65,44,71,12],[66,0,72,12,"contentString"],[66,31,72,29,"substitution"],[66,43,72,12],[67,0,73,11],[67,13,62,10],[67,19,73,17],[68,0,74,12,"substitutionOffsets"],[68,34,74,32,"push"],[68,38,74,12],[68,39,74,37],[69,0,75,14,"length"],[69,24,75,22],[69,25,74,37],[70,0,76,14,"offset"],[70,24,76,22,"contentString"],[70,38,76,36,"length"],[71,0,74,37],[71,15,74,12],[72,0,79,12,"categoryString"],[72,32,79,30],[72,36,79,12],[73,0,80,12,"contentString"],[73,31,80,29],[73,35,80,12],[74,0,81,11],[76,0,83,10,"substitutionIndex"],[77,0,84,9],[78,0,85,7],[80,0,87,6,"categoryParts"],[80,22,87,20,"push"],[80,26,87,6],[80,27,87,25,"categoryString"],[80,41,87,6],[81,0,88,6,"contentParts"],[81,21,88,19,"push"],[81,25,88,6],[81,26,88,24,"contentString"],[81,39,88,6],[82,0,89,5],[84,0,91,4],[84,10,91,10,"remainingArgs"],[84,26,91,26,"remaining"],[84,36,91,36,"map"],[84,39,91,26],[84,40,91,40,"stringifySafe"],[84,53,91,26],[84,54,91,4],[85,0,92,4,"categoryParts"],[85,20,92,18,"push"],[85,24,92,4],[85,65,92,26,"remainingArgs"],[85,78,92,4],[86,0,93,4,"contentParts"],[86,19,93,17,"push"],[86,23,93,4],[86,63,93,25,"remainingArgs"],[86,76,93,4],[87,0,95,4],[87,13,95,11],[88,0,96,6,"category"],[88,18,96,16,"categoryParts"],[88,32,96,30,"join"],[88,36,96,16],[88,37,96,35],[88,40,96,16],[88,41,95,11],[89,0,97,6,"message"],[89,17,97,15],[90,0,98,8,"content"],[90,19,98,17,"contentParts"],[90,32,98,30,"join"],[90,36,98,17],[90,37,98,35],[90,40,98,17],[90,41,97,15],[91,0,99,8,"substitutions"],[91,25,99,23,"substitutionOffsets"],[92,0,97,15],[93,0,95,11],[93,7,95,4],[94,0,102,3],[94,5,34,26],[95,0,104,2,"render"],[95,10,34,26],[95,35,106,4,"substitutionStyle"],[95,52,34,26],[95,54,107,16],[96,0,107,16],[96,10,105,5,"content"],[96,17,107,16],[96,26,105,5,"content"],[96,33,107,16],[97,0,107,16],[97,10,105,14,"substitutions"],[97,23,107,16],[97,32,105,14,"substitutions"],[97,45,107,16],[98,0,108,4],[98,10,108,10,"elements"],[98,21,108,21],[98,23,108,4],[99,0,110,4],[99,10,110,10,"lastOffset"],[99,23,110,23,"substitutions"],[99,37,110,37,"reduce"],[99,43,110,23],[99,44,111,6],[99,54,111,7,"prevOffset"],[99,64,111,6],[99,66,111,19,"substitution"],[99,78,111,6],[99,80,111,33,"index"],[99,85,111,6],[99,87,111,43],[100,0,112,8],[100,12,112,14,"key"],[100,18,112,20,"String"],[100,25,112,27,"index"],[100,30,112,20],[100,31,112,8],[102,0,114,8],[102,12,114,12,"substitution"],[102,25,114,25,"offset"],[102,31,114,12],[102,34,114,34,"prevOffset"],[102,44,114,8],[102,46,114,46],[103,0,115,10],[103,14,115,16,"prevPart"],[103,25,115,27,"content"],[103,33,115,35,"substr"],[103,39,115,27],[103,40,116,12,"prevOffset"],[103,50,115,27],[103,52,117,12,"substitution"],[103,65,117,25,"offset"],[103,71,117,12],[103,74,117,34,"prevOffset"],[103,84,115,27],[103,85,115,10],[104,0,119,10,"elements"],[104,19,119,19,"push"],[104,23,119,10],[104,24,119,24],[104,44,119,25],[104,48,119,24],[105,0,119,30],[105,17,119,35,"key"],[105,20,119,24],[106,0,119,24],[107,0,119,24],[108,0,119,24],[109,0,119,24],[110,0,119,24],[110,13,119,41,"prevPart"],[110,21,119,24],[110,22,119,10],[111,0,120,9],[113,0,122,8],[113,12,122,14,"substititionPart"],[113,31,122,33,"content"],[113,39,122,41,"substr"],[113,45,122,33],[113,46,123,10,"substitution"],[113,59,123,23,"offset"],[113,65,122,33],[113,67,124,10,"substitution"],[113,80,124,23,"length"],[113,86,122,33],[113,87,122,8],[114,0,126,8,"elements"],[114,17,126,17,"push"],[114,21,126,8],[114,22,127,10],[114,42,127,11],[114,46,127,10],[115,0,127,16],[115,15,127,21,"key"],[115,21,127,27],[115,25,127,10],[116,0,127,33],[116,17,127,40,"substitutionStyle"],[116,34,127,10],[117,0,127,10],[118,0,127,10],[119,0,127,10],[120,0,127,10],[121,0,127,10],[121,11,128,13,"substititionPart"],[121,27,127,10],[121,28,126,8],[122,0,132,8],[122,15,132,15,"substitution"],[122,28,132,28,"offset"],[122,34,132,15],[122,37,132,37,"substitution"],[122,50,132,50,"length"],[122,56,132,8],[123,0,133,7],[123,7,110,23],[123,9,134,6],[123,10,110,23],[123,11,110,4],[125,0,137,4],[125,10,137,8,"lastOffset"],[125,23,137,21,"content"],[125,31,137,29,"length"],[125,37,137,21],[125,40,137,38],[125,41,137,4],[125,43,137,41],[126,0,138,6],[126,12,138,12,"lastPart"],[126,23,138,23,"content"],[126,31,138,31,"substr"],[126,37,138,23],[126,38,138,38,"lastOffset"],[126,48,138,23],[126,49,138,6],[127,0,139,6,"elements"],[127,17,139,15,"push"],[127,21,139,6],[127,22,139,20],[127,42,139,21],[127,46,139,20],[128,0,139,26],[128,15,139,30],[128,19,139,20],[129,0,139,20],[130,0,139,20],[131,0,139,20],[132,0,139,20],[133,0,139,20],[133,11,139,36,"lastPart"],[133,19,139,20],[133,20,139,6],[134,0,140,5],[136,0,142,4],[136,13,142,11,"elements"],[136,21,142,4],[137,0,143,3],[138,0,34,26],[138,3,34,0],[139,0,146,0,"module"],[139,9,146,7,"exports"],[139,16,146,0],[139,19,146,17,"YellowBoxCategory"],[139,36,146,0]]},"type":"js/module"}]}