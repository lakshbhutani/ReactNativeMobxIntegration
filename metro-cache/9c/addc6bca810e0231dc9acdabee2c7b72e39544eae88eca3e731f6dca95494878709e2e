{"dependencies":[{"name":"Map","isAsync":false},{"name":"_shouldPolyfillES6Collection","isAsync":false},{"name":"toIterator","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  'use strict';\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  var Map = _$$_REQUIRE(_dependencyMap[0], 'Map');\n\n  var _shouldPolyfillES6Collection = _$$_REQUIRE(_dependencyMap[1], '_shouldPolyfillES6Collection');\n\n  var toIterator = _$$_REQUIRE(_dependencyMap[2], 'toIterator');\n\n  module.exports = function (global) {\n    if (!_shouldPolyfillES6Collection('Set')) {\n      return global.Set;\n    }\n\n    var Set = function () {\n      function Set(iterable) {\n        _classCallCheck(this, Set);\n\n        if (this == null || typeof this !== 'object' && typeof this !== 'function') {\n          throw new TypeError('Wrong set object type.');\n        }\n\n        initSet(this);\n\n        if (iterable != null) {\n          var it = toIterator(iterable);\n          var next;\n\n          while (!(next = it.next()).done) {\n            this.add(next.value);\n          }\n        }\n      }\n\n      _createClass(Set, [{\n        key: \"add\",\n        value: function add(value) {\n          this._map.set(value, value);\n\n          this.size = this._map.size;\n          return this;\n        }\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          initSet(this);\n        }\n      }, {\n        key: \"delete\",\n        value: function _delete(value) {\n          var ret = this._map.delete(value);\n\n          this.size = this._map.size;\n          return ret;\n        }\n      }, {\n        key: \"entries\",\n        value: function entries() {\n          return this._map.entries();\n        }\n      }, {\n        key: \"forEach\",\n        value: function forEach(callback) {\n          var thisArg = arguments[1];\n\n          var it = this._map.keys();\n\n          var next;\n\n          while (!(next = it.next()).done) {\n            callback.call(thisArg, next.value, next.value, this);\n          }\n        }\n      }, {\n        key: \"has\",\n        value: function has(value) {\n          return this._map.has(value);\n        }\n      }, {\n        key: \"values\",\n        value: function values() {\n          return this._map.values();\n        }\n      }]);\n\n      return Set;\n    }();\n\n    Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;\n    Set.prototype.keys = Set.prototype.values;\n\n    function initSet(set) {\n      set._map = new Map();\n      set.size = set._map.size;\n    }\n\n    return Set;\n  }(Function('return this')());\n});","map":[[2,0,14,0],[10,0,16,0],[10,6,16,6,"Map"],[10,12,16,12,"require"],[10,43,16,20],[10,48,16,12],[10,49,16,0],[12,0,18,0],[12,6,18,6,"_shouldPolyfillES6Collection"],[12,37,18,37,"require"],[12,68,18,45],[12,98,18,37],[12,99,18,0],[14,0,19,0],[14,6,19,6,"toIterator"],[14,19,19,19,"require"],[14,50,19,27],[14,62,19,19],[14,63,19,0],[16,0,21,0,"module"],[16,9,21,7,"exports"],[16,16,21,0],[16,19,21,18],[16,29,21,27,"global"],[16,35,21,18],[16,37,21,35],[17,0,27,2],[17,8,27,6],[17,9,27,7,"_shouldPolyfillES6Collection"],[17,38,27,36],[17,43,27,7],[17,44,27,2],[17,46,27,44],[18,0,28,4],[18,13,28,11,"global"],[18,20,28,18,"Set"],[18,23,28,4],[19,0,29,3],[21,0,21,35],[21,8,72,8,"Set"],[21,11,21,35],[22,0,82,4],[22,19,82,16,"iterable"],[22,27,82,4],[22,29,82,26],[23,0,82,26],[25,0,83,6],[25,12,84,8],[25,20,84,16],[25,24,84,8],[25,28,85,9],[25,35,85,16],[25,39,85,9],[25,44,85,25],[25,52,85,9],[25,56,85,37],[25,63,85,44],[25,67,85,37],[25,72,85,53],[25,82,83,6],[25,84,86,8],[26,0,87,8],[26,16,87,14],[26,20,87,18,"TypeError"],[26,29,87,14],[26,30,87,28],[26,54,87,14],[26,55,87,8],[27,0,88,7],[29,0,90,6,"initSet"],[29,16,90,14],[29,20,90,6],[31,0,92,6],[31,12,92,10,"iterable"],[31,24,92,22],[31,28,92,6],[31,30,92,28],[32,0,93,8],[32,14,93,14,"it"],[32,19,93,19,"toIterator"],[32,30,93,30,"iterable"],[32,38,93,19],[32,39,93,8],[33,0,94,8],[33,14,94,12,"next"],[33,18,94,8],[35,0,95,8],[35,17,95,15],[35,18,95,16],[35,19,95,17,"next"],[35,26,95,24,"it"],[35,29,95,27,"next"],[35,33,95,24],[35,35,95,16],[35,37,95,35,"done"],[35,41,95,8],[35,43,95,41],[36,0,96,10],[36,17,96,15,"add"],[36,20,96,10],[36,21,96,19,"next"],[36,26,96,24,"value"],[36,31,96,10],[37,0,97,9],[38,0,98,7],[39,0,99,5],[41,0,21,35],[42,0,21,35],[43,0,21,35],[43,28,109,8,"value"],[43,33,21,35],[43,35,109,15],[44,0,110,6],[44,15,110,11,"_map"],[44,19,110,6],[44,20,110,16,"set"],[44,23,110,6],[44,24,110,20,"value"],[44,29,110,6],[44,31,110,27,"value"],[44,36,110,6],[46,0,111,6],[46,15,111,11,"size"],[46,19,111,6],[46,22,111,18],[46,27,111,23,"_map"],[46,31,111,18],[46,32,111,28,"size"],[46,36,111,6],[47,0,112,6],[47,17,112,13],[47,21,112,6],[48,0,113,5],[49,0,21,35],[50,0,21,35],[51,0,21,35],[51,32,120,12],[52,0,121,6,"initSet"],[52,18,121,14],[52,22,121,6],[53,0,122,5],[54,0,21,35],[55,0,21,35],[56,0,21,35],[56,32,133,11,"value"],[56,37,21,35],[56,39,133,18],[57,0,134,6],[57,14,134,12,"ret"],[57,20,134,18],[57,25,134,23,"_map"],[57,29,134,18],[57,30,134,28,"delete"],[57,36,134,18],[57,37,134,35,"value"],[57,42,134,18],[57,43,134,6],[59,0,135,6],[59,15,135,11,"size"],[59,19,135,6],[59,22,135,18],[59,27,135,23,"_map"],[59,31,135,18],[59,32,135,28,"size"],[59,36,135,6],[60,0,136,6],[60,17,136,13,"ret"],[60,20,136,6],[61,0,137,5],[62,0,21,35],[63,0,21,35],[64,0,21,35],[64,34,144,14],[65,0,145,6],[65,17,145,13],[65,22,145,18,"_map"],[65,26,145,13],[65,27,145,23,"entries"],[65,34,145,13],[65,36,145,6],[66,0,146,5],[67,0,21,35],[68,0,21,35],[69,0,21,35],[69,32,155,12,"callback"],[69,40,21,35],[69,42,155,22],[70,0,156,6],[70,14,156,12,"thisArg"],[70,24,156,22,"arguments"],[70,34,156,32],[70,35,156,22],[70,36,156,6],[72,0,157,6],[72,14,157,12,"it"],[72,19,157,17],[72,24,157,22,"_map"],[72,28,157,17],[72,29,157,27,"keys"],[72,33,157,17],[72,35,157,6],[74,0,158,6],[74,14,158,10,"next"],[74,18,158,6],[76,0,159,6],[76,17,159,13],[76,18,159,14],[76,19,159,15,"next"],[76,26,159,22,"it"],[76,29,159,25,"next"],[76,33,159,22],[76,35,159,14],[76,37,159,33,"done"],[76,41,159,6],[76,43,159,39],[77,0,160,8,"callback"],[77,21,160,17,"call"],[77,25,160,8],[77,26,160,22,"thisArg"],[77,33,160,8],[77,35,160,31,"next"],[77,40,160,36,"value"],[77,45,160,8],[77,47,160,43,"next"],[77,52,160,48,"value"],[77,57,160,8],[77,59,160,55],[77,63,160,8],[78,0,161,7],[79,0,162,5],[80,0,21,35],[81,0,21,35],[82,0,21,35],[82,28,172,8,"value"],[82,33,21,35],[82,35,172,15],[83,0,173,6],[83,17,173,13],[83,22,173,18,"_map"],[83,26,173,13],[83,27,173,23,"has"],[83,30,173,13],[83,31,173,27,"value"],[83,36,173,13],[83,37,173,6],[84,0,174,5],[85,0,21,35],[86,0,21,35],[87,0,21,35],[87,33,181,13],[88,0,182,6],[88,17,182,13],[88,22,182,18,"_map"],[88,26,182,13],[88,27,182,23,"values"],[88,33,182,13],[88,35,182,6],[89,0,183,5],[90,0,21,35],[92,0,21,35],[93,0,21,35],[95,0,187,2,"Set"],[95,8,187,6,"prototype"],[95,17,187,2],[95,18,187,16,"toIterator"],[95,29,187,27,"ITERATOR_SYMBOL"],[95,44,187,2],[95,48,187,46,"Set"],[95,52,187,50,"prototype"],[95,61,187,46],[95,62,187,60,"values"],[95,68,187,2],[96,0,190,2,"Set"],[96,8,190,6,"prototype"],[96,17,190,2],[96,18,190,16,"keys"],[96,22,190,2],[96,25,190,23,"Set"],[96,29,190,27,"prototype"],[96,38,190,23],[96,39,190,37,"values"],[96,45,190,2],[98,0,192,2],[98,13,192,11,"initSet"],[98,20,192,2],[98,21,192,19,"set"],[98,24,192,2],[98,26,192,24],[99,0,193,4,"set"],[99,10,193,8,"_map"],[99,14,193,4],[99,17,193,15],[99,21,193,19,"Map"],[99,24,193,15],[99,26,193,4],[100,0,194,4,"set"],[100,10,194,8,"size"],[100,14,194,4],[100,17,194,15,"set"],[100,21,194,19,"_map"],[100,25,194,15],[100,26,194,24,"size"],[100,30,194,4],[101,0,195,3],[103,0,197,2],[103,11,197,9,"Set"],[103,14,197,2],[104,0,198,1],[104,3,21,17],[104,4,198,3,"Function"],[104,13,198,12],[104,26,198,3],[104,29,21,17],[104,30,21,0]]},"type":"js/module"}]}