{"dependencies":[{"name":"ErrorUtils","isAsync":false},{"name":"Systrace","isAsync":false},{"name":"deepFreezeAndThrowOnMutationInDev","isAsync":false},{"name":"fbjs/lib/invariant","isAsync":false},{"name":"stringifySafe","isAsync":false},{"name":"JSTimers","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  'use strict';\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if ((typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  var ErrorUtils = _$$_REQUIRE(_dependencyMap[0], 'ErrorUtils');\n\n  var Systrace = _$$_REQUIRE(_dependencyMap[1], 'Systrace');\n\n  var deepFreezeAndThrowOnMutationInDev = _$$_REQUIRE(_dependencyMap[2], 'deepFreezeAndThrowOnMutationInDev');\n\n  var invariant = _$$_REQUIRE(_dependencyMap[3], 'fbjs/lib/invariant');\n\n  var stringifySafe = _$$_REQUIRE(_dependencyMap[4], 'stringifySafe');\n\n  var TO_JS = 0;\n  var TO_NATIVE = 1;\n  var MODULE_IDS = 0;\n  var METHOD_IDS = 1;\n  var PARAMS = 2;\n  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;\n  var TRACE_TAG_REACT_APPS = 1 << 17;\n  var DEBUG_INFO_LIMIT = 32;\n  var JSTimers = null;\n\n  var MessageQueue = function () {\n    function MessageQueue() {\n      _classCallCheck(this, MessageQueue);\n\n      this._lazyCallableModules = {};\n      this._queue = [[], [], [], 0];\n      this._successCallbacks = {};\n      this._failureCallbacks = {};\n      this._callID = 0;\n      this._lastFlush = 0;\n      this._eventLoopStartTime = new Date().getTime();\n\n      if (__DEV__) {\n        this._debugInfo = {};\n        this._remoteModuleTable = {};\n        this._remoteMethodTable = {};\n      }\n\n      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);\n      this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);\n      this.flushedQueue = this.flushedQueue.bind(this);\n      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);\n    }\n\n    _createClass(MessageQueue, [{\n      key: \"callFunctionReturnFlushedQueue\",\n      value: function callFunctionReturnFlushedQueue(module, method, args) {\n        var _this = this;\n\n        this.__guard(function () {\n          _this.__callFunction(module, method, args);\n        });\n\n        return this.flushedQueue();\n      }\n    }, {\n      key: \"callFunctionReturnResultAndFlushedQueue\",\n      value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {\n        var _this2 = this;\n\n        var result;\n\n        this.__guard(function () {\n          result = _this2.__callFunction(module, method, args);\n        });\n\n        return [result, this.flushedQueue()];\n      }\n    }, {\n      key: \"invokeCallbackAndReturnFlushedQueue\",\n      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {\n        var _this3 = this;\n\n        this.__guard(function () {\n          _this3.__invokeCallback(cbID, args);\n        });\n\n        return this.flushedQueue();\n      }\n    }, {\n      key: \"flushedQueue\",\n      value: function flushedQueue() {\n        var _this4 = this;\n\n        this.__guard(function () {\n          _this4.__callImmediates();\n        });\n\n        var queue = this._queue;\n        this._queue = [[], [], [], this._callID];\n        return queue[0].length ? queue : null;\n      }\n    }, {\n      key: \"getEventLoopRunningTime\",\n      value: function getEventLoopRunningTime() {\n        return new Date().getTime() - this._eventLoopStartTime;\n      }\n    }, {\n      key: \"registerCallableModule\",\n      value: function registerCallableModule(name, module) {\n        this._lazyCallableModules[name] = function () {\n          return module;\n        };\n      }\n    }, {\n      key: \"registerLazyCallableModule\",\n      value: function registerLazyCallableModule(name, factory) {\n        var module;\n        var getValue = factory;\n\n        this._lazyCallableModules[name] = function () {\n          if (getValue) {\n            module = getValue();\n            getValue = null;\n          }\n\n          return module;\n        };\n      }\n    }, {\n      key: \"getCallableModule\",\n      value: function getCallableModule(name) {\n        var getValue = this._lazyCallableModules[name];\n        return getValue ? getValue() : null;\n      }\n    }, {\n      key: \"enqueueNativeCall\",\n      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {\n        if (onFail || onSucc) {\n          if (__DEV__) {\n            this._debugInfo[this._callID] = [moduleID, methodID];\n\n            if (this._callID > DEBUG_INFO_LIMIT) {\n              delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];\n            }\n          }\n\n          onFail && params.push(this._callID << 1);\n          onSucc && params.push(this._callID << 1 | 1);\n          this._successCallbacks[this._callID] = onSucc;\n          this._failureCallbacks[this._callID] = onFail;\n        }\n\n        if (__DEV__) {\n          global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);\n        }\n\n        this._callID++;\n\n        this._queue[MODULE_IDS].push(moduleID);\n\n        this._queue[METHOD_IDS].push(methodID);\n\n        if (__DEV__) {\n          var isValidArgument = function isValidArgument(val) {\n            var t = typeof val;\n\n            if (t === 'undefined' || t === 'null' || t === 'boolean' || t === 'number' || t === 'string') {\n              return true;\n            }\n\n            if (t === 'function' || t !== 'object') {\n              return false;\n            }\n\n            if (Array.isArray(val)) {\n              return val.every(isValidArgument);\n            }\n\n            for (var k in val) {\n              if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {\n                return false;\n              }\n            }\n\n            return true;\n          };\n\n          invariant(isValidArgument(params), '%s is not usable as a native method argument', params);\n          deepFreezeAndThrowOnMutationInDev(params);\n        }\n\n        this._queue[PARAMS].push(params);\n\n        var now = new Date().getTime();\n\n        if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {\n          var queue = this._queue;\n          this._queue = [[], [], [], this._callID];\n          this._lastFlush = now;\n          global.nativeFlushQueueImmediate(queue);\n        }\n\n        Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);\n\n        if (__DEV__ && this.__spy && isFinite(moduleID)) {\n          this.__spy({\n            type: TO_NATIVE,\n            module: this._remoteModuleTable[moduleID],\n            method: this._remoteMethodTable[moduleID][methodID],\n            args: params\n          });\n        } else if (this.__spy) {\n          this.__spy({\n            type: TO_NATIVE,\n            module: moduleID + '',\n            method: methodID,\n            args: params\n          });\n        }\n      }\n    }, {\n      key: \"createDebugLookup\",\n      value: function createDebugLookup(moduleID, name, methods) {\n        if (__DEV__) {\n          this._remoteModuleTable[moduleID] = name;\n          this._remoteMethodTable[moduleID] = methods;\n        }\n      }\n    }, {\n      key: \"__guard\",\n      value: function __guard(fn) {\n        if (this.__shouldPauseOnThrow()) {\n          fn();\n        } else {\n          try {\n            fn();\n          } catch (error) {\n            ErrorUtils.reportFatalError(error);\n          }\n        }\n      }\n    }, {\n      key: \"__shouldPauseOnThrow\",\n      value: function __shouldPauseOnThrow() {\n        return typeof DebuggerInternal !== 'undefined' && DebuggerInternal.shouldPauseOnThrow === true;\n      }\n    }, {\n      key: \"__callImmediates\",\n      value: function __callImmediates() {\n        Systrace.beginEvent('JSTimers.callImmediates()');\n\n        if (!JSTimers) {\n          JSTimers = _$$_REQUIRE(_dependencyMap[5], 'JSTimers');\n        }\n\n        JSTimers.callImmediates();\n        Systrace.endEvent();\n      }\n    }, {\n      key: \"__callFunction\",\n      value: function __callFunction(module, method, args) {\n        this._lastFlush = new Date().getTime();\n        this._eventLoopStartTime = this._lastFlush;\n\n        if (__DEV__ || this.__spy) {\n          Systrace.beginEvent(module + \".\" + method + \"(\" + stringifySafe(args) + \")\");\n        } else {\n          Systrace.beginEvent(module + \".\" + method + \"(...)\");\n        }\n\n        if (this.__spy) {\n          this.__spy({\n            type: TO_JS,\n            module: module,\n            method: method,\n            args: args\n          });\n        }\n\n        var moduleMethods = this.getCallableModule(module);\n        invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);\n        invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);\n        var result = moduleMethods[method].apply(moduleMethods, args);\n        Systrace.endEvent();\n        return result;\n      }\n    }, {\n      key: \"__invokeCallback\",\n      value: function __invokeCallback(cbID, args) {\n        this._lastFlush = new Date().getTime();\n        this._eventLoopStartTime = this._lastFlush;\n        var callID = cbID >>> 1;\n        var isSuccess = cbID & 1;\n        var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];\n\n        if (__DEV__) {\n          var debug = this._debugInfo[callID];\n\n          var _module = debug && this._remoteModuleTable[debug[0]];\n\n          var _method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n\n          if (!callback) {\n            var errorMessage = \"Callback with id \" + cbID + \": \" + _module + \".\" + _method + \"() not found\";\n\n            if (_method) {\n              errorMessage = \"The callback \" + _method + \"() exists in module \" + _module + \", \" + 'but only one callback may be registered to a function in a native module.';\n            }\n\n            invariant(callback, errorMessage);\n          }\n\n          var profileName = debug ? '<callback for ' + _module + '.' + _method + '>' : cbID;\n\n          if (callback && this.__spy) {\n            this.__spy({\n              type: TO_JS,\n              module: null,\n              method: profileName,\n              args: args\n            });\n          }\n\n          Systrace.beginEvent(\"MessageQueue.invokeCallback(\" + profileName + \", \" + stringifySafe(args) + \")\");\n        }\n\n        if (!callback) {\n          return;\n        }\n\n        delete this._successCallbacks[callID];\n        delete this._failureCallbacks[callID];\n        callback.apply(void 0, _toConsumableArray(args));\n\n        if (__DEV__) {\n          Systrace.endEvent();\n        }\n      }\n    }], [{\n      key: \"spy\",\n      value: function spy(spyOrToggle) {\n        if (spyOrToggle === true) {\n          MessageQueue.prototype.__spy = function (info) {\n            console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + \" : \" + (\"\" + (info.module ? info.module + '.' : '') + info.method) + (\"(\" + JSON.stringify(info.args) + \")\"));\n          };\n        } else if (spyOrToggle === false) {\n          MessageQueue.prototype.__spy = null;\n        } else {\n          MessageQueue.prototype.__spy = spyOrToggle;\n        }\n      }\n    }]);\n\n    return MessageQueue;\n  }();\n\n  module.exports = MessageQueue;\n});","map":[[2,0,11,0],[18,0,13,0],[18,6,13,6,"ErrorUtils"],[18,19,13,19,"require"],[18,50,13,27],[18,62,13,19],[18,63,13,0],[20,0,14,0],[20,6,14,6,"Systrace"],[20,17,14,17,"require"],[20,48,14,25],[20,58,14,17],[20,59,14,0],[22,0,16,0],[22,6,16,6,"deepFreezeAndThrowOnMutationInDev"],[22,42,16,42,"require"],[22,73,16,50],[22,108,16,42],[22,109,16,0],[24,0,17,0],[24,6,17,6,"invariant"],[24,18,17,18,"require"],[24,49,17,26],[24,69,17,18],[24,70,17,0],[26,0,18,0],[26,6,18,6,"stringifySafe"],[26,22,18,22,"require"],[26,53,18,30],[26,68,18,22],[26,69,18,0],[28,0,27,0],[28,6,27,6,"TO_JS"],[28,14,27,14],[28,15,27,0],[29,0,28,0],[29,6,28,6,"TO_NATIVE"],[29,18,28,18],[29,19,28,0],[30,0,30,0],[30,6,30,6,"MODULE_IDS"],[30,19,30,19],[30,20,30,0],[31,0,31,0],[31,6,31,6,"METHOD_IDS"],[31,19,31,19],[31,20,31,0],[32,0,32,0],[32,6,32,6,"PARAMS"],[32,15,32,15],[32,16,32,0],[33,0,33,0],[33,6,33,6,"MIN_TIME_BETWEEN_FLUSHES_MS"],[33,36,33,36],[33,37,33,0],[34,0,36,0],[34,6,36,6,"TRACE_TAG_REACT_APPS"],[34,29,36,29],[34,34,36,34],[34,36,36,0],[35,0,38,0],[35,6,38,6,"DEBUG_INFO_LIMIT"],[35,25,38,25],[35,27,38,0],[36,0,41,0],[36,6,41,4,"JSTimers"],[36,17,41,15],[36,21,41,0],[38,6,43,6,"MessageQueue"],[38,18],[39,0,58,2],[39,28,58,16],[40,0,58,16],[42,0,59,4],[42,11,59,9,"_lazyCallableModules"],[42,31,59,4],[42,34,59,32],[42,36,59,4],[43,0,60,4],[43,11,60,9,"_queue"],[43,17,60,4],[43,20,60,18],[43,21,60,19],[43,23,60,18],[43,25,60,23],[43,27,60,18],[43,29,60,27],[43,31,60,18],[43,33,60,31],[43,34,60,18],[43,35,60,4],[44,0,61,4],[44,11,61,9,"_successCallbacks"],[44,28,61,4],[44,31,61,29],[44,33,61,4],[45,0,62,4],[45,11,62,9,"_failureCallbacks"],[45,28,62,4],[45,31,62,29],[45,33,62,4],[46,0,63,4],[46,11,63,9,"_callID"],[46,18,63,4],[46,21,63,19],[46,22,63,4],[47,0,64,4],[47,11,64,9,"_lastFlush"],[47,21,64,4],[47,24,64,22],[47,25,64,4],[48,0,65,4],[48,11,65,9,"_eventLoopStartTime"],[48,30,65,4],[48,33,65,31],[48,37,65,35,"Date"],[48,41,65,31],[48,44,65,42,"getTime"],[48,51,65,31],[48,53,65,4],[50,0,67,4],[50,10,67,8,"__DEV__"],[50,17,67,4],[50,19,67,17],[51,0,68,6],[51,13,68,11,"_debugInfo"],[51,23,68,6],[51,26,68,24],[51,28,68,6],[52,0,69,6],[52,13,69,11,"_remoteModuleTable"],[52,31,69,6],[52,34,69,32],[52,36,69,6],[53,0,70,6],[53,13,70,11,"_remoteMethodTable"],[53,31,70,6],[53,34,70,32],[53,36,70,6],[54,0,71,5],[56,0,73,5],[56,10,73,4],[56,11,73,16,"callFunctionReturnFlushedQueue"],[56,41,73,4],[56,44,73,49],[56,49,73,54,"callFunctionReturnFlushedQueue"],[56,79,73,49],[56,80,73,85,"bind"],[56,84,73,49],[56,85,74,6],[56,89,73,49],[56,90,73,4],[57,0,76,5],[57,10,76,4],[57,11,76,16,"callFunctionReturnResultAndFlushedQueue"],[57,50,76,4],[57,53,76,58],[57,58,76,63,"callFunctionReturnResultAndFlushedQueue"],[57,97,76,58],[57,98,76,103,"bind"],[57,102,76,58],[57,103,77,6],[57,107,76,58],[57,108,76,4],[58,0,79,5],[58,10,79,4],[58,11,79,16,"flushedQueue"],[58,23,79,4],[58,26,79,31],[58,31,79,36,"flushedQueue"],[58,43,79,31],[58,44,79,49,"bind"],[58,48,79,31],[58,49,79,54],[58,53,79,31],[58,54,79,4],[59,0,80,5],[59,10,80,4],[59,11,80,16,"invokeCallbackAndReturnFlushedQueue"],[59,46,80,4],[59,49,80,54],[59,54,80,59,"invokeCallbackAndReturnFlushedQueue"],[59,89,80,54],[59,90,80,95,"bind"],[59,94,80,54],[59,95,81,6],[59,99,80,54],[59,100,80,4],[60,0,83,3],[64,53,105,33,"module"],[64,59],[64,61,105,49,"method"],[64,67],[64,69,105,65,"args"],[64,73],[64,75,105,78],[65,0,105,78],[67,0,106,4],[67,13,106,9,"__guard"],[67,20,106,4],[67,21,106,17],[67,33,106,23],[68,0,107,6],[68,16,107,11,"__callFunction"],[68,30,107,6],[68,31,107,26,"module"],[68,37,107,6],[68,39,107,34,"method"],[68,45,107,6],[68,47,107,42,"args"],[68,51,107,6],[69,0,108,5],[69,9,106,4],[71,0,110,4],[71,15,110,11],[71,20,110,16,"flushedQueue"],[71,32,110,11],[71,34,110,4],[72,0,111,3],[75,62,114,4,"module"],[75,68],[75,70,115,4,"method"],[75,76],[75,78,116,4,"args"],[75,82],[75,84,117,4],[76,0,117,4],[78,0,118,4],[78,12,118,8,"result"],[78,18,118,4],[80,0,119,4],[80,13,119,9,"__guard"],[80,20,119,4],[80,21,119,17],[80,33,119,23],[81,0,120,6,"result"],[81,19,120,15],[81,26,120,20,"__callFunction"],[81,40,120,15],[81,41,120,35,"module"],[81,47,120,15],[81,49,120,43,"method"],[81,55,120,15],[81,57,120,51,"args"],[81,61,120,15],[81,62,120,6],[82,0,121,5],[82,9,119,4],[84,0,123,4],[84,15,123,11],[84,16,123,12,"result"],[84,22,123,11],[84,24,123,20],[84,29,123,25,"flushedQueue"],[84,41,123,20],[84,43,123,11],[84,44,123,4],[85,0,124,3],[88,58,126,38,"cbID"],[88,62],[88,64,126,52,"args"],[88,68],[88,70,126,65],[89,0,126,65],[91,0,127,4],[91,13,127,9,"__guard"],[91,20,127,4],[91,21,127,17],[91,33,127,23],[92,0,128,6],[92,17,128,11,"__invokeCallback"],[92,33,128,6],[92,34,128,28,"cbID"],[92,38,128,6],[92,40,128,34,"args"],[92,44,128,6],[93,0,129,5],[93,9,127,4],[95,0,131,4],[95,15,131,11],[95,20,131,16,"flushedQueue"],[95,32,131,11],[95,34,131,4],[96,0,132,3],[99,37,134,17],[100,0,134,17],[102,0,135,4],[102,13,135,9,"__guard"],[102,20,135,4],[102,21,135,17],[102,33,135,23],[103,0,136,6],[103,17,136,11,"__callImmediates"],[103,33,136,6],[104,0,137,5],[104,9,135,4],[106,0,139,4],[106,12,139,10,"queue"],[106,20,139,18],[106,25,139,23,"_queue"],[106,31,139,4],[107,0,140,4],[107,13,140,9,"_queue"],[107,19,140,4],[107,22,140,18],[107,23,140,19],[107,25,140,18],[107,27,140,23],[107,29,140,18],[107,31,140,27],[107,33,140,18],[107,35,140,31],[107,40,140,36,"_callID"],[107,47,140,18],[107,48,140,4],[108,0,141,4],[108,15,141,11,"queue"],[108,21,141,17],[108,22,141,11],[108,24,141,20,"length"],[108,30,141,11],[108,33,141,29,"queue"],[108,38,141,11],[108,41,141,37],[108,45,141,4],[109,0,142,3],[112,48,144,28],[113,0,145,4],[113,15,145,11],[113,19,145,15,"Date"],[113,23,145,11],[113,26,145,22,"getTime"],[113,33,145,11],[113,38,145,34],[113,43,145,39,"_eventLoopStartTime"],[113,62,145,4],[114,0,146,3],[117,45,148,25,"name"],[117,49],[117,51,148,39,"module"],[117,57],[117,59,148,55],[118,0,149,4],[118,13,149,9,"_lazyCallableModules"],[118,33,149,4],[118,34,149,30,"name"],[118,38,149,4],[118,42,149,38],[119,0,149,38],[119,17,149,44,"module"],[119,23,149,38],[120,0,149,38],[120,9,149,4],[121,0,150,3],[124,49,152,29,"name"],[124,53],[124,55,152,43,"factory"],[124,62],[124,64,152,68],[125,0,153,4],[125,12,153,8,"module"],[125,18,153,4],[126,0,154,4],[126,12,154,8,"getValue"],[126,23,154,38,"factory"],[126,30,154,4],[128,0,155,4],[128,13,155,9,"_lazyCallableModules"],[128,33,155,4],[128,34,155,30,"name"],[128,38,155,4],[128,42,155,38],[128,54,155,44],[129,0,156,6],[129,14,156,10,"getValue"],[129,22,156,6],[129,24,156,20],[130,0,157,8,"module"],[130,21,157,17,"getValue"],[130,31,157,8],[131,0,158,8,"getValue"],[131,23,158,19],[131,27,158,8],[132,0,159,7],[134,0,160,6],[134,17,160,13,"module"],[134,23,160,6],[135,0,161,5],[135,9,155,4],[136,0,162,3],[139,40,164,20,"name"],[139,44],[139,46,164,34],[140,0,165,4],[140,12,165,10,"getValue"],[140,23,165,21],[140,28,165,26,"_lazyCallableModules"],[140,48,165,21],[140,49,165,47,"name"],[140,53,165,21],[140,54,165,4],[141,0,166,4],[141,15,166,11,"getValue"],[141,26,166,22,"getValue"],[141,36,166,11],[141,39,166,35],[141,43,166,4],[142,0,167,3],[145,40,170,4,"moduleID"],[145,48],[145,50,171,4,"methodID"],[145,58],[145,60,172,4,"params"],[145,66],[145,68,173,4,"onFail"],[145,74],[145,76,174,4,"onSucc"],[145,82],[145,84,175,4],[146,0,176,4],[146,12,176,8,"onFail"],[146,22,176,18,"onSucc"],[146,28,176,4],[146,30,176,26],[147,0,177,6],[147,14,177,10,"__DEV__"],[147,21,177,6],[147,23,177,19],[148,0,178,8],[148,17,178,13,"_debugInfo"],[148,27,178,8],[148,28,178,24],[148,33,178,29,"_callID"],[148,40,178,8],[148,44,178,40],[148,45,178,41,"moduleID"],[148,53,178,40],[148,55,178,51,"methodID"],[148,63,178,40],[148,64,178,8],[150,0,179,8],[150,16,179,12],[150,21,179,17,"_callID"],[150,28,179,12],[150,31,179,27,"DEBUG_INFO_LIMIT"],[150,47,179,8],[150,49,179,45],[151,0,180,10],[151,21,180,17],[151,26,180,22,"_debugInfo"],[151,36,180,17],[151,37,180,33],[151,42,180,38,"_callID"],[151,49,180,33],[151,52,180,48,"DEBUG_INFO_LIMIT"],[151,68,180,17],[151,69,180,10],[152,0,181,9],[153,0,182,7],[155,0,186,6,"onFail"],[155,20,186,16,"params"],[155,27,186,23,"push"],[155,31,186,16],[155,32,186,28],[155,37,186,33,"_callID"],[155,44,186,28],[155,48,186,44],[155,49,186,16],[155,50,186,6],[156,0,188,6,"onSucc"],[156,20,188,16,"params"],[156,27,188,23,"push"],[156,31,188,16],[156,32,188,29],[156,37,188,34,"_callID"],[156,44,188,29],[156,48,188,45],[156,49,188,28],[156,52,188,50],[156,53,188,16],[156,54,188,6],[157,0,189,6],[157,15,189,11,"_successCallbacks"],[157,32,189,6],[157,33,189,29],[157,38,189,34,"_callID"],[157,45,189,6],[157,49,189,45,"onSucc"],[157,55,189,6],[158,0,190,6],[158,15,190,11,"_failureCallbacks"],[158,32,190,6],[158,33,190,29],[158,38,190,34,"_callID"],[158,45,190,6],[158,49,190,45,"onFail"],[158,55,190,6],[159,0,191,5],[161,0,193,4],[161,12,193,8,"__DEV__"],[161,19,193,4],[161,21,193,17],[162,0,194,6,"global"],[162,17,194,13,"nativeTraceBeginAsyncFlow"],[162,42,194,6],[162,46,195,8,"global"],[162,53,195,15,"nativeTraceBeginAsyncFlow"],[162,78,195,8],[162,79,196,10,"TRACE_TAG_REACT_APPS"],[162,99,195,8],[162,101,197,10],[162,109,195,8],[162,111,198,10],[162,116,198,15,"_callID"],[162,123,195,8],[162,124,194,6],[163,0,200,5],[165,0,201,4],[165,13,201,9,"_callID"],[165,20,201,4],[167,0,203,4],[167,13,203,9,"_queue"],[167,19,203,4],[167,20,203,16,"MODULE_IDS"],[167,30,203,4],[167,32,203,28,"push"],[167,36,203,4],[167,37,203,33,"moduleID"],[167,45,203,4],[169,0,204,4],[169,13,204,9,"_queue"],[169,19,204,4],[169,20,204,16,"METHOD_IDS"],[169,30,204,4],[169,32,204,28,"push"],[169,36,204,4],[169,37,204,33,"methodID"],[169,45,204,4],[171,0,206,4],[171,12,206,8,"__DEV__"],[171,19,206,4],[171,21,206,17],[172,0,211,6],[172,14,211,12,"isValidArgument"],[172,32,211,30],[172,41,211,12,"isValidArgument"],[172,56,211,30],[172,62,211,37],[173,0,212,8],[173,16,212,14,"t"],[173,20,212,18],[173,27,212,25,"val"],[173,30,212,8],[175,0,213,8],[175,16,214,10,"t"],[175,22,214,16],[175,33,214,10],[175,37,215,10,"t"],[175,43,215,16],[175,49,214,10],[175,53,216,10,"t"],[175,59,216,16],[175,68,214,10],[175,72,217,10,"t"],[175,78,217,16],[175,86,214,10],[175,90,218,10,"t"],[175,96,218,16],[175,104,213,8],[175,106,219,10],[176,0,220,10],[176,21,220,17],[176,25,220,10],[177,0,221,9],[179,0,222,8],[179,16,222,12,"t"],[179,22,222,18],[179,32,222,12],[179,36,222,32,"t"],[179,42,222,38],[179,50,222,8],[179,52,222,48],[180,0,223,10],[180,21,223,17],[180,26,223,10],[181,0,224,9],[183,0,225,8],[183,16,225,12,"Array"],[183,22,225,18,"isArray"],[183,29,225,12],[183,30,225,26,"val"],[183,33,225,12],[183,34,225,8],[183,36,225,32],[184,0,226,10],[184,21,226,17,"val"],[184,25,226,21,"every"],[184,30,226,17],[184,31,226,27,"isValidArgument"],[184,46,226,17],[184,47,226,10],[185,0,227,9],[187,0,228,8],[187,17,228,13],[187,21,228,19,"k"],[187,22,228,8],[187,26,228,24,"val"],[187,29,228,8],[187,31,228,29],[188,0,229,10],[188,18,229,14],[188,25,229,21,"val"],[188,29,229,25,"k"],[188,30,229,21],[188,31,229,14],[188,36,229,32],[188,46,229,14],[188,50,229,46],[188,51,229,47,"isValidArgument"],[188,67,229,63,"val"],[188,71,229,67,"k"],[188,72,229,63],[188,73,229,47],[188,74,229,10],[188,76,229,72],[189,0,230,12],[189,23,230,19],[189,28,230,12],[190,0,231,11],[191,0,232,9],[193,0,233,8],[193,19,233,15],[193,23,233,8],[194,0,234,7],[194,11,211,6],[196,0,236,6,"invariant"],[196,20,237,8,"isValidArgument"],[196,36,237,24,"params"],[196,42,237,8],[196,43,236,6],[196,45,238,8],[196,91,236,6],[196,93,239,8,"params"],[196,99,236,6],[197,0,243,6,"deepFreezeAndThrowOnMutationInDev"],[197,44,243,41,"params"],[197,50,243,6],[198,0,244,5],[200,0,245,4],[200,13,245,9,"_queue"],[200,19,245,4],[200,20,245,16,"PARAMS"],[200,26,245,4],[200,28,245,24,"push"],[200,32,245,4],[200,33,245,29,"params"],[200,39,245,4],[202,0,247,4],[202,12,247,10,"now"],[202,18,247,16],[202,22,247,20,"Date"],[202,26,247,16],[202,29,247,27,"getTime"],[202,36,247,16],[202,38,247,4],[204,0,248,4],[204,12,249,6,"global"],[204,19,249,13,"nativeFlushQueueImmediate"],[204,44,249,6],[204,48,250,6,"now"],[204,54,250,12],[204,59,250,17,"_lastFlush"],[204,69,250,6],[204,73,250,31,"MIN_TIME_BETWEEN_FLUSHES_MS"],[204,100,248,4],[204,102,251,6],[205,0,252,6],[205,14,252,12,"queue"],[205,22,252,20],[205,27,252,25,"_queue"],[205,33,252,6],[206,0,253,6],[206,15,253,11,"_queue"],[206,21,253,6],[206,24,253,20],[206,25,253,21],[206,27,253,20],[206,29,253,25],[206,31,253,20],[206,33,253,29],[206,35,253,20],[206,37,253,33],[206,42,253,38,"_callID"],[206,49,253,20],[206,50,253,6],[207,0,254,6],[207,15,254,11,"_lastFlush"],[207,25,254,6],[207,28,254,24,"now"],[207,31,254,6],[208,0,255,6,"global"],[208,17,255,13,"nativeFlushQueueImmediate"],[208,42,255,6],[208,43,255,39,"queue"],[208,48,255,6],[209,0,256,5],[211,0,257,4,"Systrace"],[211,17,257,13,"counterEvent"],[211,29,257,4],[211,30,257,26],[211,58,257,4],[211,60,257,56],[211,65,257,61,"_queue"],[211,71,257,56],[211,72,257,68],[211,73,257,56],[211,75,257,71,"length"],[211,81,257,4],[213,0,258,4],[213,12,258,8,"__DEV__"],[213,23,258,19],[213,28,258,24,"__spy"],[213,33,258,8],[213,37,258,33,"isFinite"],[213,46,258,42,"moduleID"],[213,54,258,33],[213,55,258,4],[213,57,258,53],[214,0,259,6],[214,15,259,11,"__spy"],[214,20,259,6],[214,21,259,17],[215,0,260,8,"type"],[215,18,260,14,"TO_NATIVE"],[215,27,259,17],[216,0,261,8,"module"],[216,20,261,16],[216,25,261,21,"_remoteModuleTable"],[216,43,261,16],[216,44,261,40,"moduleID"],[216,52,261,16],[216,53,259,17],[217,0,262,8,"method"],[217,20,262,16],[217,25,262,21,"_remoteMethodTable"],[217,43,262,16],[217,44,262,40,"moduleID"],[217,52,262,16],[217,54,262,50,"methodID"],[217,62,262,16],[217,63,259,17],[218,0,263,8,"args"],[218,18,263,14,"params"],[219,0,259,17],[219,11,259,6],[220,0,265,5],[220,9,258,4],[220,15,265,11],[220,19,265,15],[220,24,265,20,"__spy"],[220,29,265,11],[220,31,265,27],[221,0,266,6],[221,15,266,11,"__spy"],[221,20,266,6],[221,21,266,17],[222,0,267,8,"type"],[222,18,267,14,"TO_NATIVE"],[222,27,266,17],[223,0,268,8,"module"],[223,20,268,16,"moduleID"],[223,31,268,27],[223,33,266,17],[224,0,269,8,"method"],[224,20,269,16,"methodID"],[224,28,266,17],[225,0,270,8,"args"],[225,18,270,14,"params"],[226,0,266,17],[226,11,266,6],[227,0,272,5],[228,0,273,3],[231,40,275,20,"moduleID"],[231,48],[231,50,275,38,"name"],[231,54],[231,56,275,52,"methods"],[231,63],[231,65,275,71],[232,0,276,4],[232,12,276,8,"__DEV__"],[232,19,276,4],[232,21,276,17],[233,0,277,6],[233,15,277,11,"_remoteModuleTable"],[233,33,277,6],[233,34,277,30,"moduleID"],[233,42,277,6],[233,46,277,42,"name"],[233,50,277,6],[234,0,278,6],[234,15,278,11,"_remoteMethodTable"],[234,33,278,6],[234,34,278,30,"moduleID"],[234,42,278,6],[234,46,278,42,"methods"],[234,53,278,6],[235,0,279,5],[236,0,280,3],[239,30,286,10,"fn"],[239,32],[239,34,286,26],[240,0,287,4],[240,12,287,8],[240,17,287,13,"__shouldPauseOnThrow"],[240,37,287,8],[240,39,287,4],[240,41,287,37],[241,0,288,6,"fn"],[242,0,289,5],[242,9,287,4],[242,15,289,11],[243,0,290,6],[243,14,290,10],[244,0,291,8,"fn"],[245,0,292,7],[245,11,290,6],[245,12,292,8],[245,19,292,15,"error"],[245,24,292,8],[245,26,292,22],[246,0,293,8,"ErrorUtils"],[246,23,293,19,"reportFatalError"],[246,39,293,8],[246,40,293,36,"error"],[246,45,293,8],[247,0,294,7],[248,0,295,5],[249,0,296,3],[252,45,303,25],[253,0,304,4],[253,15,306,6],[253,22,306,13,"DebuggerInternal"],[253,38,306,6],[253,43,306,34],[253,54,306,6],[253,58,307,6,"DebuggerInternal"],[253,75,307,23,"shouldPauseOnThrow"],[253,93,307,6],[253,98,307,46],[253,102,304,4],[254,0,309,3],[257,41,311,21],[258,0,312,4,"Systrace"],[258,17,312,13,"beginEvent"],[258,27,312,4],[258,28,312,24],[258,55,312,4],[260,0,313,4],[260,12,313,8],[260,13,313,9,"JSTimers"],[260,21,313,4],[260,23,313,19],[261,0,314,6,"JSTimers"],[261,21,314,17,"require"],[261,52,314,25],[261,62,314,17],[261,63,314,6],[262,0,315,5],[264,0,316,4,"JSTimers"],[264,17,316,13,"callImmediates"],[264,31,316,4],[265,0,317,4,"Systrace"],[265,17,317,13,"endEvent"],[265,25,317,4],[266,0,318,3],[269,37,320,17,"module"],[269,43],[269,45,320,33,"method"],[269,51],[269,53,320,49,"args"],[269,57],[269,59,320,67],[270,0,321,4],[270,13,321,9,"_lastFlush"],[270,23,321,4],[270,26,321,22],[270,30,321,26,"Date"],[270,34,321,22],[270,37,321,33,"getTime"],[270,44,321,22],[270,46,321,4],[271,0,322,4],[271,13,322,9,"_eventLoopStartTime"],[271,32,322,4],[271,35,322,31],[271,40,322,36,"_lastFlush"],[271,50,322,4],[273,0,323,4],[273,12,323,8,"__DEV__"],[273,23,323,19],[273,28,323,24,"__spy"],[273,33,323,4],[273,35,323,31],[274,0,324,6,"Systrace"],[274,19,324,15,"beginEvent"],[274,29,324,6],[274,30,324,29,"module"],[274,36,324,6],[274,45,324,39,"method"],[274,51,324,6],[274,60,324,49,"stringifySafe"],[274,74,324,63,"args"],[274,78,324,49],[274,79,324,6],[275,0,325,5],[275,9,323,4],[275,15,325,11],[276,0,326,6,"Systrace"],[276,19,326,15,"beginEvent"],[276,29,326,6],[276,30,326,29,"module"],[276,36,326,6],[276,45,326,39,"method"],[276,51,326,6],[277,0,327,5],[279,0,328,4],[279,12,328,8],[279,17,328,13,"__spy"],[279,22,328,4],[279,24,328,20],[280,0,329,6],[280,15,329,11,"__spy"],[280,20,329,6],[280,21,329,17],[281,0,329,18,"type"],[281,18,329,24,"TO_JS"],[281,23,329,17],[282,0,329,31,"module"],[282,26,329,17],[283,0,329,39,"method"],[283,26,329,17],[284,0,329,47,"args"],[285,0,329,17],[285,11,329,6],[286,0,330,5],[288,0,331,4],[288,12,331,10,"moduleMethods"],[288,28,331,26],[288,33,331,31,"getCallableModule"],[288,50,331,26],[288,51,331,49,"module"],[288,57,331,26],[288,58,331,4],[289,0,332,4,"invariant"],[289,18,333,6],[289,19,333,7],[289,20,333,8,"moduleMethods"],[289,33,332,4],[289,35,334,6],[289,95,332,4],[289,97,335,6,"module"],[289,103,332,4],[289,105,336,6,"method"],[289,111,332,4],[290,0,338,4,"invariant"],[290,18,339,6],[290,19,339,7],[290,20,339,8,"moduleMethods"],[290,34,339,22,"method"],[290,40,339,8],[290,41,338,4],[290,43,340,6],[290,82,338,4],[290,84,341,6,"method"],[290,90,338,4],[290,92,342,6,"module"],[290,98,338,4],[291,0,344,4],[291,12,344,10,"result"],[291,21,344,19,"moduleMethods"],[291,35,344,33,"method"],[291,41,344,19],[291,43,344,41,"apply"],[291,48,344,19],[291,49,344,47,"moduleMethods"],[291,62,344,19],[291,64,344,62,"args"],[291,68,344,19],[291,69,344,4],[292,0,345,4,"Systrace"],[292,17,345,13,"endEvent"],[292,25,345,4],[293,0,346,4],[293,15,346,11,"result"],[293,21,346,4],[294,0,347,3],[297,39,349,19,"cbID"],[297,43],[297,45,349,33,"args"],[297,49],[297,51,349,46],[298,0,350,4],[298,13,350,9,"_lastFlush"],[298,23,350,4],[298,26,350,22],[298,30,350,26,"Date"],[298,34,350,22],[298,37,350,33,"getTime"],[298,44,350,22],[298,46,350,4],[299,0,351,4],[299,13,351,9,"_eventLoopStartTime"],[299,32,351,4],[299,35,351,31],[299,40,351,36,"_lastFlush"],[299,50,351,4],[300,0,355,4],[300,12,355,10,"callID"],[300,21,355,19,"cbID"],[300,30,355,28],[300,31,355,4],[301,0,357,4],[301,12,357,10,"isSuccess"],[301,24,357,22,"cbID"],[301,31,357,29],[301,32,357,4],[302,0,358,4],[302,12,358,10,"callback"],[302,23,358,21,"isSuccess"],[302,35,359,8],[302,40,359,13,"_successCallbacks"],[302,57,359,8],[302,58,359,31,"callID"],[302,64,359,8],[302,65,358,21],[302,68,360,8],[302,73,360,13,"_failureCallbacks"],[302,90,360,8],[302,91,360,31,"callID"],[302,97,360,8],[302,98,358,4],[304,0,362,4],[304,12,362,8,"__DEV__"],[304,19,362,4],[304,21,362,17],[305,0,363,6],[305,14,363,12,"debug"],[305,22,363,20],[305,27,363,25,"_debugInfo"],[305,37,363,20],[305,38,363,36,"callID"],[305,44,363,20],[305,45,363,6],[307,0,364,6],[307,14,364,12,"module"],[307,24,364,21,"debug"],[307,33,364,30],[307,38,364,35,"_remoteModuleTable"],[307,56,364,30],[307,57,364,54,"debug"],[307,63,364,60],[307,64,364,54],[307,65,364,30],[307,66,364,6],[309,0,365,6],[309,14,365,12,"method"],[309,24,365,21,"debug"],[309,33,365,30],[309,38,365,35,"_remoteMethodTable"],[309,56,365,30],[309,57,365,54,"debug"],[309,63,365,60],[309,64,365,54],[309,65,365,30],[309,67,365,64,"debug"],[309,73,365,70],[309,74,365,64],[309,75,365,30],[309,76,365,6],[311,0,366,6],[311,14,366,10],[311,15,366,11,"callback"],[311,23,366,6],[311,25,366,21],[312,0,367,8],[312,16,367,12,"errorMessage"],[312,53,367,47,"cbID"],[312,57,367,12],[312,67,367,56,"module"],[312,74,367,12],[312,83,367,66,"method"],[312,90,367,12],[312,107,367,8],[314,0,368,8],[314,16,368,12,"method"],[314,23,368,8],[314,25,368,20],[315,0,369,10,"errorMessage"],[315,29,370,12],[315,47,370,28,"method"],[315,54,370,12],[315,82,370,57,"module"],[315,89,370,12],[315,99,371,12],[315,174,369,10],[316,0,372,9],[318,0,373,8,"invariant"],[318,22,373,18,"callback"],[318,30,373,8],[318,32,373,28,"errorMessage"],[318,44,373,8],[319,0,374,7],[321,0,375,6],[321,14,375,12,"profileName"],[321,28,375,26,"debug"],[321,36,376,10],[321,55,376,29,"module"],[321,62,376,10],[321,65,376,38],[321,68,376,10],[321,71,376,44,"method"],[321,78,376,10],[321,81,376,53],[321,84,375,26],[321,87,377,10,"cbID"],[321,91,375,6],[323,0,378,6],[323,14,378,10,"callback"],[323,26,378,22],[323,31,378,27,"__spy"],[323,36,378,6],[323,38,378,34],[324,0,379,8],[324,17,379,13,"__spy"],[324,22,379,8],[324,23,379,19],[325,0,379,20,"type"],[325,20,379,26,"TO_JS"],[325,25,379,19],[326,0,379,33,"module"],[326,22,379,41],[326,26,379,19],[327,0,379,47,"method"],[327,22,379,55,"profileName"],[327,33,379,19],[328,0,379,68,"args"],[329,0,379,19],[329,13,379,8],[330,0,380,7],[332,0,381,6,"Systrace"],[332,19,381,15,"beginEvent"],[332,29,381,6],[332,63,382,39,"profileName"],[332,74,381,6],[332,84,382,55,"stringifySafe"],[332,98,382,69,"args"],[332,102,382,55],[332,103,381,6],[333,0,384,5],[335,0,386,4],[335,12,386,8],[335,13,386,9,"callback"],[335,21,386,4],[335,23,386,19],[336,0,387,6],[337,0,388,5],[339,0,390,4],[339,15,390,11],[339,20,390,16,"_successCallbacks"],[339,37,390,11],[339,38,390,34,"callID"],[339,44,390,11],[339,45,390,4],[340,0,391,4],[340,15,391,11],[340,20,391,16,"_failureCallbacks"],[340,37,391,11],[340,38,391,34,"callID"],[340,44,391,11],[340,45,391,4],[341,0,392,4,"callback"],[341,50,392,16,"args"],[341,54,392,4],[343,0,394,4],[343,12,394,8,"__DEV__"],[343,19,394,4],[343,21,394,17],[344,0,395,6,"Systrace"],[344,19,395,15,"endEvent"],[344,27,395,6],[345,0,396,5],[346,0,397,3],[349,26,89,13,"spyOrToggle"],[349,37],[349,39,89,63],[350,0,90,4],[350,12,90,8,"spyOrToggle"],[350,28,90,24],[350,32,90,4],[350,34,90,30],[351,0,91,6,"MessageQueue"],[351,23,91,19,"prototype"],[351,32,91,6],[351,33,91,29,"__spy"],[351,38,91,6],[351,41,91,37],[351,57,91,45],[352,0,92,8,"console"],[352,20,92,16,"log"],[352,23,92,8],[352,24,93,10],[352,25,93,13,"info"],[352,30,93,18,"type"],[352,34,93,13],[352,39,93,27,"TO_JS"],[352,44,93,13],[352,47,93,35],[352,54,93,13],[352,57,93,45],[352,64,93,10],[352,83,94,15,"info"],[352,88,94,20,"module"],[352,94,94,15],[352,97,94,29,"info"],[352,102,94,34,"module"],[352,108,94,29],[352,111,94,43],[352,114,94,15],[352,117,94,49],[352,119,93,10],[352,123,94,54,"info"],[352,128,94,59,"method"],[352,134,93,10],[352,145,95,16,"JSON"],[352,150,95,21,"stringify"],[352,159,95,16],[352,160,95,31,"info"],[352,165,95,36,"args"],[352,169,95,16],[352,170,93,10],[352,177,92,8],[353,0,97,7],[353,11,91,6],[354,0,98,5],[354,9,90,4],[354,15,98,11],[354,19,98,15,"spyOrToggle"],[354,35,98,31],[354,40,98,11],[354,42,98,38],[355,0,99,6,"MessageQueue"],[355,23,99,19,"prototype"],[355,32,99,6],[355,33,99,29,"__spy"],[355,38,99,6],[355,41,99,37],[355,45,99,6],[356,0,100,5],[356,9,98,11],[356,15,100,11],[357,0,101,6,"MessageQueue"],[357,23,101,19,"prototype"],[357,32,101,6],[357,33,101,29,"__spy"],[357,38,101,6],[357,41,101,37,"spyOrToggle"],[357,52,101,6],[358,0,102,5],[359,0,103,3],[365,0,400,0,"module"],[365,9,400,7,"exports"],[365,16,400,0],[365,19,400,17,"MessageQueue"],[365,31,400,0]]},"type":"js/module"}]}