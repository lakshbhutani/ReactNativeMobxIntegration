{"dependencies":[{"name":"./utils/invariant","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"./utils/invariant\"));\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  var StateUtils = {\n    get: function get(state, key) {\n      return state.routes.find(function (route) {\n        return route.key === key;\n      }) || null;\n    },\n    indexOf: function indexOf(state, key) {\n      return state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n    },\n    has: function has(state, key) {\n      return !!state.routes.some(function (route) {\n        return route.key === key;\n      });\n    },\n    push: function push(state, route) {\n      (0, _invariant.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n      var routes = state.routes.slice();\n      routes.push(route);\n      return _objectSpread({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    pop: function pop(state) {\n      if (state.index <= 0) {\n        return state;\n      }\n\n      var routes = state.routes.slice(0, -1);\n      return _objectSpread({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    jumpToIndex: function jumpToIndex(state, index) {\n      if (index === state.index) {\n        return state;\n      }\n\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s to jump to', index);\n      return _objectSpread({}, state, {\n        index: index\n      });\n    },\n    jumpTo: function jumpTo(state, key) {\n      var index = StateUtils.indexOf(state, key);\n      return StateUtils.jumpToIndex(state, index);\n    },\n    back: function back(state) {\n      var index = state.index - 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    forward: function forward(state) {\n      var index = state.index + 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    replaceAndPrune: function replaceAndPrune(state, key, route) {\n      var index = StateUtils.indexOf(state, key);\n      var replaced = StateUtils.replaceAtIndex(state, index, route);\n      return _objectSpread({}, replaced, {\n        routes: replaced.routes.slice(0, index + 1)\n      });\n    },\n    replaceAt: function replaceAt(state, key, route) {\n      var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var index = StateUtils.indexOf(state, key);\n      var nextIndex = preserveIndex ? state.index : index;\n      var nextState = StateUtils.replaceAtIndex(state, index, route);\n      nextState.index = nextIndex;\n      return nextState;\n    },\n    replaceAtIndex: function replaceAtIndex(state, index, route) {\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n      if (state.routes[index] === route && index === state.index) {\n        return state;\n      }\n\n      var routes = state.routes.slice();\n      routes[index] = route;\n      return _objectSpread({}, state, {\n        index: index,\n        routes: routes\n      });\n    },\n    reset: function reset(state, routes, index) {\n      (0, _invariant.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');\n      var nextIndex = index === undefined ? routes.length - 1 : index;\n\n      if (state.routes.length === routes.length && state.index === nextIndex) {\n        var compare = function compare(route, ii) {\n          return routes[ii] === route;\n        };\n\n        if (state.routes.every(compare)) {\n          return state;\n        }\n      }\n\n      (0, _invariant.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n      return _objectSpread({}, state, {\n        index: nextIndex,\n        routes: routes\n      });\n    }\n  };\n  var _default = StateUtils;\n  exports.default = _default;\n});","map":[[7,0,1,0],[15,0,11,0],[15,6,11,6,"StateUtils"],[15,19,11,19],[16,0,15,2,"get"],[16,7,11,19],[16,22,15,6,"state"],[16,27,11,19],[16,29,15,13,"key"],[16,32,11,19],[16,34,15,18],[17,0,16,4],[17,13,16,11,"state"],[17,19,16,17,"routes"],[17,25,16,11],[17,26,16,24,"find"],[17,30,16,11],[17,31,16,29],[18,0,16,29],[18,15,16,38,"route"],[18,21,16,44,"key"],[18,24,16,38],[18,29,16,52,"key"],[18,32,16,29],[19,0,16,29],[19,7,16,11],[19,12,16,60],[19,16,16,4],[20,0,17,3],[20,5,11,19],[21,0,23,2,"indexOf"],[21,11,11,19],[21,30,23,10,"state"],[21,35,11,19],[21,37,23,17,"key"],[21,40,11,19],[21,42,23,22],[22,0,24,4],[22,13,24,11,"state"],[22,19,24,17,"routes"],[22,25,24,11],[22,26,24,24,"findIndex"],[22,35,24,11],[22,36,24,34],[23,0,24,34],[23,15,24,43,"route"],[23,21,24,49,"key"],[23,24,24,43],[23,29,24,57,"key"],[23,32,24,34],[24,0,24,34],[24,7,24,11],[24,8,24,4],[25,0,25,3],[25,5,11,19],[26,0,31,2,"has"],[26,7,11,19],[26,22,31,6,"state"],[26,27,11,19],[26,29,31,13,"key"],[26,32,11,19],[26,34,31,18],[27,0,32,4],[27,13,32,11],[27,14,32,12],[27,15,32,13,"state"],[27,21,32,19,"routes"],[27,27,32,13],[27,28,32,26,"some"],[27,32,32,13],[27,33,32,31],[28,0,32,31],[28,15,32,40,"route"],[28,21,32,46,"key"],[28,24,32,40],[28,29,32,54,"key"],[28,32,32,31],[29,0,32,31],[29,7,32,13],[29,8,32,4],[30,0,33,3],[30,5,11,19],[31,0,40,2,"push"],[31,8,11,19],[31,24,40,7,"state"],[31,29,11,19],[31,31,40,14,"route"],[31,36,11,19],[31,38,40,21],[32,0,41,4],[32,30,42,6,"StateUtils"],[32,41,42,17,"indexOf"],[32,48,42,6],[32,49,42,25,"state"],[32,54,42,6],[32,56,42,32,"route"],[32,62,42,38,"key"],[32,65,42,6],[32,71,42,47],[32,72,42,48],[32,73,41,4],[32,75,43,6],[32,121,41,4],[32,123,44,6,"route"],[32,129,44,12,"key"],[32,132,41,4],[33,0,47,4],[33,10,47,10,"routes"],[33,19,47,19,"state"],[33,25,47,25,"routes"],[33,31,47,19],[33,32,47,32,"slice"],[33,37,47,19],[33,39,47,4],[34,0,48,4,"routes"],[34,13,48,11,"push"],[34,17,48,4],[34,18,48,16,"route"],[34,23,48,4],[35,0,50,4],[35,31,51,9,"state"],[35,36,50,4],[36,0,52,6,"index"],[36,15,52,13,"routes"],[36,22,52,20,"length"],[36,28,52,13],[36,31,52,29],[36,32,50,4],[37,0,53,6,"routes"],[38,0,50,4],[39,0,55,3],[39,5,11,19],[40,0,62,2,"pop"],[40,7,11,19],[40,22,62,6,"state"],[40,27,11,19],[40,29,62,13],[41,0,63,4],[41,10,63,8,"state"],[41,16,63,14,"index"],[41,21,63,8],[41,25,63,23],[41,26,63,4],[41,28,63,26],[42,0,65,6],[42,15,65,13,"state"],[42,20,65,6],[43,0,66,5],[45,0,67,4],[45,10,67,10,"routes"],[45,19,67,19,"state"],[45,25,67,25,"routes"],[45,31,67,19],[45,32,67,32,"slice"],[45,37,67,19],[45,38,67,38],[45,39,67,19],[45,41,67,41],[45,42,67,42],[45,43,67,19],[45,44,67,4],[46,0,68,4],[46,31,69,9,"state"],[46,36,68,4],[47,0,70,6,"index"],[47,15,70,13,"routes"],[47,22,70,20,"length"],[47,28,70,13],[47,31,70,29],[47,32,68,4],[48,0,71,6,"routes"],[49,0,68,4],[50,0,73,3],[50,5,11,19],[51,0,78,2,"jumpToIndex"],[51,15,11,19],[51,38,78,14,"state"],[51,43,11,19],[51,45,78,21,"index"],[51,50,11,19],[51,52,78,28],[52,0,79,4],[52,10,79,8,"index"],[52,20,79,18,"state"],[52,26,79,24,"index"],[52,31,79,4],[52,33,79,31],[53,0,80,6],[53,15,80,13,"state"],[53,20,80,6],[54,0,81,5],[56,0,83,4],[56,30,83,14],[56,31,83,15],[56,32,83,16,"state"],[56,38,83,22,"routes"],[56,44,83,16],[56,45,83,29,"index"],[56,50,83,16],[56,51,83,4],[56,53,83,37],[56,82,83,4],[56,84,83,68,"index"],[56,89,83,4],[57,0,85,4],[57,31,86,9,"state"],[57,36,85,4],[58,0,87,6,"index"],[59,0,85,4],[60,0,89,3],[60,5,11,19],[61,0,94,2,"jumpTo"],[61,10,11,19],[61,28,94,9,"state"],[61,33,11,19],[61,35,94,16,"key"],[61,38,11,19],[61,40,94,21],[62,0,95,4],[62,10,95,10,"index"],[62,18,95,18,"StateUtils"],[62,29,95,29,"indexOf"],[62,36,95,18],[62,37,95,37,"state"],[62,42,95,18],[62,44,95,44,"key"],[62,47,95,18],[62,48,95,4],[63,0,96,4],[63,13,96,11,"StateUtils"],[63,24,96,22,"jumpToIndex"],[63,35,96,11],[63,36,96,34,"state"],[63,41,96,11],[63,43,96,41,"index"],[63,48,96,11],[63,49,96,4],[64,0,97,3],[64,5,11,19],[65,0,102,2,"back"],[65,8,11,19],[65,24,102,7,"state"],[65,29,11,19],[65,31,102,14],[66,0,103,4],[66,10,103,10,"index"],[66,18,103,18,"state"],[66,24,103,24,"index"],[66,29,103,18],[66,32,103,32],[66,33,103,4],[67,0,104,4],[67,10,104,10,"route"],[67,18,104,18,"state"],[67,24,104,24,"routes"],[67,30,104,18],[67,31,104,31,"index"],[67,36,104,18],[67,37,104,4],[68,0,105,4],[68,13,105,11,"route"],[68,21,105,19,"StateUtils"],[68,32,105,30,"jumpToIndex"],[68,43,105,19],[68,44,105,42,"state"],[68,49,105,19],[68,51,105,49,"index"],[68,56,105,19],[68,57,105,11],[68,60,105,58,"state"],[68,65,105,4],[69,0,106,3],[69,5,11,19],[70,0,111,2,"forward"],[70,11,11,19],[70,30,111,10,"state"],[70,35,11,19],[70,37,111,17],[71,0,112,4],[71,10,112,10,"index"],[71,18,112,18,"state"],[71,24,112,24,"index"],[71,29,112,18],[71,32,112,32],[71,33,112,4],[72,0,113,4],[72,10,113,10,"route"],[72,18,113,18,"state"],[72,24,113,24,"routes"],[72,30,113,18],[72,31,113,31,"index"],[72,36,113,18],[72,37,113,4],[73,0,114,4],[73,13,114,11,"route"],[73,21,114,19,"StateUtils"],[73,32,114,30,"jumpToIndex"],[73,43,114,19],[73,44,114,42,"state"],[73,49,114,19],[73,51,114,49,"index"],[73,56,114,19],[73,57,114,11],[73,60,114,58,"state"],[73,65,114,4],[74,0,115,3],[74,5,11,19],[75,0,122,2,"replaceAndPrune"],[75,19,11,19],[75,46,122,18,"state"],[75,51,11,19],[75,53,122,25,"key"],[75,56,11,19],[75,58,122,30,"route"],[75,63,11,19],[75,65,122,37],[76,0,123,4],[76,10,123,10,"index"],[76,18,123,18,"StateUtils"],[76,29,123,29,"indexOf"],[76,36,123,18],[76,37,123,37,"state"],[76,42,123,18],[76,44,123,44,"key"],[76,47,123,18],[76,48,123,4],[77,0,124,4],[77,10,124,10,"replaced"],[77,21,124,21,"StateUtils"],[77,32,124,32,"replaceAtIndex"],[77,46,124,21],[77,47,124,47,"state"],[77,52,124,21],[77,54,124,54,"index"],[77,59,124,21],[77,61,124,61,"route"],[77,66,124,21],[77,67,124,4],[78,0,126,4],[78,31,127,9,"replaced"],[78,39,126,4],[79,0,128,6,"routes"],[79,16,128,14,"replaced"],[79,25,128,23,"routes"],[79,31,128,14],[79,32,128,30,"slice"],[79,37,128,14],[79,38,128,36],[79,39,128,14],[79,41,128,39,"index"],[79,49,128,47],[79,50,128,14],[80,0,126,4],[81,0,130,3],[81,5,11,19],[82,0,139,2,"replaceAt"],[82,13,11,19],[82,34,139,12,"state"],[82,39,11,19],[82,41,139,19,"key"],[82,44,11,19],[82,46,139,24,"route"],[82,51,11,19],[82,53,139,54],[83,0,139,54],[83,10,139,31,"preserveIndex"],[83,23,139,54],[83,94,139,47],[83,99,139,54],[84,0,140,4],[84,10,140,10,"index"],[84,18,140,18,"StateUtils"],[84,29,140,29,"indexOf"],[84,36,140,18],[84,37,140,37,"state"],[84,42,140,18],[84,44,140,44,"key"],[84,47,140,18],[84,48,140,4],[85,0,141,4],[85,10,141,10,"nextIndex"],[85,22,141,22,"preserveIndex"],[85,38,141,38,"state"],[85,44,141,44,"index"],[85,49,141,22],[85,52,141,52,"index"],[85,57,141,4],[86,0,142,4],[86,10,142,8,"nextState"],[86,22,142,20,"StateUtils"],[86,33,142,31,"replaceAtIndex"],[86,47,142,20],[86,48,142,46,"state"],[86,53,142,20],[86,55,142,53,"index"],[86,60,142,20],[86,62,142,60,"route"],[86,67,142,20],[86,68,142,4],[87,0,143,4,"nextState"],[87,16,143,14,"index"],[87,21,143,4],[87,24,143,22,"nextIndex"],[87,33,143,4],[88,0,144,4],[88,13,144,11,"nextState"],[88,22,144,4],[89,0,145,3],[89,5,11,19],[90,0,152,2,"replaceAtIndex"],[90,18,11,19],[90,44,152,17,"state"],[90,49,11,19],[90,51,152,24,"index"],[90,56,11,19],[90,58,152,31,"route"],[90,63,11,19],[90,65,152,38],[91,0,153,4],[91,30,154,6],[91,31,154,7],[91,32,154,8,"state"],[91,38,154,14,"routes"],[91,44,154,8],[91,45,154,21,"index"],[91,50,154,8],[91,51,153,4],[91,53,155,6],[91,94,153,4],[91,96,156,6,"index"],[91,101,153,4],[91,103,157,6,"route"],[91,109,157,12,"key"],[91,112,153,4],[93,0,160,4],[93,10,160,8,"state"],[93,16,160,14,"routes"],[93,22,160,8],[93,23,160,21,"index"],[93,28,160,8],[93,34,160,32,"route"],[93,39,160,8],[93,43,160,41,"index"],[93,53,160,51,"state"],[93,59,160,57,"index"],[93,64,160,4],[93,66,160,64],[94,0,161,6],[94,15,161,13,"state"],[94,20,161,6],[95,0,162,5],[97,0,164,4],[97,10,164,10,"routes"],[97,19,164,19,"state"],[97,25,164,25,"routes"],[97,31,164,19],[97,32,164,32,"slice"],[97,37,164,19],[97,39,164,4],[98,0,165,4,"routes"],[98,13,165,11,"index"],[98,18,165,4],[98,22,165,20,"route"],[98,27,165,4],[99,0,167,4],[99,31,168,9,"state"],[99,36,167,4],[100,0,169,6,"index"],[100,20,167,4],[101,0,170,6,"routes"],[102,0,167,4],[103,0,172,3],[103,5,11,19],[104,0,179,2,"reset"],[104,9,11,19],[104,26,179,8,"state"],[104,31,11,19],[104,33,179,15,"routes"],[104,39,11,19],[104,41,179,23,"index"],[104,46,11,19],[104,48,179,30],[105,0,180,4],[105,30,181,6,"routes"],[105,37,181,13,"length"],[105,43,181,6],[105,47,181,23,"Array"],[105,53,181,29,"isArray"],[105,60,181,23],[105,61,181,37,"routes"],[105,67,181,23],[105,68,180,4],[105,70,182,6],[105,97,180,4],[106,0,185,4],[106,10,185,10,"nextIndex"],[106,22,185,22,"index"],[106,32,185,32,"undefined"],[106,41,185,22],[106,44,185,44,"routes"],[106,51,185,51,"length"],[106,57,185,44],[106,60,185,60],[106,61,185,22],[106,64,185,64,"index"],[106,69,185,4],[108,0,187,4],[108,10,187,8,"state"],[108,16,187,14,"routes"],[108,22,187,8],[108,23,187,21,"length"],[108,29,187,8],[108,34,187,32,"routes"],[108,41,187,39,"length"],[108,47,187,8],[108,51,187,49,"state"],[108,57,187,55,"index"],[108,62,187,49],[108,67,187,65,"nextIndex"],[108,76,187,4],[108,78,187,76],[109,0,188,6],[109,12,188,12,"compare"],[109,22,188,22],[109,31,188,12,"compare"],[109,38,188,22],[109,39,188,23,"route"],[109,44,188,22],[109,46,188,30,"ii"],[109,48,188,22],[110,0,188,22],[110,17,188,37,"routes"],[110,24,188,44,"ii"],[110,26,188,37],[110,32,188,52,"route"],[110,37,188,22],[111,0,188,22],[111,9,188,6],[113,0,189,6],[113,12,189,10,"state"],[113,18,189,16,"routes"],[113,24,189,10],[113,25,189,23,"every"],[113,30,189,10],[113,31,189,29,"compare"],[113,38,189,10],[113,39,189,6],[113,41,189,39],[114,0,190,8],[114,17,190,15,"state"],[114,22,190,8],[115,0,191,7],[116,0,192,5],[118,0,194,4],[118,30,194,14],[118,31,194,15],[118,32,194,16,"routes"],[118,39,194,23,"nextIndex"],[118,48,194,16],[118,49,194,4],[118,51,194,35],[118,78,194,4],[118,80,194,64,"nextIndex"],[118,89,194,4],[119,0,196,4],[119,31,197,9,"state"],[119,36,196,4],[120,0,198,6,"index"],[120,15,198,13,"nextIndex"],[120,24,196,4],[121,0,199,6,"routes"],[122,0,196,4],[123,0,201,3],[124,0,11,19],[124,3,11,0],[125,17,204,15,"StateUtils"],[125,27]]},"type":"js/module"}]}