{"dependencies":[{"name":"Blob","isAsync":false},{"name":"event-target-shim","isAsync":false},{"name":"NativeEventEmitter","isAsync":false},{"name":"BlobManager","isAsync":false},{"name":"NativeModules","isAsync":false},{"name":"Platform","isAsync":false},{"name":"WebSocketEvent","isAsync":false},{"name":"base64-js","isAsync":false},{"name":"binaryToBase64","isAsync":false},{"name":"fbjs/lib/invariant","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  'use strict';\n\n  function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }\n\n  var Blob = _$$_REQUIRE(_dependencyMap[0], 'Blob');\n\n  var EventTarget = _$$_REQUIRE(_dependencyMap[1], 'event-target-shim');\n\n  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[2], 'NativeEventEmitter');\n\n  var BlobManager = _$$_REQUIRE(_dependencyMap[3], 'BlobManager');\n\n  var NativeModules = _$$_REQUIRE(_dependencyMap[4], 'NativeModules');\n\n  var Platform = _$$_REQUIRE(_dependencyMap[5], 'Platform');\n\n  var WebSocketEvent = _$$_REQUIRE(_dependencyMap[6], 'WebSocketEvent');\n\n  var base64 = _$$_REQUIRE(_dependencyMap[7], 'base64-js');\n\n  var binaryToBase64 = _$$_REQUIRE(_dependencyMap[8], 'binaryToBase64');\n\n  var invariant = _$$_REQUIRE(_dependencyMap[9], 'fbjs/lib/invariant');\n\n  var WebSocketModule = NativeModules.WebSocketModule;\n  var CONNECTING = 0;\n  var OPEN = 1;\n  var CLOSING = 2;\n  var CLOSED = 3;\n  var CLOSE_NORMAL = 1000;\n  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];\n  var nextWebSocketId = 0;\n\n  var WebSocket = function (_EventTarget) {\n    function WebSocket(url, protocols, options) {\n      var _this;\n\n      _classCallCheck(this, WebSocket);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocket).call(this));\n      _this.CONNECTING = CONNECTING;\n      _this.OPEN = OPEN;\n      _this.CLOSING = CLOSING;\n      _this.CLOSED = CLOSED;\n      _this.readyState = CONNECTING;\n\n      if (typeof protocols === 'string') {\n        protocols = [protocols];\n      }\n\n      var _ref = options || {},\n          _ref$headers = _ref.headers,\n          headers = _ref$headers === void 0 ? {} : _ref$headers,\n          unrecognized = _objectWithoutProperties(_ref, [\"headers\"]);\n\n      if (unrecognized && typeof unrecognized.origin === 'string') {\n        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');\n        headers.origin = unrecognized.origin;\n        delete unrecognized.origin;\n      }\n\n      if (Object.keys(unrecognized).length > 0) {\n        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');\n      }\n\n      if (!Array.isArray(protocols)) {\n        protocols = null;\n      }\n\n      if (!WebSocket.isAvailable) {\n        throw new Error('Cannot initialize WebSocket module. ' + 'Native module WebSocketModule is missing.');\n      }\n\n      _this._eventEmitter = new NativeEventEmitter(WebSocketModule);\n      _this._socketId = nextWebSocketId++;\n\n      _this._registerEvents();\n\n      WebSocketModule.connect(url, protocols, {\n        headers: headers\n      }, _this._socketId);\n      return _this;\n    }\n\n    _createClass(WebSocket, [{\n      key: \"close\",\n      value: function close(code, reason) {\n        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {\n          return;\n        }\n\n        this.readyState = this.CLOSING;\n\n        this._close(code, reason);\n      }\n    }, {\n      key: \"send\",\n      value: function send(data) {\n        if (this.readyState === this.CONNECTING) {\n          throw new Error('INVALID_STATE_ERR');\n        }\n\n        if (data instanceof Blob) {\n          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');\n          BlobManager.sendOverSocket(data, this._socketId);\n          return;\n        }\n\n        if (typeof data === 'string') {\n          WebSocketModule.send(data, this._socketId);\n          return;\n        }\n\n        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n          WebSocketModule.sendBinary(binaryToBase64(data), this._socketId);\n          return;\n        }\n\n        throw new Error('Unsupported data type');\n      }\n    }, {\n      key: \"ping\",\n      value: function ping() {\n        if (this.readyState === this.CONNECTING) {\n          throw new Error('INVALID_STATE_ERR');\n        }\n\n        WebSocketModule.ping(this._socketId);\n      }\n    }, {\n      key: \"_close\",\n      value: function _close(code, reason) {\n        if (Platform.OS === 'android') {\n          var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;\n          var closeReason = typeof reason === 'string' ? reason : '';\n          WebSocketModule.close(statusCode, closeReason, this._socketId);\n        } else {\n          WebSocketModule.close(this._socketId);\n        }\n\n        if (BlobManager.isAvailable && this._binaryType === 'blob') {\n          BlobManager.removeWebSocketHandler(this._socketId);\n        }\n      }\n    }, {\n      key: \"_unregisterEvents\",\n      value: function _unregisterEvents() {\n        this._subscriptions.forEach(function (e) {\n          return e.remove();\n        });\n\n        this._subscriptions = [];\n      }\n    }, {\n      key: \"_registerEvents\",\n      value: function _registerEvents() {\n        var _this2 = this;\n\n        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {\n          if (ev.id !== _this2._socketId) {\n            return;\n          }\n\n          var data = ev.data;\n\n          switch (ev.type) {\n            case 'binary':\n              data = base64.toByteArray(ev.data).buffer;\n              break;\n\n            case 'blob':\n              data = BlobManager.createFromOptions(ev.data);\n              break;\n          }\n\n          _this2.dispatchEvent(new WebSocketEvent('message', {\n            data: data\n          }));\n        }), this._eventEmitter.addListener('websocketOpen', function (ev) {\n          if (ev.id !== _this2._socketId) {\n            return;\n          }\n\n          _this2.readyState = _this2.OPEN;\n\n          _this2.dispatchEvent(new WebSocketEvent('open'));\n        }), this._eventEmitter.addListener('websocketClosed', function (ev) {\n          if (ev.id !== _this2._socketId) {\n            return;\n          }\n\n          _this2.readyState = _this2.CLOSED;\n\n          _this2.dispatchEvent(new WebSocketEvent('close', {\n            code: ev.code,\n            reason: ev.reason\n          }));\n\n          _this2._unregisterEvents();\n\n          _this2.close();\n        }), this._eventEmitter.addListener('websocketFailed', function (ev) {\n          if (ev.id !== _this2._socketId) {\n            return;\n          }\n\n          _this2.readyState = _this2.CLOSED;\n\n          _this2.dispatchEvent(new WebSocketEvent('error', {\n            message: ev.message\n          }));\n\n          _this2.dispatchEvent(new WebSocketEvent('close', {\n            message: ev.message\n          }));\n\n          _this2._unregisterEvents();\n\n          _this2.close();\n        })];\n      }\n    }, {\n      key: \"binaryType\",\n      get: function get() {\n        return this._binaryType;\n      },\n      set: function set(binaryType) {\n        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {\n          throw new Error(\"binaryType must be either 'blob' or 'arraybuffer'\");\n        }\n\n        if (this._binaryType === 'blob' || binaryType === 'blob') {\n          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');\n\n          if (binaryType === 'blob') {\n            BlobManager.addWebSocketHandler(this._socketId);\n          } else {\n            BlobManager.removeWebSocketHandler(this._socketId);\n          }\n        }\n\n        this._binaryType = binaryType;\n      }\n    }]);\n\n    _inherits(WebSocket, _EventTarget);\n\n    return WebSocket;\n  }(EventTarget.apply(void 0, WEBSOCKET_EVENTS));\n\n  WebSocket.CONNECTING = CONNECTING;\n  WebSocket.OPEN = OPEN;\n  WebSocket.CLOSING = CLOSING;\n  WebSocket.CLOSED = CLOSED;\n  WebSocket.isAvailable = !!WebSocketModule;\n  module.exports = WebSocket;\n});","map":[[2,0,11,0],[22,0,13,0],[22,6,13,6,"Blob"],[22,13,13,13,"require"],[22,44,13,21],[22,50,13,13],[22,51,13,0],[24,0,14,0],[24,6,14,6,"EventTarget"],[24,20,14,20,"require"],[24,51,14,28],[24,70,14,20],[24,71,14,0],[26,0,15,0],[26,6,15,6,"NativeEventEmitter"],[26,27,15,27,"require"],[26,58,15,35],[26,78,15,27],[26,79,15,0],[28,0,16,0],[28,6,16,6,"BlobManager"],[28,20,16,20,"require"],[28,51,16,28],[28,64,16,20],[28,65,16,0],[30,0,17,0],[30,6,17,6,"NativeModules"],[30,22,17,22,"require"],[30,53,17,30],[30,68,17,22],[30,69,17,0],[32,0,18,0],[32,6,18,6,"Platform"],[32,17,18,17,"require"],[32,48,18,25],[32,58,18,17],[32,59,18,0],[34,0,19,0],[34,6,19,6,"WebSocketEvent"],[34,23,19,23,"require"],[34,54,19,31],[34,70,19,23],[34,71,19,0],[36,0,24,0],[36,6,24,6,"base64"],[36,15,24,15,"require"],[36,46,24,23],[36,57,24,15],[36,58,24,0],[38,0,25,0],[38,6,25,6,"binaryToBase64"],[38,23,25,23,"require"],[38,54,25,31],[38,70,25,23],[38,71,25,0],[40,0,26,0],[40,6,26,6,"invariant"],[40,18,26,18,"require"],[40,49,26,26],[40,69,26,18],[40,70,26,0],[42,6,28,7,"WebSocketModule"],[42,21],[42,24,28,26,"NativeModules"],[42,37],[42,38,28,7,"WebSocketModule"],[42,53],[43,0,46,0],[43,6,46,6,"CONNECTING"],[43,19,46,19],[43,20,46,0],[44,0,47,0],[44,6,47,6,"OPEN"],[44,13,47,13],[44,14,47,0],[45,0,48,0],[45,6,48,6,"CLOSING"],[45,16,48,16],[45,17,48,0],[46,0,49,0],[46,6,49,6,"CLOSED"],[46,15,49,15],[46,16,49,0],[47,0,51,0],[47,6,51,6,"CLOSE_NORMAL"],[47,21,51,21],[47,25,51,0],[48,0,53,0],[48,6,53,6,"WEBSOCKET_EVENTS"],[48,25,53,25],[48,26,53,26],[48,33,53,25],[48,35,53,35],[48,42,53,25],[48,44,53,44],[48,53,53,25],[48,55,53,55],[48,61,53,25],[48,62,53,0],[49,0,55,0],[49,6,55,4,"nextWebSocketId"],[49,24,55,22],[49,25,55,0],[51,6,63,6,"WebSocket"],[51,15],[52,0,94,2],[52,23,95,4,"url"],[52,26,94,2],[52,28,96,4,"protocols"],[52,37,94,2],[52,39,97,4,"options"],[52,46,94,2],[52,48,98,4],[53,0,98,4],[55,0,98,4],[57,0,99,4],[58,0,98,4],[58,12,69,2,"CONNECTING"],[58,22,98,4],[58,25,69,23,"CONNECTING"],[58,35,98,4],[59,0,98,4],[59,12,70,2,"OPEN"],[59,16,98,4],[59,19,70,17,"OPEN"],[59,23,98,4],[60,0,98,4],[60,12,71,2,"CLOSING"],[60,19,98,4],[60,22,71,20,"CLOSING"],[60,29,98,4],[61,0,98,4],[61,12,72,2,"CLOSED"],[61,18,98,4],[61,21,72,19,"CLOSED"],[61,27,98,4],[62,0,98,4],[62,12,87,2,"readyState"],[62,22,98,4],[62,25,87,23,"CONNECTING"],[62,35,98,4],[64,0,100,4],[64,10,100,8],[64,17,100,15,"protocols"],[64,26,100,8],[64,31,100,29],[64,39,100,4],[64,41,100,39],[65,0,101,6,"protocols"],[65,20,101,18],[65,21,101,19,"protocols"],[65,30,101,18],[65,31,101,6],[66,0,102,5],[68,0,98,4],[68,17,104,44,"options"],[68,28,104,55],[68,30,98,4],[69,0,98,4],[69,30,104,11,"headers"],[69,37,98,4],[70,0,98,4],[70,10,104,11,"headers"],[70,17,98,4],[70,46,104,21],[70,48,98,4],[71,0,98,4],[71,10,104,28,"unrecognized"],[71,22,98,4],[73,0,110,4],[73,10,110,8,"unrecognized"],[73,26,110,24],[73,33,110,31,"unrecognized"],[73,46,110,44,"origin"],[73,52,110,24],[73,57,110,55],[73,65,110,4],[73,67,110,65],[74,0,111,6,"console"],[74,16,111,14,"warn"],[74,20,111,6],[74,21,112,8],[74,126,111,6],[75,0,117,6,"headers"],[75,16,117,14,"origin"],[75,22,117,6],[75,25,117,23,"unrecognized"],[75,38,117,36,"origin"],[75,44,117,6],[76,0,121,6],[76,15,121,13,"unrecognized"],[76,28,121,26,"origin"],[76,34,121,6],[77,0,122,5],[79,0,125,4],[79,10,125,8,"Object"],[79,17,125,15,"keys"],[79,21,125,8],[79,22,125,20,"unrecognized"],[79,34,125,8],[79,36,125,34,"length"],[79,42,125,8],[79,45,125,43],[79,46,125,4],[79,48,125,46],[80,0,126,6,"console"],[80,16,126,14,"warn"],[80,20,126,6],[80,21,127,8],[80,71,128,10,"Object"],[80,78,128,17,"keys"],[80,82,128,10],[80,83,128,22,"unrecognized"],[80,95,128,10],[80,97,128,36,"join"],[80,101,128,10],[80,102,128,41],[80,108,128,10],[80,109,127,8],[80,112,129,10],[80,117,127,8],[80,120,130,10],[80,164,126,6],[81,0,132,5],[83,0,134,4],[83,10,134,8],[83,11,134,9,"Array"],[83,17,134,15,"isArray"],[83,24,134,9],[83,25,134,23,"protocols"],[83,34,134,9],[83,35,134,4],[83,37,134,35],[84,0,135,6,"protocols"],[84,20,135,18],[84,24,135,6],[85,0,136,5],[87,0,138,4],[87,10,138,8],[87,11,138,9,"WebSocket"],[87,21,138,19,"isAvailable"],[87,32,138,4],[87,34,138,32],[88,0,139,6],[88,14,139,12],[88,18,139,16,"Error"],[88,23,139,12],[88,24,140,8],[88,65,141,10],[88,108,139,12],[88,109,139,6],[89,0,143,5],[91,0,145,4],[91,12,145,9,"_eventEmitter"],[91,25,145,4],[91,28,145,25],[91,32,145,29,"NativeEventEmitter"],[91,50,145,25],[91,51,145,48,"WebSocketModule"],[91,66,145,25],[91,67,145,4],[92,0,146,4],[92,12,146,9,"_socketId"],[92,21,146,4],[92,24,146,21,"nextWebSocketId"],[92,41,146,4],[94,0,147,4],[94,12,147,9,"_registerEvents"],[94,27,147,4],[96,0,148,4,"WebSocketModule"],[96,22,148,20,"connect"],[96,29,148,4],[96,30,149,6,"url"],[96,33,148,4],[96,35,150,6,"protocols"],[96,44,148,4],[96,46,151,6],[97,0,151,7,"headers"],[98,0,151,6],[98,7,148,4],[98,9,152,6],[98,15,152,11,"_socketId"],[98,24,148,4],[99,0,98,4],[100,0,154,3],[104,28,182,8,"code"],[104,32],[104,34,182,23,"reason"],[104,40],[104,42,182,46],[105,0,183,4],[105,12,183,8],[105,17,183,13,"readyState"],[105,27,183,8],[105,32,183,28],[105,37,183,33,"CLOSING"],[105,44,183,8],[105,48,183,44],[105,53,183,49,"readyState"],[105,63,183,44],[105,68,183,64],[105,73,183,69,"CLOSED"],[105,79,183,4],[105,81,183,77],[106,0,184,6],[107,0,185,5],[109,0,187,4],[109,13,187,9,"readyState"],[109,23,187,4],[109,26,187,22],[109,31,187,27,"CLOSING"],[109,38,187,4],[111,0,188,4],[111,13,188,9,"_close"],[111,19,188,4],[111,20,188,16,"code"],[111,24,188,4],[111,26,188,22,"reason"],[111,32,188,4],[112,0,189,3],[115,27,191,7,"data"],[115,31],[115,33,191,66],[116,0,192,4],[116,12,192,8],[116,17,192,13,"readyState"],[116,27,192,8],[116,32,192,28],[116,37,192,33,"CONNECTING"],[116,47,192,4],[116,49,192,45],[117,0,193,6],[117,16,193,12],[117,20,193,16,"Error"],[117,25,193,12],[117,26,193,22],[117,45,193,12],[117,46,193,6],[118,0,194,5],[120,0,196,4],[120,12,196,8,"data"],[120,28,196,24,"Blob"],[120,32,196,4],[120,34,196,30],[121,0,197,6,"invariant"],[121,20,198,8,"BlobManager"],[121,32,198,20,"isAvailable"],[121,43,197,6],[121,45,199,8],[121,100,197,6],[122,0,201,6,"BlobManager"],[122,22,201,18,"sendOverSocket"],[122,36,201,6],[122,37,201,33,"data"],[122,41,201,6],[122,43,201,39],[122,48,201,44,"_socketId"],[122,57,201,6],[123,0,202,6],[124,0,203,5],[126,0,205,4],[126,12,205,8],[126,19,205,15,"data"],[126,23,205,8],[126,28,205,24],[126,36,205,4],[126,38,205,34],[127,0,206,6,"WebSocketModule"],[127,26,206,22,"send"],[127,30,206,6],[127,31,206,27,"data"],[127,35,206,6],[127,37,206,33],[127,42,206,38,"_socketId"],[127,51,206,6],[128,0,207,6],[129,0,208,5],[131,0,210,4],[131,12,210,8,"data"],[131,28,210,24,"ArrayBuffer"],[131,39,210,8],[131,43,210,39,"ArrayBuffer"],[131,55,210,51,"isView"],[131,61,210,39],[131,62,210,58,"data"],[131,66,210,39],[131,67,210,4],[131,69,210,65],[132,0,211,6,"WebSocketModule"],[132,26,211,22,"sendBinary"],[132,36,211,6],[132,37,211,33,"binaryToBase64"],[132,52,211,48,"data"],[132,56,211,33],[132,57,211,6],[132,59,211,55],[132,64,211,60,"_socketId"],[132,73,211,6],[133,0,212,6],[134,0,213,5],[136,0,215,4],[136,14,215,10],[136,18,215,14,"Error"],[136,23,215,10],[136,24,215,20],[136,47,215,10],[136,48,215,4],[137,0,216,3],[140,29,218,15],[141,0,219,4],[141,12,219,8],[141,17,219,13,"readyState"],[141,27,219,8],[141,32,219,28],[141,37,219,33,"CONNECTING"],[141,47,219,4],[141,49,219,45],[142,0,220,6],[142,16,220,12],[142,20,220,16,"Error"],[142,25,220,12],[142,26,220,22],[142,45,220,12],[142,46,220,6],[143,0,221,5],[145,0,223,4,"WebSocketModule"],[145,24,223,20,"ping"],[145,28,223,4],[145,29,223,25],[145,34,223,30,"_socketId"],[145,43,223,4],[146,0,224,3],[149,29,226,9,"code"],[149,33],[149,35,226,24,"reason"],[149,41],[149,43,226,47],[150,0,227,4],[150,12,227,8,"Platform"],[150,21,227,17,"OS"],[150,23,227,8],[150,28,227,24],[150,37,227,4],[150,39,227,35],[151,0,229,6],[151,14,229,12,"statusCode"],[151,27,229,25],[151,34,229,32,"code"],[151,38,229,25],[151,43,229,41],[151,51,229,25],[151,54,229,52,"code"],[151,58,229,25],[151,61,229,59,"CLOSE_NORMAL"],[151,73,229,6],[152,0,230,6],[152,14,230,12,"closeReason"],[152,28,230,26],[152,35,230,33,"reason"],[152,41,230,26],[152,46,230,44],[152,54,230,26],[152,57,230,55,"reason"],[152,63,230,26],[152,66,230,64],[152,68,230,6],[153,0,231,6,"WebSocketModule"],[153,26,231,22,"close"],[153,31,231,6],[153,32,231,28,"statusCode"],[153,42,231,6],[153,44,231,40,"closeReason"],[153,55,231,6],[153,57,231,53],[153,62,231,58,"_socketId"],[153,71,231,6],[154,0,232,5],[154,9,227,4],[154,15,232,11],[155,0,233,6,"WebSocketModule"],[155,26,233,22,"close"],[155,31,233,6],[155,32,233,28],[155,37,233,33,"_socketId"],[155,46,233,6],[156,0,234,5],[158,0,236,4],[158,12,236,8,"BlobManager"],[158,24,236,20,"isAvailable"],[158,35,236,8],[158,39,236,35],[158,44,236,40,"_binaryType"],[158,55,236,35],[158,60,236,56],[158,66,236,4],[158,68,236,64],[159,0,237,6,"BlobManager"],[159,22,237,18,"removeWebSocketHandler"],[159,44,237,6],[159,45,237,41],[159,50,237,46,"_socketId"],[159,59,237,6],[160,0,238,5],[161,0,239,3],[164,42,241,28],[165,0,242,4],[165,13,242,9,"_subscriptions"],[165,27,242,4],[165,28,242,24,"forEach"],[165,35,242,4],[165,36,242,32],[166,0,242,32],[166,17,242,37,"e"],[166,19,242,39,"remove"],[166,25,242,37],[166,27,242,32],[167,0,242,32],[167,9,242,4],[169,0,243,4],[169,13,243,9,"_subscriptions"],[169,27,243,4],[169,30,243,26],[169,32,243,4],[170,0,244,3],[173,40,246,26],[174,0,246,26],[176,0,247,4],[176,13,247,9,"_subscriptions"],[176,27,247,4],[176,30,247,26],[176,31,248,6],[176,36,248,11,"_eventEmitter"],[176,49,248,6],[176,50,248,25,"addListener"],[176,61,248,6],[176,62,248,37],[176,80,248,6],[176,82,248,57],[176,96,248,63],[177,0,249,8],[177,14,249,12,"ev"],[177,17,249,15,"id"],[177,19,249,12],[177,24,249,22],[177,31,249,27,"_socketId"],[177,40,249,8],[177,42,249,38],[178,0,250,10],[179,0,251,9],[181,0,252,8],[181,14,252,12,"data"],[181,21,252,19,"ev"],[181,24,252,22,"data"],[181,28,252,8],[183,0,253,8],[183,18,253,16,"ev"],[183,21,253,19,"type"],[183,25,253,8],[184,0,254,10],[184,17,254,15],[184,25,254,10],[185,0,255,12,"data"],[185,21,255,19,"base64"],[185,28,255,26,"toByteArray"],[185,39,255,19],[185,40,255,38,"ev"],[185,43,255,41,"data"],[185,47,255,19],[185,49,255,47,"buffer"],[185,55,255,12],[186,0,256,12],[188,0,257,10],[188,17,257,15],[188,23,257,10],[189,0,258,12,"data"],[189,21,258,19,"BlobManager"],[189,33,258,31,"createFromOptions"],[189,50,258,19],[189,51,258,49,"ev"],[189,54,258,52,"data"],[189,58,258,19],[189,59,258,12],[190,0,259,12],[191,0,253,8],[193,0,261,8],[193,17,261,13,"dispatchEvent"],[193,30,261,8],[193,31,261,27],[193,35,261,31,"WebSocketEvent"],[193,49,261,27],[193,50,261,46],[193,59,261,27],[193,61,261,57],[194,0,261,58,"data"],[195,0,261,57],[195,11,261,27],[195,12,261,8],[196,0,262,7],[196,9,248,6],[196,10,247,26],[196,12,263,6],[196,17,263,11,"_eventEmitter"],[196,30,263,6],[196,31,263,25,"addListener"],[196,42,263,6],[196,43,263,37],[196,58,263,6],[196,60,263,54],[196,74,263,60],[197,0,264,8],[197,14,264,12,"ev"],[197,17,264,15,"id"],[197,19,264,12],[197,24,264,22],[197,31,264,27,"_socketId"],[197,40,264,8],[197,42,264,38],[198,0,265,10],[199,0,266,9],[201,0,267,8],[201,17,267,13,"readyState"],[201,27,267,8],[201,30,267,26],[201,37,267,31,"OPEN"],[201,41,267,8],[203,0,268,8],[203,17,268,13,"dispatchEvent"],[203,30,268,8],[203,31,268,27],[203,35,268,31,"WebSocketEvent"],[203,49,268,27],[203,50,268,46],[203,56,268,27],[203,57,268,8],[204,0,269,7],[204,9,263,6],[204,10,247,26],[204,12,270,6],[204,17,270,11,"_eventEmitter"],[204,30,270,6],[204,31,270,25,"addListener"],[204,42,270,6],[204,43,270,37],[204,60,270,6],[204,62,270,56],[204,76,270,62],[205,0,271,8],[205,14,271,12,"ev"],[205,17,271,15,"id"],[205,19,271,12],[205,24,271,22],[205,31,271,27,"_socketId"],[205,40,271,8],[205,42,271,38],[206,0,272,10],[207,0,273,9],[209,0,274,8],[209,17,274,13,"readyState"],[209,27,274,8],[209,30,274,26],[209,37,274,31,"CLOSED"],[209,43,274,8],[211,0,275,8],[211,17,275,13,"dispatchEvent"],[211,30,275,8],[211,31,276,10],[211,35,276,14,"WebSocketEvent"],[211,49,276,10],[211,50,276,29],[211,57,276,10],[211,59,276,38],[212,0,277,12,"code"],[212,18,277,18,"ev"],[212,21,277,21,"code"],[212,25,276,38],[213,0,278,12,"reason"],[213,20,278,20,"ev"],[213,23,278,23,"reason"],[214,0,276,38],[214,11,276,10],[214,12,275,8],[216,0,281,8],[216,17,281,13,"_unregisterEvents"],[216,34,281,8],[218,0,282,8],[218,17,282,13,"close"],[218,22,282,8],[219,0,283,7],[219,9,270,6],[219,10,247,26],[219,12,284,6],[219,17,284,11,"_eventEmitter"],[219,30,284,6],[219,31,284,25,"addListener"],[219,42,284,6],[219,43,284,37],[219,60,284,6],[219,62,284,56],[219,76,284,62],[220,0,285,8],[220,14,285,12,"ev"],[220,17,285,15,"id"],[220,19,285,12],[220,24,285,22],[220,31,285,27,"_socketId"],[220,40,285,8],[220,42,285,38],[221,0,286,10],[222,0,287,9],[224,0,288,8],[224,17,288,13,"readyState"],[224,27,288,8],[224,30,288,26],[224,37,288,31,"CLOSED"],[224,43,288,8],[226,0,289,8],[226,17,289,13,"dispatchEvent"],[226,30,289,8],[226,31,290,10],[226,35,290,14,"WebSocketEvent"],[226,49,290,10],[226,50,290,29],[226,57,290,10],[226,59,290,38],[227,0,291,12,"message"],[227,21,291,21,"ev"],[227,24,291,24,"message"],[228,0,290,38],[228,11,290,10],[228,12,289,8],[230,0,294,8],[230,17,294,13,"dispatchEvent"],[230,30,294,8],[230,31,295,10],[230,35,295,14,"WebSocketEvent"],[230,49,295,10],[230,50,295,29],[230,57,295,10],[230,59,295,38],[231,0,296,12,"message"],[231,21,296,21,"ev"],[231,24,296,24,"message"],[232,0,295,38],[232,11,295,10],[232,12,294,8],[234,0,299,8],[234,17,299,13,"_unregisterEvents"],[234,34,299,8],[236,0,300,8],[236,17,300,13,"close"],[236,22,300,8],[237,0,301,7],[237,9,284,6],[237,10,247,26],[237,11,247,4],[238,0,303,3],[241,26,178,32],[242,0,179,4],[242,15,179,11],[242,20,179,16,"_binaryType"],[242,31,179,4],[243,0,180,3],[243,7],[244,24,160,17,"binaryType"],[244,34],[244,36,160,47],[245,0,161,4],[245,12,161,8,"binaryType"],[245,27,161,23],[245,33,161,8],[245,37,161,33,"binaryType"],[245,52,161,48],[245,65,161,4],[245,67,161,63],[246,0,162,6],[246,16,162,12],[246,20,162,16,"Error"],[246,25,162,12],[246,26,162,22],[246,77,162,12],[246,78,162,6],[247,0,163,5],[249,0,164,4],[249,12,164,8],[249,17,164,13,"_binaryType"],[249,28,164,8],[249,33,164,29],[249,39,164,8],[249,43,164,39,"binaryType"],[249,58,164,54],[249,64,164,4],[249,66,164,62],[250,0,165,6,"invariant"],[250,20,166,8,"BlobManager"],[250,32,166,20,"isAvailable"],[250,43,165,6],[250,45,167,8],[250,100,165,6],[252,0,169,6],[252,14,169,10,"binaryType"],[252,29,169,25],[252,35,169,6],[252,37,169,33],[253,0,170,8,"BlobManager"],[253,24,170,20,"addWebSocketHandler"],[253,43,170,8],[253,44,170,40],[253,49,170,45,"_socketId"],[253,58,170,8],[254,0,171,7],[254,11,169,6],[254,17,171,13],[255,0,172,8,"BlobManager"],[255,24,172,20,"removeWebSocketHandler"],[255,46,172,8],[255,47,172,43],[255,52,172,48,"_socketId"],[255,61,172,8],[256,0,173,7],[257,0,174,5],[259,0,175,4],[259,13,175,9,"_binaryType"],[259,24,175,4],[259,27,175,23,"binaryType"],[259,37,175,4],[260,0,176,3],[266,4,63,24,"EventTarget"],[266,30,63,39,"WEBSOCKET_EVENTS"],[266,46,63,24],[266,47],[268,0,63,6,"WebSocket"],[268,11],[268,12,64,9,"CONNECTING"],[268,22],[268,25,64,22,"CONNECTING"],[268,35],[269,0,63,6,"WebSocket"],[269,11],[269,12,65,9,"OPEN"],[269,16],[269,19,65,16,"OPEN"],[269,23],[270,0,63,6,"WebSocket"],[270,11],[270,12,66,9,"CLOSING"],[270,19],[270,22,66,19,"CLOSING"],[270,29],[271,0,63,6,"WebSocket"],[271,11],[271,12,67,9,"CLOSED"],[271,18],[271,21,67,18,"CLOSED"],[271,27],[272,0,63,6,"WebSocket"],[272,11],[272,12,92,9,"isAvailable"],[272,23],[272,26,92,32],[272,27,92,33],[272,28,92,34,"WebSocketModule"],[272,43],[273,0,306,0,"module"],[273,9,306,7,"exports"],[273,16,306,0],[273,19,306,17,"WebSocket"],[273,28,306,0]]},"type":"js/module"}]}